@page "/index"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Portail_OptiVille.Data.Exceptions
@using Portail_OptiVille.Data.Models
@using Portail_OptiVille.Data.Utilities
@using System.Text.RegularExpressions
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager navigationManager
@inject ICookie cookie
@inject JwtTokenGenerator tokenGenerator
@inject A2024420517riGr1Eq6Context _context

<PageTitle>Accueil</PageTitle>
<div class="container-fluid">
    <div class="row ">
        <div class="col-xl-12">
            <h1 class="titre-90bold d-flex justify-content-center align-items-center">Bienvenue @nomEntreprise</h1>
        </div>
    </div>
</div>

@code {
    private string nomEntreprise = "";
    protected override async Task OnAfterRenderAsync(bool firstRender)
{
    try
    {
        // Vérifier si c'est le premier rendu
        if (!firstRender) return;

        // Récupération de l'email depuis la session protégée
        var sessionResult = await ProtectedSessionStore.GetAsync<string>("Email");

        string email;
        if (!sessionResult.Success || string.IsNullOrEmpty(sessionResult.Value))
        {
            // Si l'email n'est pas trouvé dans la session, récupérer depuis les cookies
            string token = await cookie.GetValue("SToken") 
                ?? throw new UserNotAuthenticatedException("Session expirée ou non connectée.");
            email = tokenGenerator.GetValueFromToken(token).Split(":")[0];

            // Valider le format de l'email
            if (!Regex.IsMatch(email, @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"))
                throw new UserNotAuthenticatedException("Email non valide ou session expirée.");

            // Vérifier l'utilisateur et la date d'expiration
            var user = _context.Usersessions
                .FirstOrDefault(u => u.OwnerEmail == email)
                ?? throw new UserNotAuthenticatedException("Utilisateur non trouvé ou session expirée.");

            if (user.ExpirationDate <= DateTime.Now)
                throw new UserNotAuthenticatedException("Session expirée.");

            // Mettre à jour la session protégée avec l'email valide
            await ProtectedSessionStore.SetAsync("Email", email);
        }
        else
        {
            email = sessionResult.Value;
        }

        // Récupérer le nom de l'entreprise associé à l'email
        nomEntreprise = _context.Identifications
            .FirstOrDefault(i => i.AdresseCourriel == email)?.NomEntreprise;
            StateHasChanged();

        Console.WriteLine($"Adresse courriel: {email}");
        Console.WriteLine($"Nom entreprise: {nomEntreprise}");
    }
    catch (UserNotAuthenticatedException ex)
    {
        Console.WriteLine($"Erreur utilisateur : {ex.Message}");
        navigationManager.NavigateTo("/", true);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Erreur inattendue : {ex.Message}");
        navigationManager.NavigateTo("/", true);
    }
}


}
