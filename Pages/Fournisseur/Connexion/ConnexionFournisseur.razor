@page "/Connexion"
@using System.ComponentModel.DataAnnotations
@using Portail_OptiVille.Data.Models
@using Microsoft.AspNetCore.Components.Forms
@using Konscious.Security.Cryptography;
@using System.Text;
@inject NavigationManager NavigationManager
@inject A2024420517riGr1Eq6Context _context
@inject IJSRuntime JsRuntime

<EditForm Model="@logInModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="ValidateInput">
    <!-- OnValidSubmit="HandleValidSubmit" -->
    <div class="form-group container-fluid h-100 w-100 d-flex align-items-center justify-content-center">
        <div class="row h-100 w-100 d-flex align-items-center justify-content-center">
            <div class="card w-75 h-75 d-flex justify-content-center p-0 m-0">

                @* Identification *@
                <div class="card-header py-2 bg-bleuFonce">
                    <h3 class="py-2 p-0 my-0 text-white titre-bold">Identification</h3>
                </div>
                <div class="card-body border-bleuFonce py-1">
                    <div class="col-xl-12 col-lg-12 py-2">
                        <label class="bleuFonce texte-bold" for="Courriel">
                            <i class="bi @GetEmailIcon()"></i> Courriel <i class="bi bi-braces text-success"></i>
                        </label>
                        <InputText type="Email" class="form-control" id="Courriel" @bind-Value="logInModel.Courriel" />
                        @*Affichage de l'erreur*@
                        <ValidationMessage For="@(() => logInModel.Courriel)" />
                    </div>

                    <div class="col-xl-12 col-lg-12 py-2">
                        <label class="bleuFonce texte-bold" for="MotDePasse">
                            <i class="bi @passwordIconClass"></i> Mot de passe
                            <i class="bi bi-braces text-success"></i>
                        </label>
                        <InputText type="password" class="form-control" id="MotDePasse" @bind-Value="logInModel.MotDePasse" />
                        @*Affichage de l'erreur*@
                        <ValidationMessage For="@(() => logInModel.MotDePasse)" />
                    </div>
                </div>

                <div class="card-footer py-2 bg-bleuFonce">
                    <button type="submit" class="btn btn-success w-100" >Connexion</button>
                </div>
            </div>
        </div>
    </div>
    <DataAnnotationsValidator />
</EditForm>
@code{

    private LogInModel logInModel = new LogInModel();

    private async void HandleValidSubmit()
    {
        // Récupérer le fournisseur qui a l'adresse courriel
        Fournisseur? fournisseur = _context.Fournisseurs.ToList().Find(f => f.AdresseCourriel == logInModel.Courriel);

        if (fournisseur != null)
        {
            // Vérification du mot de passe
            Console.WriteLine(HashPassword(logInModel.MotDePasse));
            if (VerifyPassword(logInModel.MotDePasse, fournisseur.MotDePasse))
            {
                // Redirection si les informations sont correctes
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                // Réinitialisation du mot de passe si incorrect
                logInModel.MotDePasse = ""; 
                await JsRuntime.InvokeVoidAsync("alert", "Adresse Courriel ou mot de passe incorrect!"); 
            }
        }
        else
        {
            // Cas où le fournisseur n'est pas trouvé
            await JsRuntime.InvokeVoidAsync("alert", "Adresse Courriel ou mot de passe incorrect!"); 
        }
    }


public string HashPassword(string password)
{
    // Définir les paramètres de hachage
    int iterations = 4; // Nombre d'itérations
    int memorySize = 65536; // Taille de la mémoire (en Ko)
    int degreeOfParallelism = 8; // Niveau de parallélisme

    // Convertir le mot de passe en bytes
    byte[] passwordBytes = Encoding.UTF8.GetBytes(password);
    
    using (var hasher = new Argon2id(passwordBytes))
    {
        hasher.Iterations = iterations;
        hasher.MemorySize = memorySize / 1024; // Convertir en Mo
        hasher.DegreeOfParallelism = degreeOfParallelism;

        // Hachage du mot de passe
        byte[] hashBytes = hasher.GetBytes(32); // Taille du hachage
        return Convert.ToBase64String(hashBytes); // Convertir en base64 pour le stockage
    }
}

public bool VerifyPassword(string password, string hashedPassword)
{
    // Hacher le mot de passe saisi
    string newHash = HashPassword(password);
    return newHash == hashedPassword;
}




    private string emailIconClass = ""; // Par défaut
    private string passwordIconClass = ""; // Par défaut

    private void ValidateInput()
    {
        if (IsValidEmail(logInModel.Courriel))
        {
            emailIconClass = "bi-check-circle text-success"; // Valide
        }
        else
        {
            emailIconClass = "bi-x-circle text-danger"; // Invalide
        }

        if(string.IsNullOrEmpty(logInModel.MotDePasse))
        {
            passwordIconClass = "bi-x-circle text-danger"; // Invalide
        }
        else
        {
            passwordIconClass = "bi-check-circle text-success"; // Valide
        }
    }

    private bool IsValidEmail(string email)
    {
        // Simple validation, tu peux utiliser des expressions régulières pour plus de précision
        return !string.IsNullOrEmpty(email) && email.Contains("@") && email.Contains(".");
    }

    private string GetEmailIcon()
    {
        return emailIconClass;
    }

    public class LogInModel
    {
        [Required(ErrorMessage = "Le courriel est requis")]
        [EmailAddress(ErrorMessage = "Le courriel n'est pas valide")]
        public string Courriel { get; set; }

        [Required(ErrorMessage = "Le mot de passe est requis")]
        public string MotDePasse { get; set; }
    }
}