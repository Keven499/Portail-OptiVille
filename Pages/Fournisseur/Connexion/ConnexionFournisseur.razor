@page "/"
@using System.ComponentModel.DataAnnotations
@using Portail_OptiVille.Data.Exceptions
@using Portail_OptiVille.Data.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Cryptography;
@using System.Text;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Portail_OptiVille.Data.Utilities
@using System.Text.RegularExpressions
@using Shared.LoginLayout
@using System.Linq.Expressions
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavigationManager
@inject A2024420517riGr1Eq6Context _context
@inject IJSRuntime JsRuntime
@inject ICookie cookie
@inject JwtTokenGenerator tokenGenerator

@layout LoginLayout

@code {
    public const int COOKIE_EXPIRATION = 3; // 3 Hours
}

<PageTitle>Connexion Fournisseurs</PageTitle>
<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />
    <div class="form-group container-fluid">
        <div class="row d-flex justify-content-center">
            <div class="col-xl-6 col-xl-6 col-lg-11 col-12 col-sm-12 py-2">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center py-2 bg-bleuFonce">
                        <h3 class="py-2 p-0 my-0 text-white titre-bold">Identification</h3>
                        <div>
                            <button id="btnBleu" class="btn bg-bleu texte-bold text-white" onclick="location.href='/demandeFournisseur'"><i class="bi bi-plus-circle me-1"></i>Nouvelle demande</button>
                        </div>
                    </div>
                    <div class="card-body border-bleuFonce py-1">
                        <div class="col-xl-8 col-lg-8 col-12 col-sm-12 py-2">
                            <label class="bleuFonce texte-bold" for="Courriel">Courriel / NEQ <i class="bi bi-braces-asterisk text-danger"></i></label>
                            <input type="text" class="form-control @GetInputClass(() => logInModel.Username) input-bleu texte-light" id="Courriel" @bind="logInModel.Username" />
                            @((MarkupString)GetValidationHTML(() => logInModel.Username))
                        </div>
                        <div class="col-xl-8 col-lg-8 col-12 col-sm-12 py-2">
                            <label class="bleuFonce texte-bold" for="MotDePasse">Mot de passe <i class="bi bi-braces-asterisk text-danger"></i></label>
                            <input type="password" class="form-control @GetInputClass(() => logInModel.MotDePasse) input-bleu texte-light" id="MotDePasse" @bind="logInModel.MotDePasse"  />
                            @((MarkupString)GetValidationHTML(() => logInModel.MotDePasse))
                        </div>
                    </div>
                    <div class="card-footer py-2 bg-bleuFonce d-flex justify-content-center">
                        <button type="button" @onclick="ConnectUser" id="btnBleu" class="btn bg-bleu texte-bold text-white" style="width: 200px;">Connexion</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

<style>
    .valid {
        outline: 1px solid #26b050;
    }
</style>

@code {
    private LogInModel logInModel = new LogInModel();
    private bool isSubmit = false;
    private bool isValidForm = false;
     private ValidationMessageStore validationMessageStore;
    private EditContext editContext;


    protected override void OnInitialized()
    {
        editContext = new EditContext(logInModel);
        editContext.OnValidationStateChanged += (sender, args) => StateHasChanged();
        validationMessageStore = new ValidationMessageStore(editContext);
    }

    public bool TriggerValidation() 
    {
        validationMessageStore.Clear();
        isSubmit = true;
        isValidForm = editContext.Validate();
        return isValidForm;
    }

    private string GetInputClass<TField> (Expression<Func<TField>> fieldExpression)
    {
        if (!isSubmit || isValidForm) {
            return "";
        }
        var fieldIdentifier = FieldIdentifier.Create(fieldExpression);
        var isValid = !editContext.GetValidationMessages(fieldIdentifier).Any();
        if (fieldIdentifier.FieldName.Equals("NumeroLicence")) {
            return isValid ? "" : "invalid";
        }

        return isValid ? "valid" : "invalid";
    }

    private string GetValidationHTML<TField> (Expression<Func<TField>> fieldExpression) 
    {
        if (!isSubmit || isValidForm) {
            return "";
        }
        var fieldIdentifier = FieldIdentifier.Create(fieldExpression);
        var isValid = !editContext.GetValidationMessages(fieldIdentifier).Any();
        if (fieldIdentifier.FieldName.Equals("NumeroLicence")) {
            return isValid ? "" : "<span class=\"input-group-text text-danger\"><i class=\"bi bi-x-circle me-2\"></i><span class=\"texte-validation\">" + editContext.GetValidationMessages(fieldIdentifier).FirstOrDefault() + "</span></span>";
        }

        return isValid ? "<span class=\"input-group-text text-success\"><i class=\"bi bi-check-circle me-2\"></i><span class=\"texte-validation\">Valide</span></span>" 
                       : "<span class=\"input-group-text text-danger\"><i class=\"bi bi-x-circle me-2\"></i><span class=\"texte-validation\">" + editContext.GetValidationMessages(fieldIdentifier).FirstOrDefault() + "</span></span>";  
    }
    private async void ConnectUser()
    {
        if (TriggerValidation())
        {

            // Récupérer le fournisseur qui a l'adresse courriel
            Identification? fournisseur = _context.Identifications.FirstOrDefault(f => f.AdresseCourriel == logInModel.Username);
            if (fournisseur is null)
            {
                fournisseur = _context.Identifications.FirstOrDefault(f => f.Neq == logInModel.Username);
            }

            try
            {

                if (fournisseur != null)
                {
                    // Vérification du mot de passe
                    if (VerifyPassword(logInModel.MotDePasse, fournisseur.MotDePasse))
                    {
                        // Redirection si les informations sont correctes
                        await ProtectedSessionStore.SetAsync("Email", fournisseur.AdresseCourriel);
                        await ProtectedSessionStore.SetAsync("IDFournisseur", fournisseur.Fournisseur);

                        // Suppression des anciens tokens
                        _context.Usersessions.RemoveRange(_context.Usersessions.Where(x => x.OwnerEmail == fournisseur.AdresseCourriel));

                        string token = tokenGenerator.GenerateToken($"{fournisseur.AdresseCourriel}:{fournisseur.Fournisseur}");
                        // ajouter le token dans la BD
                        Usersession usersession = new Usersession
                            {
                                Token = token,
                                OwnerEmail = fournisseur.AdresseCourriel,
                                ExpirationDate =
                            DateTime.Now.AddHours(COOKIE_EXPIRATION)
                            };
                        _context.Usersessions.Add(usersession);
                        await _context.SaveChangesAsync();

                        await cookie.SetValue("SToken", token, COOKIE_EXPIRATION);

                        NavigationManager.NavigateTo("/affichage", true);
                    }
                    else
                    {
                        // Réinitialisation du mot de passe si incorrect
                        logInModel.MotDePasse = "";
                        validationMessageStore.Add(() => logInModel.Username, "Données incorrectes");
                        validationMessageStore.Add(() => logInModel.MotDePasse, "Données incorrectes");
                        await JsRuntime.InvokeVoidAsync("alert", "Adresse Courriel / NEQ ou mot de passe incorrect!");
                    }
                }
                else
                {
                    // Cas où le fournisseur n'est pas trouvé
                    validationMessageStore.Add(() => logInModel.Username, "Données incorrectes");
                    await JsRuntime.InvokeVoidAsync("alert", "Adresse Courriel / NEQ ou mot de passe incorrect!");
                }
            }
            catch
            {
                await JsRuntime.InvokeVoidAsync("alert", "Une erreur est survenue !");
                NavigationManager.NavigateTo("/");

            }
        }
    }


    static string HashPassword(string input)
    => Convert.ToHexString(SHA1.HashData(Encoding.UTF8.GetBytes(input)));

    public bool VerifyPassword(string password, string hashedPassword)
    {
        // Hacher le mot de passe saisi
        string newHash = HashPassword(password);
        return newHash == hashedPassword;
    }

    public class LogInModel
    {
        [Required(ErrorMessage = "Le courriel/NEQ est requis")]
        [RegularExpression(@"^(?:((11|22|33|88)[4-9]\d{7})|([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}))$", ErrorMessage = "Mauvais format")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Le mot de passe est requis")]
        public string MotDePasse { get; set; }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var result = await ProtectedSessionStore.GetAsync<string>("Email");
                if (result.Success || !string.IsNullOrEmpty(result.Value))
                {
                    Console.WriteLine($"Adresse courriel: {result.Value}");
                    NavigationManager.NavigateTo("/affichage", true);
                }
            }
            catch
            {
                Console.WriteLine($"Erreur lors de la récupération de l'adresse courriel");
            }

        }
    }
}