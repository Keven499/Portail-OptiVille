@using Portail_OptiVille.Data.FormModels
@using System.Text.RegularExpressions
@using System.Linq.Expressions

<style>
    .invalid {
        outline: 1px solid red;
    }
    .valid {
        outline: 1px solid #26b050;
    }
</style>

<PageTitle>Ã‰tape 1 Identification</PageTitle>
<EditForm EditContext="@EditContext">
    <DataAnnotationsValidator />
    <div class="card-header py-2 bg-bleuFonce">
        <h3 class="py-2 p-0 my-0 text-white titre-bold">Identification</h3>
    </div>
    <div class="card-body border-bleuFonce py-1">
        <div class="col-xl-3 col-lg-3 col-6 col-sm-6 py-2">
            <label class="bleuFonce texte-bold" for="NEQ">NEQ <i class="bi bi-braces text-success"></i></label>
            <input type="text" @bind="IdenticationFormModel.NEQ" class="form-control @GetInputClass(() => IdenticationFormModel.NEQ) input-bleu texte-light" id="NEQ" />
            @((MarkupString)GetValidationHTML(() => IdenticationFormModel.NEQ))
        </div>
        <div class="col-xl-12 col-lg-12 col-12 col-sm-12 py-2">
            <label class="bleuFonce texte-bold" for="nomEntreprise">Nom de l'entreprise <i class="bi bi-braces-asterisk text-danger"></i></label>
            <input type="text" id="nomEntreprise" maxlength="64" class="form-control @GetInputClass(() => IdenticationFormModel.NomEntreprise) input-bleu texte-light" @bind="IdenticationFormModel.NomEntreprise" />
            @((MarkupString)GetValidationHTML(() => IdenticationFormModel.NomEntreprise))
        </div>
        <div class="col-xl-12 col-lg-12 col-12 col-sm-12 py-2">
            <label class="bleuFonce texte-bold" for="courrielEntreprise">Courriel de l'entreprise <i class="bi bi-braces-asterisk text-danger"></i></label>
            <input type="email" id="courrielEntreprise" maxlength="64" @bind="IdenticationFormModel.CourrielEntreprise" class="form-control @GetInputClass(() => IdenticationFormModel.CourrielEntreprise) input-bleu texte-light" />
            @((MarkupString)GetValidationHTML(() => IdenticationFormModel.CourrielEntreprise))
        </div>
        <div class="col-xl-12 col-lg-12 col-12 col-sm-12 py-2">
            <label class="bleuFonce texte-bold" for="MotDePasse">Mot de passe  <i class="bi bi-braces-asterisk text-danger"></i></label>
            <input type="password" id="MotDePasse" @bind="IdenticationFormModel.MotDePasse" class="form-control @GetInputClass(() => IdenticationFormModel.MotDePasse) input-bleu texte-light" />
            @((MarkupString)GetValidationHTML(() => IdenticationFormModel.MotDePasse))
        </div>
        <div class="col-xl-12 col-lg-12 col-12 col-sm-12 py-2">
            <label class="bleuFonce texte-bold" for="ConfirmationMotDePasse">Confirmation du mot de passe <i class="bi bi-braces-asterisk text-danger"></i></label>
            <input type="password" id="ConfirmationMotDePasse" @bind="IdenticationFormModel.ConfirmationMotDePasse" class="form-control @GetInputClass(() => IdenticationFormModel.ConfirmationMotDePasse) input-bleu texte-light" />
            @((MarkupString)GetValidationHTML(() => IdenticationFormModel.ConfirmationMotDePasse))
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public Action<IdentificationForm>? AssignReference { get; set; }
    [Parameter]
    public IdenticationFormModel IdenticationFormModel { get; set; }
    private EditContext EditContext { get; set; }
     private bool isSubmit = false;
    protected override void OnInitialized()
    {
        EditContext = new EditContext(IdenticationFormModel);
        EditContext.OnValidationStateChanged += (sender, args) => StateHasChanged();
        AssignReference?.Invoke(this);
    }

    private string GetInputClass<TField> (Expression<Func<TField>> fieldExpression)
    {
        if (!isSubmit) {
           return "";
        }
        var fieldIdentifier = FieldIdentifier.Create(fieldExpression);
        var isValid = !EditContext.GetValidationMessages(fieldIdentifier).Any();
        return isValid ? "valid" : "invalid";
    }

    private string GetValidationHTML<TField> (Expression<Func<TField>> fieldExpression) 
    {
        if (!isSubmit) {
           return "";
        }
        var fieldIdentifier = FieldIdentifier.Create(fieldExpression);
        var isValid = !EditContext.GetValidationMessages(fieldIdentifier).Any();
        return isValid ? "<span class=\"input-group-text text-success\"><i class=\"bi bi-check-circle me-2\"></i><span class=\"texte-medium\">Valide</span></span>" 
                       : "<span class=\"input-group-text text-danger\"><i class=\"bi bi-x-circle me-2\"></i><span class=\"texte-medium\">" + EditContext.GetValidationMessages(fieldIdentifier).FirstOrDefault() + "</span></span>";  
    }

    public bool TriggerValidation() 
    {
        isSubmit = true;
        StateHasChanged();
        return EditContext.Validate();
    }
}