@page "/demandeFournisseur"
@using Portail_OptiVille.Data.FormModels
@using Portail_OptiVille.Data.Models
@using Microsoft.EntityFrameworkCore;
@inject A2024420517riGr1Eq6Context _context

<PageTitle>Demande fournisseur</PageTitle>
<div class="form-group container-fluid h-100 w-100 d-flex align-items-center justify-content-center">
    <div class="row h-100 w-100 d-flex align-items-center justify-content-center">
        @if (isLoading)
        {
            <p>Chargement en cours...</p>
        }
        else
        {
            <div class="progress mb-2 texte-bold">
                <div class="progress-bar progress-bar-striped bleuFonce rounded titre-bold text-white" role="progressbar" 
                    style="width: @ProgressPercentage%;" aria-valuenow="@ProgressPercentage" aria-valuemin="0" aria-valuemax="100">
                    Étape @currentStep sur @totalSteps
                </div>
            </div>
            <div class="mb-1">
                @Components[currentIndex]
            </div>
            <div class="d-flex justify-content-end">
                <button type="button" @onclick="ShowPrevious" disabled="@isFirstComponent" class="btn bg-bleu text-white texte-bold" style="width: 200px;">Précédent 
                    <i class="bi bi-arrow-left-circle"></i>
                </button>
                <button type="submit" @onclick="ShowNext" class="btn bg-bleu text-white texte-bold ms-2" style="width: 200px;">Suivant 
                    <i class="bi bi-arrow-right-circle"></i>
                </button>
            </div>
        }
    </div>
</div>

@code {
    private LicenceRBQFormModel licenceRBQFormModel = new LicenceRBQFormModel();
    private List<RenderFragment> Components { get; set; }
    private bool isLoading = true;
    private List<Categorierbq> allCategories;
    private bool isFirstComponent => currentIndex == 0;
    private int currentIndex = 0;
    // Calculer l'étape actuelle
    private int currentStep => currentIndex + 1;
    private int totalSteps => Components.Count;

    // Calculer le pourcentage de progression basé sur l'étape actuelle
    private double ProgressPercentage => (double)currentStep / totalSteps * 100;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            allCategories = await _context.Categorierbqs.ToListAsync(); 
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        licenceRBQFormModel.SousCategoSelected = allCategories.ToDictionary(c => c.CodeSousCategorie, c => false);

        Components = new List<RenderFragment>
        {
            // FORMULAIRE LICENCE RBQ
            builder =>
            {
                builder.OpenComponent(0, typeof(LicenceRBQ));
                builder.AddAttribute(1, "LicenceRBQFormModel", licenceRBQFormModel);
                builder.AddAttribute(2, "AllCategories", allCategories); 
                builder.CloseComponent();
            },
            // FORMULAIRE IDENTIFICATION ET COORDONNÉES DE L'ENTREPRISE ? MAYBE SPLIT EN DEUX AUSSI, ON VERRA
            builder =>
            {
                builder.OpenComponent(1, typeof(Contact));
                builder.CloseComponent();
            },
            // FORMULAIRE CONTACT
            builder =>
            {
                builder.OpenComponent(2, typeof(Contact));
                builder.CloseComponent();
            }
            // FORMULAIRE PIÈCES JOINTES
            // FORMULAIRE PRODUITS ET SERVICES
        };
        isLoading = false;
    }

    private void ShowNext()
    {
        if (currentIndex < Components.Count - 1)
        {
            currentIndex++;
        }
    }

    private void ShowPrevious()
    {
        if (currentIndex > 0)
        {
            currentIndex--;
        }
    }
}
<!-- JE SUIS EN TRAIN DE METTRE LA STRUCTURE EN PLACE PETIT À PETIT -->