@page "/demandeFournisseur"
@using Portail_OptiVille.Data.FormModels
@using Portail_OptiVille.Data.Models
@using Microsoft.EntityFrameworkCore;
@inject A2024420517riGr1Eq6Context _context

<PageTitle>Demande fournisseur</PageTitle>
<div class="form-group container-fluid h-100 w-100 d-flex align-items-center justify-content-center">
    <div class="row h-100 w-100 d-flex align-items-center justify-content-center">
        @if (isLoading)
        {
            <p>Chargement de la page en cours...</p>
        }
        else
        {
            <div class="progress mb-2 texte-bold">
                <div class="progress-bar progress-bar-striped bleuFonce rounded titre-bold text-white" role="progressbar" 
                    style="width: @ProgressPercentage%;" aria-valuenow="@ProgressPercentage" aria-valuemin="0" aria-valuemax="100">
                    Étape @currentStep sur @totalSteps
                </div>
            </div>
            <div class="mb-1">
                @Components[currentIndex]
            </div>
            <div class="d-flex justify-content-end">
                <button @onclick="ShowPrevious" disabled="@isFirstComponent" class="btn bg-bleu text-white texte-bold" style="width: 200px;">Précédent 
                    <i class="bi bi-arrow-left-circle"></i>
                </button>
                <button @onclick="ShowNext" class="btn bg-bleu text-white texte-bold ms-2" style="width: 200px;">Suivant 
                    <i class="bi bi-arrow-right-circle"></i>
                </button>
            </div>
        }
    </div>
</div>

@code {
    private LicenceRBQFormModel licenceRBQFormModel = new LicenceRBQFormModel();
    private LicenceRBQ? licenceRBQRef;
    private List<RenderFragment> Components { get; set; } = new List<RenderFragment>();
    private bool isLoading = true;
    private List<Categorierbq> allCategories = new List<Categorierbq>();
    private bool isFirstComponent => currentIndex == 0;
    private int currentIndex = 0;
    private int currentStep => currentIndex + 1;
    private int totalSteps => Components.Count;
    private double ProgressPercentage => (double)currentStep / totalSteps * 100;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            allCategories = await _context.Categorierbqs.ToListAsync(); 
            if (allCategories != null && allCategories.Any())
            {
                licenceRBQFormModel.SousCategoSelected = allCategories.ToDictionary(c => c.CodeSousCategorie, c => false);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        Components = new List<RenderFragment>
        {
            // FORMULAIRE IDENTIFICATION 1
            // FORMULAIRE COORDONNÉES 2
            // FORMULAIRE CONTACT 3
            // FORMULAIRE PRODUITS ET SERVICES 4
            // FORMULAIRE LICENCE RBQ 5
            // FORMULAIRE PIÈCES JOINTES 6
            builder =>
            {
                builder.OpenComponent<LicenceRBQ>(0);
                builder.AddAttribute(1, "AssignReference", (Action<LicenceRBQ>)(licenceRBQ => licenceRBQRef = licenceRBQ));
                builder.AddAttribute(2, "AllCategories", allCategories); 
                builder.AddAttribute(3, "LicenceRBQFormModel", licenceRBQFormModel);
                builder.CloseComponent();
            },
            
            builder =>
            {
                builder.OpenComponent(1, typeof(Contact));
                builder.CloseComponent();
            }
        };

        licenceRBQRef = new LicenceRBQ();
        isLoading = false;
    }

    private async Task ShowNext()
    {
        if (currentIndex == 0 && licenceRBQRef != null)
        {
            bool isValid = await licenceRBQRef.ValidateForm();
            if (!isValid)
            {
                return;
            }
        }
        else {
            Console.WriteLine("La référence du composant est nulle");
        }

        // Incrémente l'index pour afficher le composant suivant
        if (currentIndex < Components.Count - 1)
        {
            currentIndex++;
        }
    }

    private void ShowPrevious()
    {
        if (currentIndex > 0)
        {
            currentIndex--;
        }
    }

    private void AssignReferences(LicenceRBQ licenceRBQ)
    {
        licenceRBQRef = licenceRBQ;
    }
}