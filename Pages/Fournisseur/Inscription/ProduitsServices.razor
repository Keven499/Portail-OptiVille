@using Microsoft.EntityFrameworkCore
@using Portail_OptiVille.Data.Models
@using Portail_OptiVille.Data.FormModels
@inject A2024420517riGr1Eq6Context _context

<PageTitle>Étape 4 Produits et services</PageTitle>
<EditForm Model="@ProduitServiceFormModel">
    <div class="card-header py-2 bg-bleuFonce">
        <h3 class="py-2 p-0 my-0 text-white titre-bold">Produits et services</h3>
    </div>
    <div class="card-body border-bleuFonce py-1">
        <div class="col-xl-12 col-lg-12 py-2">
            <div class="input-group">
                <input @bind="searchBarValue" type="text" class="form-control input-bleu texte-light" placeholder="Recherchez">
                <button class="btn bg-bleu text-white" type="button" @onclick="OnSearch">
                    <i class="bi bi-search"></i>
                </button>
            </div>
        </div>
        <div class="col-xl-12 col-lg-12 py-2">
            <label class="texte-bold" for="statut"><i class="bi bi-braces text-success"></i> Catégorie</label>
            <select class="form-select input-bleu texte-light" @onchange="OnCategorieChange">
                <option>Toutes les catégories</option>
                    @foreach (var categorie in CategorieUNSPSC) {
                        <option>@categorie.CodeCategorie - @categorie.Categorie</option>
                    }
            </select>
        </div>
        <div class="col-xl-12 col-lg-12 py-2">
            <label class="texte-bold"><i class="bi bi-braces-asterisk text-danger"></i></label>
            <div class="@(isErrorSousProduit ? "invalid" : (isGoodSousProduit ? "valid" : "")) overflow-auto box-bleu card">
                @foreach (var produitServiceLine in produitServiceCatego)
                {
                    <div class="row m-0 mb-1">
                        <div class="col-auto p-0">
                            <label for="categorie@(i)" class="d-flex">
                                <input type="checkbox" id="categorie@(i)"
                                    checked="@ProduitServiceFormModel.SousProduitSelected[produitServiceLine.CodeUnspsc]" 
                                    @onchange="(e) => OnCheckboxChange(produitServiceLine.CodeUnspsc, e)" />
                                <span class="check-blanc" />
                                <span class="texte-14bold">@produitServiceLine.CodeUnspsc - @produitServiceLine.Description</span>
                            </label>
                        </div>
                    </div>
                    i++;
                }
            </div>
            @if (isErrorSousProduit)
            {
                <span class="input-group-text text-danger">
                    <i class="bi bi-x-circle me-2"></i>
                    <div class="validation-message texte-medium">Sélectionnez au moins un produit ou service</div>
                </span>
            }
        </div>
        <div class="col-xl-12 col-lg-12 py-2">
            <label for="details" class="texte-bold" form="message"><i class="bi bi-braces-asterisk text-danger"></i> Détails et spécifications</label>
            <textarea id="message" oninput="countCharacters(this)" class="form-control @(isErrorDetail ? "invalid" : (isGoodDetail ? "valid" : "")) texte-light box-bleu" rows="6" placeholder="Entrez les détails ici" style="resize: none;" @bind="ProduitServiceFormModel.Message" />
            @if (isErrorDetail) {
                <span class="input-group-text text-danger">
                    <i class="bi bi-x-circle me-2"></i>
                    <div class="validation-message texte-medium">@detailErrorMessage</div>
                </span>
            }
            @if (isGoodDetail) {
                <span class="input-group-text text-success">
                    <i class="bi bi-check-circle me-2"></i>
                    <span class="texte-medium">Valide</span>
                </span>
            }
            <span style="display:none;" class="texte-bold" id="charCount">500 caractères restant.</span>
        </div>
    </div>
</EditForm>

<script>
    function countCharacters(textarea) {
        const maxLength = 500;
        const currentLength = textarea.value.length;
        const remaining = maxLength - currentLength;
        const charCountElement = document.getElementById("charCount");
        if (currentLength > 0) {
            charCountElement.style.display = "block";
            charCountElement.innerText = remaining < 0 
                ? "Limite dépassée de " + Math.abs(remaining) + " caractères" 
                : remaining + " caractères restants.";
        } else {
            charCountElement.style.display = "none";
        }
    }
</script>

@code{
    [Parameter]
    public Action<ProduitsServices>? AssignReference { get; set; }
    [Parameter]
    public List<Produitservice> AllProduitServices { get; set; }
    [Parameter]
    public ProduitServiceFormModel ProduitServiceFormModel { get; set; }
    [Parameter]
    public List<Categorieunspsc> CategorieUNSPSC { get; set; }
    private List<Produitservice> produitServiceCatego = new List<Produitservice>();
    private string? searchBarValue;
    private bool isErrorDetail = false;
    private bool isGoodDetail = false;
    private string? detailErrorMessage;
    private bool isErrorSousProduit = false;
    private bool isGoodSousProduit = false;
    private string? sousProduitErrorMessage;
    int i = 0;
    private string? selectedCategorie = "Toutes les catégories"; 
    protected override void OnInitialized()
    {
        AssignReference?.Invoke(this);
        try
        {
            produitServiceCatego = AllProduitServices.Take(500).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la récupération des personnes: {ex.Message}");
        }
    }
    
    private void OnCheckboxChange(string codeUNSPSC, ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            ProduitServiceFormModel.SousProduitSelected[codeUNSPSC] = (bool)e.Value;
        }
    }

    private bool ValidateSelection()
    {
        if (ProduitServiceFormModel == null || ProduitServiceFormModel.SousProduitSelected == null)
        {
            return false;
        }

        return ProduitServiceFormModel.SousProduitSelected.Values.Any(isSelected => isSelected);
    }

    private void OnCategorieChange(ChangeEventArgs e) {
        if (e.Value != null) {
            selectedCategorie = e.Value.ToString();
        }
        if (selectedCategorie != null && !selectedCategorie.Equals("Toutes les catégories")) {
            produitServiceCatego = AllProduitServices
                .Where(c => c.CodeCategorie == selectedCategorie.Substring(0, selectedCategorie.IndexOf(" - ")))
                .ToList();
        }
        else {
            produitServiceCatego = AllProduitServices.Take(500).ToList();
        }
    }

    private void OnSearch() {
        Console.WriteLine($"Search input: {searchBarValue}");
        Console.WriteLine($"Category input: {selectedCategorie}");
        if (!string.IsNullOrEmpty(searchBarValue) && char.IsDigit(searchBarValue[0]) && selectedCategorie != null)
        {
            if (!selectedCategorie.Equals("Toutes les catégories")) {
                produitServiceCatego = produitServiceCatego
                    .Where(c => c.CodeUnspsc != null && c.CodeUnspsc.Contains(searchBarValue))
                    .ToList();
            }   
            else {
                produitServiceCatego = AllProduitServices
                    .Where(c => c.CodeUnspsc != null && c.CodeUnspsc.Contains(searchBarValue))
                    .ToList();
            }
        }
        else {
            if (!string.IsNullOrEmpty(searchBarValue) && selectedCategorie != null) {
                if (!selectedCategorie.Equals("Toutes les catégories")) {
                    produitServiceCatego = produitServiceCatego
                        .Where(c => c.Description != null && c.Description.Contains(searchBarValue))
                        .ToList();
                }
                else {
                    produitServiceCatego = AllProduitServices
                        .Where(c => c.Description != null && c.Description.Contains(searchBarValue))
                        .ToList();
                }
            }
        }
    }

    public bool ValidateForm() {
        bool isValid = true;
        if (!ValidateSelection())
        {
            isErrorSousProduit = true;
            isGoodSousProduit = false;
            sousProduitErrorMessage = "Au moins une catégorie doit être sélectionné";
            isValid = false;
        }
        else
        {
            isErrorSousProduit = false;
            isGoodSousProduit = true;
        }

        if (!string.IsNullOrEmpty(ProduitServiceFormModel.Message)) {
            isGoodDetail = true;
            isErrorDetail = false;
        }
        else {
            isGoodDetail = false;
            isErrorDetail = true;
            detailErrorMessage = "Détails et spécifications requis";
            isValid = false;
        }

        return isValid;
    }
        
}