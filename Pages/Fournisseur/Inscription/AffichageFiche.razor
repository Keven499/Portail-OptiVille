@page "/affichage"
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Portail_OptiVille.Data.Models
@inject A2024420517riGr1Eq6Context _context
<div class="container-fluid card p-0 m-0">
    <div class="card-header py-2 bg-bleuFonce">
        <h3 class="py-2 p-0 my-0 text-white">Demande</h3>
    </div>
    <div class="card-body">
        <ul>
            @*<li>État @(selectedHistoriques.FirstOrDefault().DateEtatChanged.HasValue ? selectedHistoriques.FirstOrDefault().DateEtatChanged.Value.ToString("yyyy-MM-dd") : "N/A")</li>*@
            <li>Création @(selectedFournisseur.DateCreation.HasValue ? selectedFournisseur.DateCreation.Value.ToString("yyyy-MM-dd") : "N/A")</li>
            <li>Modification @(selectedFournisseur.DateLastChanged.HasValue ? selectedFournisseur.DateLastChanged.Value.ToString("yyyy-MM-dd") : "N/A")</li>
        </ul>
    </div>
    <div class="card-header py-2 bg-bleuFonce">
        <h3 class="py-2 p-0 my-0 text-white">Informations générales</h3>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">NEQ</label>
                <input type="text" class="form-control" id="inputEmail4" value="@selectedFournisseur.Neq">
            </div>
            <div class="col-xl-6 p-1">
                <label for="inputPassword4">Adresse</label>
                <input type="text" class="form-control" id="inputPassword4" value="@selectedFournisseur.NoCivique, @selectedFournisseur.Rue, @selectedFournisseur.Bureau">
            </div>
        </div>
        <div class="row">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">Nom de l'entreprise</label>
                <input type="text" class="form-control" id="inputEmail4" value="@selectedFournisseur.NomEntreprise">
            </div>
            <div class="col-xl-6 p-1">
                <label for="inputPassword4"></label>
                <input type="text" class="form-control" id="inputPassword4" value="@selectedFournisseur.Ville, @selectedFournisseur.Province, @selectedFournisseur.CodePostal">
            </div>
        </div>
        <div class="row">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">Adresse courriel</label>
                <input type="text" class="form-control" id="inputEmail4" value="@selectedFournisseur.AdresseCourriel">
            </div>
            <div class="col-xl-6 p-1">
                <label for="inputPassword4">Site Web</label>
                <input type="text" class="form-control" id="inputPassword4" value="@selectedFournisseur.SiteInternet">
            </div>
        </div>
    </div>
    <div class="card-header py-2 bg-bleuFonce">
        <h3 class="py-2 p-0 my-0 text-white">Contacts</h3>
    </div>
    <div class="card-body">
        @foreach(var contact in selectedContacts)
        {
        <div class="row">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">Nom, Prénom</label>
                <input type="text" class="form-control" id="inputEmail4" value="@contact.Nom, @contact.Prenom">
            </div>
            <div class="col-xl-6 p-1">
                <label for="inputPassword4">Fonction</label>
                <input type="text" class="form-control" id="inputPassword4" value="@contact.Fonction">
            </div>
        </div>
        <div class="row">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">Adresse courriel</label>
                <input type="text" class="form-control" id="inputEmail4" value="@contact.AdresseCourriel">
            </div>
            <div class="col-xl-6 p-1">
    using System.Data.Common;
                <label for="inputPassword4">Numéro de téléphone (@contact.TypeTelephone)</label>
                <input type="text" class="form-control" id="inputPassword4" value="@contact.Telephone #@contact.Poste">
            </div>
        </div>
        }
    </div>
    <div class="card-header py-2 bg-bleuFonce">
        <h3 class="py-2 p-0 my-0 text-white">Produits et services</h3>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-xl-6">
@if (groupedServices != null && groupedServices.Count > 0)
{
    string currentCategory = null;
    string currentNature = null;

    foreach (var group in groupedServices)
    {
        // Only print the category and nature if they have changed
        if (currentCategory != group.Key.CodeCategorie || currentNature != group.Key.Nature)
        {
            // If it's not the first group, add a horizontal rule
            if (currentCategory != null)
            {
                <hr />
            }

            // Print the new category and nature
            <div>
                <strong>@group.Key.CodeCategorie - @group.Key.Nature</strong>
            </div>

            // Update the current category and nature
            currentCategory = group.Key.CodeCategorie;
            currentNature = group.Key.Nature;
        }

        // List each produitservice under the current group
        foreach (var produitservice in group)
        {
            <p>@produitservice.CodeUnspsc - @produitservice.Description</p>
        }
    }
}


            </div>
            <div class="col-xl-6">
                <label for="TextAreaProduitService" class="form-label">Détails et spécifications</label>
                <textarea class="form-control" id="TextAreaProduitService" rows="6" style="resize: none;">@selectedFournisseur.Details</textarea>
            </div>
        </div>
        
    </div>
    <div class="card-header py-2 bg-bleuFonce">
        <h3 class="py-2 p-0 my-0 text-white">Licence RBQ</h3>
    </div>
    <div class="card-body">
        
        @foreach(var Licencerbq in selectedLicencerbqs)
        {
        <div class="row">
            <div class="col-xl-4">@Licencerbq.Statut</div>
            <div class="col-xl-4"><input type="text" class="form-control" id="inputEmail4" value="@Licencerbq.IdLicenceRbq"></div>
            <div class="col-xl-4"><input type="text" class="form-control" id="inputEmail4" value="@Licencerbq.Type"></div>
        </div>
        }

        @if (selectedLicencerbqs != null)
        {
            var groupedCategories = GroupCategoriesByType();
            
            foreach (var group in groupedCategories)
            {
                <div class="row d-flex">
                    <div class="col-xl-6">
                        <h3>Type: @group.Key</h3>
                        <ul>
                            @foreach (var categorie in group.Value)
                            {
                                <li>Catégorie: @categorie.Nom</li>
                            }
                        </ul>
                    </div> 
                </div>
            }
        }
        else
        {
            <p>Chargement...</p>
        }

    </div>
    <div class="card-header py-2 bg-bleuFonce">
        <h3 class="py-2 p-0 my-0 text-white">Brochures et cartes d'affaire (Total: @GetFormatSize())</h3>
    </div>
    <div class="card-body">
                    <table class="table border-bleuFonce table-bordered my-0">
                        <thead>
                            <tr>
                                <th scope="col" class="col-1 texte-bold">Fichier</th>
                                <th scope="col" class="texte-bold">Nom</th>
                                <th scope="col" class="col-1 texte-bold">Taille</th>
                                <th scope="col" class="col-2 texte-bold">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var file in selectedFichiers)
                            {
                                <tr>
                                    <th scope="row" class="texte-bold">@(selectedFichiers.IndexOf(file)+1)</th>
                                    <td class="texte-light">@file.Nom@file.Type</td>
                                    <td class="texte-light">@GetFormatSizeFile((long)file.Taille)</td>
                                    <td><button class="btn btn-danger texte-bold disabled" type="button"><i class="bi bi-trash"></i> Effacer</button></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
    <div class="card-header py-2 bg-bleuFonce">
        <h3 class="py-2 p-0 my-0 text-white">Finances</h3>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">TPS</label>
                <input type="text" class="form-control" id="inputEmail4" value="@selectedFournisseur.NumeroTps">
            </div>
            <div class="col-xl-6 p-1">
                <label for="inputPassword4">TVQ</label>
                <input type="text" class="form-control" id="inputPassword4" value="@selectedFournisseur.NumeroTvq">
            </div>
        </div>
        <div class="row">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">Conditions de paiement</label>
                <input type="text" class="form-control" id="inputEmail4" value="@selectedFournisseur.ConditionPaiement">
            </div>
            <div class="col-xl-6 p-1">
                <label for="inputPassword4">Devise</label>
                <input type="text" class="form-control" id="inputPassword4" value="@selectedFournisseur.Devise">
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">Mode de communication</label>
                <input type="text" class="form-control" id="inputEmail4" value="@selectedFournisseur.ModeCommunication">
            </div>
            
        </div>
    </div>
</div>

@code{
    public long sizeTotal { get; set; } = 0;
    public long MaxSize = 75;
    private DateTime date = DateTime.UtcNow;
    List<Categorierbq> Categorierbqs = new List<Categorierbq>();

    List<Categorieunspsc> Categorieunspscs = new List<Categorieunspsc>();

    List<Portail_OptiVille.Data.Models.Contact> selectedContacts = new List<Portail_OptiVille.Data.Models.Contact>();

    List<Fichier> selectedFichiers = new List<Fichier>();

    List<Fournisseur> selectedFournisseurs = new List<Fournisseur>();

    List<Historique> selectedHistoriques = new List<Historique>();

    List<Licencerbq> selectedLicencerbqs = new List<Licencerbq>();

    List<Produitservice> selectedProduitservices = new List<Produitservice>();

    List<Telephone> Telephones = new List<Telephone>();

    Fournisseur selectedFournisseur = new Fournisseur();
    
    List<IGrouping<GroupKey, Produitservice>> groupedServices;

    public class GroupKey
    {
        public string CodeCategorie { get; set; }
        public string Nature { get; set; }

        public override bool Equals(object obj)
        {
            if (obj is GroupKey other)
            {
                return CodeCategorie == other.CodeCategorie && Nature == other.Nature;
            }
            return false;
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(CodeCategorie, Nature);
        }
    }

    private Dictionary<string, List<Categorierbq>> GroupCategoriesByType()
    {
        var groupedCategories = new Dictionary<string, List<Categorierbq>>();

        foreach (var licence in selectedLicencerbqs)
        {
            foreach (var categorie in licence.CodeSousCategories)
            {
                if (!groupedCategories.ContainsKey(categorie.NomCategorie))
                {
                    groupedCategories[categorie.NomCategorie] = new List<Categorierbq>();
                }
                groupedCategories[categorie.NomCategorie].Add(categorie);
            }
        }

        return groupedCategories;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            selectedFournisseurs = await _context.Fournisseurs.Where(c => c.IdFournisseur == 1).ToListAsync();
            selectedContacts = await _context.Contacts.Where(c => c.IdFournisseur == 1).ToListAsync();
            selectedHistoriques = await _context.Historiques.Where(c => c.IdFournisseur == 1).ToListAsync();
            selectedFichiers = await _context.Fichiers.Where(c => c.IdFournisseur == 1).ToListAsync();
            selectedProduitservices = await _context.Produitservices.Where(p => p.IdFournisseurs.Any(f => f.IdFournisseur == 1)).ToListAsync();
            selectedFournisseur = selectedFournisseurs[0];
            //selectedLicencerbqs = await _context.Licencerbqs.Where(c => c.IdFournisseur == 1).ToListAsync();
            selectedLicencerbqs = await _context.Licencerbqs
        .Include(l => l.CodeSousCategories) // Assurez-vous que cette propriété existe
        .Where(c => c.IdFournisseur == 1)
        .ToListAsync();
        

        groupedServices = selectedProduitservices
    .GroupBy(p => new GroupKey 
    { 
        CodeCategorie = p.CodeCategorie, 
        Nature = p.Nature 
    })
    .ToList(); 



        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la récupération des personnes: {ex.Message}");
        }
    }

@*
    public class ProduitserviceComparer : IEqualityComparer<Produitservice>
    {
        public bool Equals(Produitservice x, Produitservice y)
        {
            if (x == null || y == null)
                return false;

            return x.CodeCategorie == y.CodeCategorie && x.Nature == y.Nature;
        }

        public int GetHashCode(Produitservice obj)
        {
            return (obj.CodeCategorie + obj.Nature).GetHashCode();
        }
    }*@
    private string GetFormatSizeFile(long size)
    {
        if (size >= 1048576)
        {
            return $"{(size / 1048576.0):F2} MB";
        }
        else
        {
            return $"{(size / 1024.0):F2} KB";
        }
    }
 
    private string GetFormatSize()
    {
        sizeTotal = selectedFichiers.Sum(file => (long)(file.Taille));
        if (sizeTotal >= 1048576) // 1 MB = 1048576 bytes (1 * 1024 * 1024)
        {
            return $"{(sizeTotal / 1048576.0):F2} MB / {MaxSize}MB";
        }
        else
        {
            return $"{(sizeTotal / 1024.0):F2} KB / {MaxSize}MB";
        }
    }
}