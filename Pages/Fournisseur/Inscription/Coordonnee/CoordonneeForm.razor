@using Portail_OptiVille.Data.FormModels
@using System.Linq.Expressions

<style>
    .valid {
        outline: 1px solid #26b050;
    }
</style>

<PageTitle>Étape 2 Coordonnées</PageTitle>
<EditForm EditContext="@EditContext">
    <DataAnnotationsValidator />
    <div class="card-header py-2 bg-bleuFonce">
        <h3 class="py-2 p-0 my-0 text-white titre-bold">Coordonnées de l'entreprise</h3>
    </div>
        <div class="card-body border-bleuFonce bg-blanc py-1">
            
            <div class="py-2 d-flex align-baseline">
                <div class="col-xl-4 col-lg-4 col-5 col-sm-5 ms-xl-3 ms-lg-3">
                    <label class="bleuFonce texte-bold" for="No">Numéro <i class="bi bi-braces-asterisk text-danger"></i></label>
                    <input type="text" @bind="FournisseurFormModel.NoEntreprise" maxlength="8" class="form-control @GetInputClass(() => FournisseurFormModel.NoEntreprise) input-bleu texte-light" id="No" />
                    @((MarkupString)GetValidationHTML(() => FournisseurFormModel.NoEntreprise))
                </div>
                <div class="col-xl-6 col-lg-6 col-7 col-sm-7 ms-2">
                    <label class="bleuFonce texte-bold" for="Rue">Rue <i class="bi bi-braces-asterisk text-danger"></i></label>
                    <input type="text" @bind="FournisseurFormModel.RueEntreprise" maxlength="64" class="form-control @GetInputClass(() => FournisseurFormModel.RueEntreprise) input-bleu texte-light" id="Rue" />
                    @((MarkupString)GetValidationHTML(() => FournisseurFormModel.RueEntreprise))
                </div>
            </div>
            <div class="col-xl-4 col-lg-4 col-6 col-sm-6 py-2 ms-xl-3 ms-lg-3">
                <label class="bleuFonce texte-bold" for="Bureau">Bureau <i class="bi bi-braces text-success"></i></label>
                <input type="text" @bind="FournisseurFormModel.BureauEntreprise" maxlength="8" class="form-control input-bleu texte-light" id="Bureau" />
            </div>
            
            <div class="col-xl-8 col-lg-8 col-12 col-sm-12 py-2 ms-xl-3 ms-lg-3">
                <label class="bleuFonce texte-bold" for="Ville">Ville <i class="bi bi-braces-asterisk text-danger"></i></label>
                <input type="text" @bind="FournisseurFormModel.VilleEntreprise" maxlength="8" class="form-control @GetInputClass(() => FournisseurFormModel.VilleEntreprise) input-bleu texte-light" id="Ville" />
                @((MarkupString)GetValidationHTML(() => FournisseurFormModel.VilleEntreprise))
            </div>
            <div class="col-xl-8 col-lg-8 col-12 col-sm-12 py-2 ms-xl-3 ms-lg-3">
                <label class="bleuFonce texte-bold" for="Province">Province <i class="bi bi-braces-asterisk text-danger"></i></label>
                <select class="form-control @GetInputClass(() => FournisseurFormModel.ProvinceEntreprise) form-select input-bleu texte-light" id="Province" @bind="FournisseurFormModel.ProvinceEntreprise">
                    <option value="" disabled selected>Veuillez choisir une province</option>
                    @foreach (string province in listeProvinces)
                    {
                        <option value="@province">@province</option>
                    }
                </select>
                 @((MarkupString)GetValidationHTML(() => FournisseurFormModel.ProvinceEntreprise))
            </div>
            <div class="col-xl-4 col-lg-4 col-12 col-sm-12 py-2 ms-xl-3 ms-lg-3">
                <label class="bleuFonce texte-bold" for="CodePostal">Code Postal <i class="bi bi-braces-asterisk text-danger"></i></label>
                <input type="text" @bind="FournisseurFormModel.CodePostalEntreprise" class="form-control @GetInputClass(() => FournisseurFormModel.CodePostalEntreprise) input-bleu texte-light" id="CodePostal" />
            </div>                    
            <div class="col-lg-8 col-xl-8 col-12 col-sm-12 py-2 ms-xl-3 ms-lg-3">
                <label class="bleuFonce texte-bold" for="RegionAdm">Région Admnistrative <i class="bi bi-braces-asterisk text-danger"></i></label>
                <select id="RegionAdm" @bind="FournisseurFormModel.RegionAdmEntreprise" class="form-control @GetInputClass(() => FournisseurFormModel.RegionAdmEntreprise) form-select input-bleu texte-light">
                    <option value="" disabled selected>Veuillez choisir une région administrative</option>
                    @foreach (string region in listeRegionADM)
                    {
                        <option value="@region">@region</option>
                    }
                </select>
                @((MarkupString)GetValidationHTML(() => FournisseurFormModel.RegionAdmEntreprise))
            </div>
            <div class="col-lg-8 col-xl-8 col-12 col-sm-12 py-2 ms-xl-3 ms-lg-3">
                <label class="bleuFonce texte-bold" for="SiteWeb">Site Internet <i class="bi bi-braces text-success"></i></label>
                <input type="text" @bind="FournisseurFormModel.SiteWebEntreprise" maxlength="64" class="form-control input-bleu texte-light" id="SiteWeb" />
            </div>
            @{
                var phoneNo = 1;
                foreach (var phone in FournisseurFormModel.PhoneList)
                {
                    <Telephone TelephoneNumber="@phoneNo" @ref="telephoneComponents[phone]" />        
                    phoneNo++;        
                }
            }
            <div class="d-flex justify-content-center py-2">
                <button type="button" class="btn bg-success text-white texte-bold me-2" @onclick="AddTelephone" style="width: 200px;"><i class="bi bi-plus-circle"></i> Ajout téléphone</button>
                <button type="button" class="btn bg-danger text-white texte-bold" @onclick="RemoveTelephone" disabled="@(!(FournisseurFormModel.PhoneList.Count > 1))" style="width: 200px;" ><i class="bi bi-trash"></i> Retirer téléphone</button>
            </div>
        </div>
</EditForm>

@code {
    [Parameter]
    public Action<CoordonneeForm>? AssignReference { get; set; }
    [Parameter]
    public FournisseurFormModel FournisseurFormModel { get; set; }
    private Dictionary<TelephoneFormModel, Telephone> telephoneComponents = new Dictionary<TelephoneFormModel, Telephone>();
    private EditContext EditContext { get; set; }
    private bool isSubmit = false;

    private List<string> listeProvinces = new List<string>{"Québec", "Ontario", "Manitoba", "Saskatchewan", "Alberta", "Colombie-Britanique",
        "Île-du-Prince-Édouard", "Nouveau-Brunswick", "Nouvelle-Écosse", "Terre-Neuve-et-Labrador", "Nunavut", "Territoires du Nord-Ouest",
        "Yukon"};
    private List<string> listeRegionADM = new List<string>{"(01) Bas-Saint-Laurent", "(02) Saguenay-Lac-Saint-Jean", "(03) Capitale-Nationale",
        "(04) Mauricie", "(05) Estrie", "(06) Montréal", "(07) Outaouais", "(08) Abitibi-Témiscamingue", "(09) Côte-Nord", "(10) Nord-du-Québec",
        "(11) Gaspésie-Îles-de-la-Madeleine", "(12) Chaudière-Appalaches", "(13) Laval", "(14) Lanaudière", "(15) Laurentides", "(16) Montérégie",
        "(17) Centre-du-Québec"};

    protected override void OnInitialized()
    {
        EditContext = new EditContext(FournisseurFormModel);
        EditContext.OnValidationStateChanged += (sender, args) => StateHasChanged();
        AssignReference?.Invoke(this);
        if (!FournisseurFormModel.PhoneList.Any()) {
            FournisseurFormModel.PhoneList.Add(new TelephoneFormModel());
        }
    }

    private string GetInputClass<TField> (Expression<Func<TField>> fieldExpression)
    {
        if (!isSubmit) {
           return "";
        }
        var fieldIdentifier = FieldIdentifier.Create(fieldExpression);
        var isValid = !EditContext.GetValidationMessages(fieldIdentifier).Any();
        return isValid ? "valid" : "invalid";
    }

    private string GetValidationHTML<TField> (Expression<Func<TField>> fieldExpression) 
    {
        if (!isSubmit) {
           return "";
        }
        var fieldIdentifier = FieldIdentifier.Create(fieldExpression);
        var isValid = !EditContext.GetValidationMessages(fieldIdentifier).Any();
        return isValid ? "<span class=\"input-group-text text-success\"><i class=\"bi bi-check-circle me-2\"></i><span class=\"texte-medium\">Valide</span></span>" 
                       : "<span class=\"input-group-text text-danger\"><i class=\"bi bi-x-circle me-2\"></i><span class=\"texte-medium\">" + EditContext.GetValidationMessages(fieldIdentifier).FirstOrDefault() + "</span></span>";  
    }

    public bool TriggerValidation() 
    {
        isSubmit = true;
        EditContext.Validate();
        StateHasChanged();
        return ValidateCoordonnee();
    }

    private void AddTelephone()
    {
        FournisseurFormModel.PhoneList.Add(new TelephoneFormModel());
    }

    private void RemoveTelephone()
    {
        if (FournisseurFormModel.PhoneList.Count > 1) {
            FournisseurFormModel.PhoneList.RemoveAt(FournisseurFormModel.PhoneList.Count - 1);
        }
    }

    public bool ValidateCoordonnee()
    {
        bool isValid = true;
        foreach (var component in telephoneComponents.Values) {
            var phoneState = component.TriggerValidation();
            if (!phoneState) {
                isValid = false;
            }
        }
        return isValid;
    }
}