@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions

<EditForm Model="@contactIdentification" OnValidSubmit="HandleValidSubmit">
    
        <h4 class="col-lg-12 col-xl-12 titre-bold">Contact @ContactNumber <i class="bi bi-braces-asterisk text-danger"></i></h4>
        
        <div class="d-flex justify-content-between">
            <div class="col-lg-6 col-xl-6 col-6 col-sm-6">
                <label class="bleuFonce texte-bold" for="Prenom">Prénom <i class="bi bi-braces-asterisk text-danger"></i></label>
                <InputText @oninput="ValidateInputs" @bind-Value="contactIdentification.prenomContact" class="form-control input-bleu texte-light" id="Prenom" />                                                                                                                                                                 
                @if (isSubmitted && !isPrenomValid)
                {
                    <span class="input-group-text text-danger">
                        <i class="bi bi-x-circle me-2"></i>
                        @if (string.IsNullOrEmpty(contactIdentification.prenomContact))
                        {
                            <span class="texte-medium">Prénom requis</span>
                        }
                        else if (contactIdentification.prenomContact.Length > 32)
                        {
                            <span class="texte-medium">Maximum 32 caractères</span>
                        }
                        else 
                        {
                            <span class="texte-medium">Prénom invalide</span>                                        
                        }
                    </span>
                }
                else if (isSubmitted && isPrenomValid)
                {
                    <span class="input-group-text text-success">
                        <i class="bi bi-check-circle me-2"></i>
                        <span class="texte-medium">Valide</span>
                    </span>
                }
            </div>

            <div class="col-lg-6 col-xl-6 col-6 col-sm-6 me-1 ms-1">
                <label class="bleuFonce texte-bold" for="Nom">Nom <i class="bi bi-braces-asterisk text-danger"></i></label>
                <InputText @oninput="ValidateInputs" @bind-Value="contactIdentification.nomContact" class="form-control input-bleu texte-light" id="Nom" />
                                                                                                                                                                                
                    @if (isSubmitted && !isNomValid)
                    {
                        <span class="input-group-text text-danger">
                            <i class="bi bi-x-circle me-2"></i>
                            @if (string.IsNullOrEmpty(contactIdentification.nomContact))
                            {
                                <span class="texte-medium">Nom requis</span>
                            }
                            else if (contactIdentification.nomContact.Length > 32)
                            {
                                <span class="texte-medium">Maximum 32 caractères</span>
                            }
                            else 
                            {
                                <span class="texte-medium">Nom invalide</span>                                        
                            }
                        </span>
                    }
                    else if (isSubmitted && isNomValid)
                    {
                        <span class="input-group-text text-success">
                            <i class="bi bi-check-circle me-2"></i>
                            <span class="texte-medium">Valide</span>
                        </span>
                    }
            </div>            
        </div>

            <div class="col-lg-6 col-xl-6 col-6 col-sm-6 py-2">
                <label class="bleuFonce texte-bold" for="Fonction1">Fonction <i class="bi bi-braces-asterisk text-danger"></i></label>
                <InputText @oninput="ValidateInputs" @bind-Value="contactIdentification.fonctionContact" class="form-control input-bleu texte-light" id="Fonction1" />                                                                                                                                                                                                                        
                                                                                                                                                                                
                    @if (isSubmitted && !isFonctionValid)
                    {
                        <span class="input-group-text text-danger">
                            <i class="bi bi-x-circle me-2"></i>
                            @if (string.IsNullOrEmpty(contactIdentification.fonctionContact))
                            {
                                <span class="texte-medium">Fonction requise</span>
                            }
                            else if (contactIdentification.fonctionContact.Length > 32)
                            {
                                <span class="texte-medium">Maximum 32 caractères</span>
                            }
                        </span>
                    }
                    else if (isSubmitted && isFonctionValid)
                    {
                        <span class="input-group-text text-success">
                            <i class="bi bi-check-circle me-2"></i>
                            <span class="texte-medium">Valide</span>
                        </span>
                    }
            </div>

        <div class="col-lg-12 col-xl-12 col-12 col-sm-12 py-2">
            <label class="bleuFonce texte-bold" for="Courriel">Courriel du contact <i class="bi bi-braces-asterisk text-danger"></i></label>
            <InputText @oninput="ValidateInputs" @bind-Value="contactIdentification.emailContact" class="form-control input-bleu texte-light" id="Courriel" />                                                                                                                                                                                                                                      
                    
                @if (isSubmitted && !isEmailValid)
                {
                    <span class="input-group-text text-danger">
                        <i class="bi bi-x-circle me-2"></i>
                        @if (string.IsNullOrEmpty(contactIdentification.emailContact))
                        {
                            <span class="texte-medium">Courriel requis</span>
                        }
                        else if (contactIdentification.emailContact.Length > 64)
                        {
                            <span class="texte-medium">Maximum 64 caractères.</span>
                        }
                        else
                        {
                            <span class="texte-medium">Courriel invalide</span>
                        }
                    </span>
                }
                else if (isSubmitted && isEmailValid)
                {
                    <span class="input-group-text text-success">
                        <i class="bi bi-check-circle me-2"></i>
                        <span class="texte-medium">Valide</span>
                    </span>
                } 
        </div>
        <div class="py-2 d-flex justify-content-between">
            <div class="col-lg-3 col-xl-3 col-3 col-sm-3">
                <label class="bleuFonce texte-bold" for="typeTel1">Type <i class="bi bi-braces-asterisk text-danger"></i></label>
                <InputSelect class="form-control input-bleu texte-light" id="typeTel1" @oninput="ValidateInputs" @bind-Value="contactIdentification.typeTelContact">
                    <option value="" disabled selected>Veuillez choisir un type</option>
                        @foreach(string type in listeTypeContact)
                        {
                            <option value="@type">@type</option>
                        }
                </InputSelect>
                                                                                                                                                                                                                                                
                    @if (isSubmitted && !isTypeValid)
                    {
                        <span class="input-group-text text-danger">
                            <i class="bi bi-x-circle me-2"></i>
                            <span class="texte-medium">Type requis</span>
                        </span>
                    }
                    else if (isSubmitted && isTypeValid)
                    {
                        <span class="input-group-text text-success">
                            <i class="bi bi-check-circle me-2"></i>
                            <span class="texte-medium">Valide</span>
                        </span>
                    }
            </div>
            <div class="col-lg-6 col-xl-6 col-6 col-sm-6 ms-1 me-1">
                <label class="bleuFonce texte-bold" for="NoTel1">Numéro <i class="bi bi-braces-asterisk text-danger"></i></label>
                <InputNumber TValue="long?" @oninput="ValidateInputs" @bind-Value="contactIdentification.noTelContact" class="form-control input-bleu texte-light" id="NoTel1" />                                                                                                                    
                @if (isSubmitted && !isTelValid)
                {
                    <span class="input-group-text text-danger">
                        <i class="bi bi-x-circle me-2"></i>
                        @if (!contactIdentification.noTelContact.HasValue)
                        {
                            <span class="texte-medium">Téléphone requis</span>
                        }
                        else if (contactIdentification.noTelContact.HasValue && !Regex.IsMatch(contactIdentification.noTelContact.Value.ToString(), @"^\d{10}$"))
                        {
                            <span class="texte-medium">Mauvais format</span>
                        }
                    </span>
                }
                else if (isSubmitted && isTelValid)
                {
                    <span class="input-group-text text-success">
                        <i class="bi bi-check-circle me-2"></i>
                        <span class="texte-medium">Valide</span>
                    </span>
                }
            </div>
            <div class="col-lg-3 col-xl-3 col-3 col-sm-3">
                <label class="bleuFonce texte-bold" for="Poste1Contact">Poste <i class="bi bi-braces text-success"></i></label>
                <InputNumber TValue="long?" @oninput="ValidateInputs" @bind-Value="contactIdentification.posteTelContact" class="form-control input-bleu texte-light" id="Poste1Contact" />
                @if (isSubmitted && !isPosteValid && contactIdentification.posteTelContact.HasValue)
                {
                    <span class="input-group-text text-danger">
                        <i class="bi bi-x-circle me-2"></i>
                        <span class="texte-medium">Doit contenir 6 numéros</span>                                    
                    </span>
                }
                else if (isSubmitted && isPosteValid && contactIdentification.posteTelContact.HasValue)
                {
                    <span class="input-group-text text-success">
                        <i class="bi bi-check-circle me-2"></i>
                        <span class="texte-medium">Valide</span>
                    </span>
                }
            </div>
        </div>
        <div>
            <button type="submit" class="btn bg-bleu text-white texte-bold w-100" @onclick="SubmitForm">Valider le contact</button>
        </div>
    
    <DataAnnotationsValidator />
</EditForm>

@code {
    [Parameter]
    public int ContactNumber { get; set; } = 1;
    private ContactIdentification contactIdentification = new ContactIdentification();
    private List<string> listeTypeContact = new List<string>{"Bureau", "Télécopieur", "Cellulaire"};
    private bool isPrenomValid = true;
    private bool isSubmitted = false;
    private bool isNomValid = true;
    private bool isFonctionValid = true;
    private bool isEmailValid = true;
    private bool isTypeValid = true;
    private bool isTelValid = true;
    private bool isPosteValid = true;

    public void HandleValidSubmit()
    {
        Console.WriteLine($"Child form #{ContactNumber} is valid");
    }

    private void SubmitForm()
    {
        isSubmitted = true;      
        ValidateInputs();
    }

    private bool EmailValidator(string email)
    {
        return Regex.IsMatch(email, @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$") && email.Length <= 64 && !string.IsNullOrEmpty(email);
    }

    private void ValidateInputs() {
        if (string.IsNullOrEmpty(contactIdentification.prenomContact))
        {
            isPrenomValid = false;
        }
        else if (!string.IsNullOrEmpty(contactIdentification.prenomContact))
        {
            if(contactIdentification.prenomContact.Length > 32)
            {
                isPrenomValid = false;  
            }
            else if (!System.Text.RegularExpressions.Regex.IsMatch(contactIdentification.prenomContact, "^[a-zA-Z'-]+$"))
            {
                isPrenomValid = false;
            }
            else 
            {
                isPrenomValid = true;
            }
        }    
        else
        {
            isPrenomValid = true;
        }

        if (string.IsNullOrEmpty(contactIdentification.nomContact))
        {
            isNomValid = false;
        }
        else if (!string.IsNullOrEmpty(contactIdentification.nomContact))
        {
            if(contactIdentification.nomContact.Length > 32)
            {
                isNomValid = false;  
            }
            else if (!System.Text.RegularExpressions.Regex.IsMatch(contactIdentification.nomContact, "^[a-zA-Z'-]+$"))
            {
                isNomValid = false;
            }
            else 
            {
                isNomValid = true;
            }
        }    
        else
        {
            isNomValid = true;
        }

        if (string.IsNullOrEmpty(contactIdentification.fonctionContact))
        {
            isFonctionValid = false;
        }
        else if (!string.IsNullOrEmpty(contactIdentification.fonctionContact))
        {
            if(contactIdentification.fonctionContact.Length > 32)
            {
                isFonctionValid = false;  
            }
            else 
            {
                isFonctionValid = true;
            }
        }    
        else
        {
            isFonctionValid = true;
        }

        if (!string.IsNullOrEmpty(contactIdentification.emailContact) && contactIdentification.emailContact.Length <= 64 && EmailValidator(contactIdentification.emailContact))
        {
            isEmailValid = true;
        }
        else
        {
            isEmailValid = false;
        }

        if (!string.IsNullOrEmpty(contactIdentification.typeTelContact))
        {
            isTypeValid = true;
        }
        else
        {
            isTypeValid = false;
        }

        if (!contactIdentification.noTelContact.HasValue)        
        {
            isTelValid = false;  
        }
        else if (contactIdentification.noTelContact.HasValue && !Regex.IsMatch(contactIdentification.noTelContact.Value.ToString(), @"^\d{10}$"))
        {
            isTelValid = false;
        }
        else
        {
            isTelValid = true;  
        }

        if (!contactIdentification.posteTelContact.HasValue)        
        {
            isPosteValid = false;  
        }
        else if (!(contactIdentification.posteTelContact >= 000000 && contactIdentification.posteTelContact <= 999999))
        {
            isPosteValid = false;  
        }
        else
        {
            isPosteValid = true;  
        }
        StateHasChanged();
    }

    public class ContactIdentification
    {
        #region contact
        [Required]
        public string? prenomContact { get; set; }

        [Required]
        public string? nomContact { get; set; }

        [Required]
        public string? fonctionContact { get; set; }

        [Required]
        public string? emailContact { get; set; }

        [Required]
        public string? typeTelContact { get; set; }

        [Required]
        public long? noTelContact { get; set; }

        public long? posteTelContact { get; set; }
        #endregion
    }
}