@page "/modele"
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@inject List<Portail_OptiVille.Data.Utilities.Modele> listModele
@inject IJSRuntime JSRuntime
@*@inject Portail_OptiVille.Data.Utilities.Modele modeleClass*@
@inject IHostEnvironment hostEnvironment // Inject IHostEnvironment to access the web root path
<head>
    <!-- Other head content -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js"></script>
</head>

<div class="card">
    <div class="card-header">
        <h3>Configuration Settings</h3>
    </div>
    <div class="card-body">
            <div class="mb-2">
                <p><strong></strong></p>
                <div class="form-group">
                    <label for="exampleFormControlSelect1"><strong>Choix du modèle</strong></label>
                    <select @onchange="OnModeleChanged" class="custom-select form-control" id="exampleFormControlSelect1">
                        @if (selectedId == 0)
                            {
                                <option selected hidden>Choisir un modèle</option>
                            }
                        @foreach(var modele in listModele)
                        {
                            <option value="@modele.Id">@modele.Nom</option>
                        }
                    </select>
                </div>
                @if(selectedNom == null && selectedObjet == null && selectedMessage == null)
                {

                }
                else
                {
                <p><strong>Objet</strong></p>
                <InputText @bind-Value="selectedObjet" type="text" class="form-control" readonly="@(!isEditing)" />

                <p><strong>Message</strong></p>
                <InputTextArea @bind-Value="selectedMessage" type="text-area" class="form-control" rows="6" style="resize: none;" readonly="@(!isEditing)" />
                
                }
            </div>
        
        <div class="mt-3">
            @if(!isCreating)
            {
                <button class="btn btn-info me-1" data-bs-toggle="modal" data-bs-target="#exampleModalCenter" @onclick="() => CreateModele(true)">Ajouter</button>
            }
                <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                    <div class="modal-header justify-content-center">
                        <h5 class="modal-title" id="exampleModalLongTitle">Ajout d'un nouveau modèle</h5>
                    </div>
                        <EditForm Model="AjouteModel" OnValidSubmit="SaveCreateModele">
                            <DataAnnotationsValidator/>
                    <div class="modal-body">
                            <div class="form-group">
                                <label for="AjoutNom">Nom:</label>
                                <InputText @bind-Value="AjouteModel.NomNewModele" id="AjoutNom" type="text" class="form-control"/>
                                <ValidationMessage For="@(() => AjouteModel.NomNewModele)" />
                            </div>
                            <div class="form-group">
                                <label for="AjoutObjet">Objet:</label>
                                <InputText @bind-Value="AjouteModel.ObjetNewModele" id="AjoutObjet" type="text" class="form-control" />
                                <ValidationMessage For="@(() => AjouteModel.ObjetNewModele)" />
                            </div>
                            <div class="form-group">
                                <label for="AjoutMessage">Message:</label>
                                <InputTextArea @bind-Value="AjouteModel.MessageNewModele" id="AjoutMessage" type="text-area" class="form-control" rows="6" style="resize: none;" />
                                <ValidationMessage For="@(() => AjouteModel.MessageNewModele)" />
                            </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => CreateModele(false)">Annuler</button>
                        <button type="submit" class="btn btn-primary" >Sauvegarder</button>
                    </div>
                    </EditForm>
                    </div>
                </div>
                </div>

            @if (!isEditing)
            {
                if(selectedId != 0)
                {
                <button class="btn btn-primary" @onclick="EditConfig">Modifier</button>
                }
            }
            else
            {
                <button class="btn btn-success" @onclick="SaveConfig">Sauvegarder</button>
                <button class="btn btn-primary" @onclick="DeleteConfig">Supprimer</button>
            }
        </div>

        @if (saveSuccess)
        {
            <div class="alert alert-success mt-3">La configuration à été sauvegardée!</div>
        }
    </div>
</div>
@code {
    private bool isEditing = false;
    private bool saveSuccess = false;
    private bool isCreating = false;
    private string? selectedNom;
    private string? selectedObjet;
    private string? selectedMessage;
    private int selectedId =0;

    private ModeleAjouteModel AjouteModel = new ModeleAjouteModel();
    private class ModeleAjouteModel
    {
        [Required(ErrorMessage = "Veuillez mettre un nom à ce modèle")]
        public string? NomNewModele { get; set; }
        [Required(ErrorMessage = "Veuillez mettre un objet au modèle")]
        public string? ObjetNewModele { get; set; }
        [Required(ErrorMessage = "Veuillez mettre un message")]
        public string? MessageNewModele { get; set; }
    }

    private void CreateModele(bool save)
    {
        if(save)
        {
        isCreating = true;
        }
        else
        {
        isCreating = false;
        }
    }
    private void EditConfig()
    {
        isEditing = true;
        saveSuccess = false; 
    }

    private void OnModeleChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out selectedId))
        {
            GetDataList(selectedId);
        }
    }
    private void GetDataList(int id)
    {
        var index = listModele.FindIndex(modele => modele.Id == id);
        selectedNom = listModele[index].Nom;
        selectedObjet = listModele[index].Objet;
        selectedMessage = listModele[index].Message;
    }

    private async Task SaveCreateModele()
    {
        isCreating = false;
        var newModele = new Portail_OptiVille.Data.Utilities.Modele(listModele.Count+1,AjouteModel.NomNewModele,AjouteModel.ObjetNewModele,AjouteModel.MessageNewModele);
        listModele.Add(newModele);
        await SaveOnJson(); 
    }

    private async Task DeleteConfig()
    {
        isCreating = false;
        var index = listModele.FindIndex(modele => modele.Id == selectedId);
        listModele.RemoveAt(index);
        await SaveOnJson(); 
    }

    private async Task SaveOnJson()
    {
        var filePath = Path.Combine(hostEnvironment.ContentRootPath, "wwwroot", "Modele.json");
        var json = JsonSerializer.Serialize(listModele, new JsonSerializerOptions { WriteIndented = true });

        await File.WriteAllTextAsync(filePath, json);

        saveSuccess = true; 
        isEditing = false; 
        await Task.Delay(4000); 
        saveSuccess = false; 
    }
    private async Task SaveConfig()
    {
        listModele[selectedId-1].Nom = selectedNom!;
        listModele[selectedId-1].Objet = selectedObjet!;
        listModele[selectedId-1].Message = selectedMessage!;
        await SaveOnJson();
    }
}