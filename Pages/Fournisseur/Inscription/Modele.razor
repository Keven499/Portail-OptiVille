@page "/modele"
@using System.Text.Json
@inject List<Portail_OptiVille.Data.Utilities.Modele> listModele
@inject IHostEnvironment hostEnvironment // Inject IHostEnvironment to access the web root path
<div class="card">
    <div class="card-header">
        <h3>Configuration Settings</h3>
    </div>
    <div class="card-body">
        @foreach(var modele in listModele){
            <div class="mb-2">
                <p><strong>@modele.Id</strong></p>
                <p><strong>Nom</strong></p>
                <InputText @bind-Value="modele.Nom" type="text" class="form-control" 
                        readonly="@(!isEditing)" />

                <p><strong>Objet</strong></p>
                <InputText @bind-Value="modele.Objet" type="text" class="form-control" 
                            readonly="@(!isEditing)" />

                <p><strong>Message</strong></p>
                <InputText @bind-Value="modele.Message" type="text-area" class="form-control" 
                        readonly="@(!isEditing)" />
            </div>
        }
        <div class="mt-3">
            @if (!isEditing)
            {
                <button class="btn btn-primary" @onclick="EditConfig">Modifier</button>
            }
            else
            {
                <button class="btn btn-success" @onclick="SaveConfig">Sauvegarder</button>
            }
        </div>

        @if (saveSuccess)
        {
            <div class="alert alert-success mt-3">Configuration saved successfully!</div>
        }
    </div>
</div>
@code {
    private bool isEditing = false;
    private bool saveSuccess = false;

    private void EditConfig()
    {
        isEditing = true;
        saveSuccess = false; 
    }

    private async Task SaveConfig()
    {
        var filePath = Path.Combine(hostEnvironment.ContentRootPath, "wwwroot", "Modele.json");
        var json = JsonSerializer.Serialize(listModele, new JsonSerializerOptions { WriteIndented = true });

        await File.WriteAllTextAsync(filePath, json);

        saveSuccess = true; 
        isEditing = false; 
        await Task.Delay(4000); 
        saveSuccess = false; 
    }
}