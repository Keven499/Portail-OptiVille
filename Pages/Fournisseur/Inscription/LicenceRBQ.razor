@using Portail_OptiVille.Data.FormModels
@using Microsoft.EntityFrameworkCore
@using Portail_OptiVille.Data.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@inject A2024420517riGr1Eq6Context _context
@inject IJSRuntime JS
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using System.Linq.Expressions
@inject LicenceService licenceService

<PageTitle>Étape 5 Licence RBQ</PageTitle>
<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />
    <div class="card-header py-2 bg-bleuFonce">
        <h3 class="py-2 p-0 my-0 text-white titre-bold">Licence RBQ</h3>
    </div>
    <div class="card-body border-bleuFonce py-1">
        <div class="col-xl-4 col-lg-4 col-6 col-sm-6 py-2 ms-xl-3 ms-lg-3">
            <label class="bleuFonce texte-bold" for="noLicenceRBQ">Numéro<i class="bi bi-braces text-success ms-1"></i> </label>
            <input type="text" id="noLicenceRBQ" placeholder="0000-0000-00 ou 0000000000" class="form-control @GetInputClass(() => LicenceRBQFormModel.NumeroLicence) input-bleu texte-light" @bind="LicenceRBQFormModel.NumeroLicence" />
            @((MarkupString)GetValidationHTML(() => LicenceRBQFormModel.NumeroLicence))
        </div>
        <div class="row">
            <div class="col-xl-5 col-lg-5 col-6 col-sm-6 py-2 ms-xl-3 ms-lg-3">
                <label class="bleuFonce texte-bold" for="statut">Statut<i class="bi bi-braces-asterisk text-danger ms-1"></i></label>
                <select class="form-select @GetInputClass(() => LicenceRBQFormModel.StatutLicence) input-bleu texte-light" id="statut" @bind="LicenceRBQFormModel.StatutLicence">
                    <option value="" disabled selected>Veuillez choisir un statut</option>
                    <option value="1">Valide</option>
                    <option value="2">Valide avec restriction</option>
                    <option value="3">Non valide</option>
                </select>         
                @((MarkupString)GetValidationHTML(() => LicenceRBQFormModel.StatutLicence))                               
            </div>
            <div class="col-xl-5 col-lg-5 col-6 col-sm-6 py-2">
                <label class="bleuFonce texte-bold" for="licenceType">Type<i class="bi bi-braces-asterisk text-danger ms-1"></i></label>
                <select class="form-select @GetInputClass(() => LicenceRBQFormModel.TypeLicence) input-bleu texte-light" id="licenceType" @bind="LicenceRBQFormModel.TypeLicence">
                     <option value="" disabled selected>Veuillez choisir un type</option>
                    <option value="1">Entrepreneur</option>
                    <option value="2">Constructeur-Propriétaire</option>
                </select>
                @((MarkupString)GetValidationHTML(() => LicenceRBQFormModel.TypeLicence))        
            </div>                    
        </div>
        <div class="col-xl-10 col-lg-10 col-12 col-sm-12 py-2 ms-xl-3 ms-lg-3">
            <label class="texte-bold">Entrepeneur général<i class="bi bi-braces-asterisk text-danger ms-1"></i></label>               
            <div class="@GetInputClass(() => LicenceRBQFormModel.SousCategoSelected) overflow-auto box-bleu card">
            @{
                int i = 0;
                foreach (var categorie in categorieGeneral)
                {
                    <div class="row m-0">
                        <div class="col-auto p-0">
                            <label for="categorie@(i)">
                                <input type="checkbox" id="categorie@(i)"
                                    checked="@LicenceRBQFormModel.SousCategoSelected[categorie.CodeSousCategorie]"
                                    @onchange="(e) => OnCheckboxChange(categorie.CodeSousCategorie, e)" />
                                <span class="check-blanc"></span>
                                <span class="texte-14bold">@categorie.CodeSousCategorie - @categorie.Nom</span>
                            </label>
                        </div>
                    </div>
                    i++;
                }
            }
            </div>
        </div>    
        <div class="col-xl-10 col-lg-10 col-12 col-sm-12 py-2 ms-xl-3 ms-lg-3">
            <label class="texte-bold">Entrepeneur spécialisé</label>
            <div class="@GetInputClass(() => LicenceRBQFormModel.SousCategoSelected) overflow-auto box-bleu card">
            @foreach (var categorie in categorieSpecialise)
            {
                <div class="row m-0">
                    <div class="col-auto p-0">
                        <label>
                            <input type="checkbox" id="categorie@(i)"
                                checked="@LicenceRBQFormModel.SousCategoSelected[categorie.CodeSousCategorie]"
                                @onchange="(e) => OnCheckboxChange(categorie.CodeSousCategorie, e)" />
                            <span class="check-blanc"></span>
                            <span class="texte-14bold">@categorie.CodeSousCategorie - @categorie.Nom</span>
                        </label>
                    </div>
                    
                </div>
                i++;
            }
            </div>
            @((MarkupString)GetValidationHTML(() => LicenceRBQFormModel.SousCategoSelected))
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public Action<LicenceRBQ>? AssignReference { get; set; }
    [Parameter]
    public List<Categorierbq> AllCategories { get; set; }
    [Parameter]
    public LicenceRBQFormModel LicenceRBQFormModel { get; set; }
    private EditContext editContext;
    ValidationMessageStore validationMessageStore;
    private List<Categorierbq> categorieGeneral = new List<Categorierbq>();
    private List<Categorierbq> categorieSpecialise = new List<Categorierbq>();
    public string? noLicenceRBQ { get; set; }
    private bool isSubmit = false;
    private string? tempoNoLicence;

    private Dictionary<int, string> statutLicenceText = new Dictionary<int, string>
    {
        { 1, "Valide" },
        { 2, "Valide avec restriction" },
        { 3, "Non valide" }
    };

    private Dictionary<int, string> typeLicenceText = new Dictionary<int, string>
    {
        { 1, "Entrepreneur" },
        { 2, "Constructeur-Propriétaire" }
    };

    protected override void OnInitialized()
    {
        editContext = new EditContext(LicenceRBQFormModel);
        editContext.OnValidationStateChanged += (sender, args) => StateHasChanged();
        validationMessageStore = new ValidationMessageStore(editContext);
        AssignReference?.Invoke(this);

        try
        {
            categorieGeneral = AllCategories
            .Where(c => c.NomCategorie == "Général")
            .ToList();

            categorieSpecialise = AllCategories
            .Where(c => c.NomCategorie == "Spécialisé")
            .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la récupération des personnes: {ex.Message}");
        }
    }

    private string GetInputClass<TField> (Expression<Func<TField>> fieldExpression)
    {
        if (!isSubmit) {
           return "";
        }
        var fieldIdentifier = FieldIdentifier.Create(fieldExpression);
        var isValid = !editContext.GetValidationMessages(fieldIdentifier).Any();

        // THERE'S PROBABLY A BETTER WAY TO DO THIS.
        if (fieldIdentifier.FieldName.Equals("NumeroLicence")) {
            return isValid ? "" : "invalid";
        }

        return isValid ? "valid" : "invalid";
    }

    private string GetValidationHTML<TField> (Expression<Func<TField>> fieldExpression) 
    {
        if (!isSubmit) {
           return "";
        }
        var fieldIdentifier = FieldIdentifier.Create(fieldExpression);
        var isValid = !editContext.GetValidationMessages(fieldIdentifier).Any();

        // THERE'S PROBABLY A BETTER WAY TO DO THIS.
        if (fieldIdentifier.FieldName.Equals("NumeroLicence")) {
            return isValid ? "" : "<span class=\"input-group-text text-danger\"><i class=\"bi bi-x-circle me-2\"></i><span class=\"texte-validation\">" + editContext.GetValidationMessages(fieldIdentifier).FirstOrDefault() + "</span></span>";
        }

        return isValid ? "<span class=\"input-group-text text-success\"><i class=\"bi bi-check-circle me-2\"></i><span class=\"texte-validation\">Valide</span></span>" 
                       : "<span class=\"input-group-text text-danger\"><i class=\"bi bi-x-circle me-2\"></i><span class=\"texte-validation\">" + editContext.GetValidationMessages(fieldIdentifier).FirstOrDefault() + "</span></span>";  
    }

    public async Task<bool> TriggerValidation() 
    {
        validationMessageStore.Clear();
        isSubmit = true;
        if (!string.IsNullOrEmpty(LicenceRBQFormModel.NumeroLicence)) {
            bool isValid = await licenceService.ValidateNumeroDeLicenceAsync(InsertHyphens(LicenceRBQFormModel.NumeroLicence));
            if (!isValid)
            {
                validationMessageStore.Add(() => LicenceRBQFormModel.NumeroLicence, "Aucune correspondance");
                editContext.NotifyValidationStateChanged();
            }
        }
        StateHasChanged();
        return editContext.Validate();
    }

    private void OnCheckboxChange(string codeSousCategorie, ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            LicenceRBQFormModel.SousCategoSelected[codeSousCategorie] = (bool)e.Value;
        }
    }

    private bool ValidateSelection()
    {
        if (LicenceRBQFormModel == null || LicenceRBQFormModel.SousCategoSelected == null)
        {
            return false;
        }
        return LicenceRBQFormModel.SousCategoSelected.Values.Any(isSelected => isSelected);
    }

    static string InsertHyphens(string input)
    {
        if (input.Length == 10)
        {
            return input.Substring(0, 4) + "-" + input.Substring(4, 4) + "-" + input.Substring(8, 2);
        }
        return input;
    }
}