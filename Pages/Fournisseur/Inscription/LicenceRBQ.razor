@page "/rbq"
@using Microsoft.EntityFrameworkCore
@using Portail_OptiVille.Data.Models
@inject A2024420517riGr1Eq6Context _context
<PageTitle>LicenceRBQComponent</PageTitle>

<style>
    .overflow-auto {
        height: 192px;
    }

    .error {
        color: red;
    }
</style>

<EditForm Model="@this" OnValidSubmit="HandleValidSubmit">
    <label for="noLicenceRBQ">Numéro</label>
        <InputText type="text" id="noLicenceRBQ" @bind-Value="noLicenceRBQ"></InputText>
        @{
        if (numError) {
            <div class="error">Numéro de licence requis</div>
        }
    }
    <br>
    <label for="statut">Statut</label>
        <select id="statut" @bind="statutLicence">
            <option value="1">Valide</option>
            <option value="2">Valide avec restriction</option>
            <option value="3">Non valide</option>
        </select>
    <br>
    <label for="licenceType">Type de licence</label>
        <select id="licenceType" @bind="typeLicence">
            <option value="1">Entrepreneur</option>
            <option value="2">Constructeur-Propriétaire</option>
        </select>
    <br>
    <strong>Entrepeneur général</strong>
    <div class="overflow-auto">
    @{
        int i = 0;
        foreach (var categorie in categorieGeneral)
        {
            <input type="checkbox" 
                id="categorie@(i)" 
                checked="@sousCategoSelected[categorie.CodeSousCategorie]" 
                @onchange="(e) => OnCheckboxChange(categorie.CodeSousCategorie, e)" />
            <label for="categorie@(i)">@categorie.CodeSousCategorie @categorie.Nom</label>
            i++;
            <br>
        }
    }
    </div>
    <strong>Entrepeneur spécialisé</strong>
    <div class="overflow-auto">
        @foreach (var categorie in categorieSpecialise) {
            <input type="checkbox" 
                id="categorie@(i)" 
                checked="@sousCategoSelected[categorie.CodeSousCategorie]" 
                @onchange="(e) => OnCheckboxChange(categorie.CodeSousCategorie, e)" />
            <label for="categorie@(i)">@categorie.CodeSousCategorie @categorie.Nom</label>
            i++;
            <br>
        }
    </div>
    @{
        if (sousCategoError) {
            <div class="error">Au moins une catégorie doit être sélectionné</div>
        }
    }
    <button type="submit">Soumettre</button>
</EditForm>

@code {
    private List<Categorie> categorieGeneral = new List<Categorie>();
    private List<Categorie> categorieSpecialise = new List<Categorie>();
    private List<Categorie> allCategories = new List<Categorie>();
    private Dictionary<string, bool> sousCategoSelected = new Dictionary<string, bool>();
    public string? noLicenceRBQ { get; set; }
    private int statutLicence = 1;
    private int typeLicence = 1;
    private bool numError = false;
    private bool sousCategoError = false;

    private Dictionary<int, string> statutLicenceText = new Dictionary<int, string>
    {
        { 1, "Valide" },
        { 2, "Valide avec restriction" },
        { 3, "Non valide" }
    };

    private Dictionary<int, string> typeLicenceText = new Dictionary<int, string>
    {
        { 1, "Entrepreneur" },
        { 2, "Constructeur-Propriétaire" }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            allCategories = await _context.Categories.ToListAsync();
            sousCategoSelected = allCategories.ToDictionary(
                c => c.CodeSousCategorie,
                c => false
            );
             categorieGeneral = allCategories
                .Where(c => c.NomCategorie == "Général")
                .ToList();

            categorieSpecialise = allCategories
                .Where(c => c.NomCategorie == "Spécialisé")
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la récupération des personnes: {ex.Message}");
        }
    }

    private List<Categorie> GetSelectedCategories()
    {
        return allCategories
            .Where(c => sousCategoSelected[c.CodeSousCategorie])
            .ToList();
    }

    private void OnCheckboxChange(string codeSousCategorie, ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            sousCategoSelected[codeSousCategorie] = isChecked;
        }
    }

    private bool ValidateSelection()
    {
        return sousCategoSelected.Values.Any(isSelected => isSelected);
    }
    
    public void HandleValidSubmit()
    {
        if (!ValidateSelection())
        {
           sousCategoError = true;
        }
        else {
            sousCategoError = false;
        }
        if (string.IsNullOrEmpty(noLicenceRBQ)) {
            numError = true;
        }
        else {
            numError = false;
        }
        if (!numError && !sousCategoError) {
            Console.WriteLine(noLicenceRBQ);
            Console.WriteLine(@statutLicenceText[statutLicence]);
            Console.WriteLine(@typeLicenceText[typeLicence]);
            var selectedSousCatego = GetSelectedCategories();
            foreach (var category in selectedSousCatego)
            {
                Console.WriteLine($"Selected: {category.CodeSousCategorie} - {category.Nom}");
            }
        }
    }
}