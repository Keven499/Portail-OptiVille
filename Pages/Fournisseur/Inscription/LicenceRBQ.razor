@using Portail_OptiVille.Data.FormModels
@using Microsoft.EntityFrameworkCore
@using Portail_OptiVille.Data.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@inject A2024420517riGr1Eq6Context _context
@inject IJSRuntime JS
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject HttpClient Http

<PageTitle>LicenceRBQComponent</PageTitle>
<EditForm Model="@this" OnValidSubmit="HandleValidSubmit">
    <div class="card w-80 h-80 d-flex justify-content-center p-0 m-0">
        <div class="card-header py-2 bg-bleuFonce">
            <h3 class="py-2 p-0 my-0 text-white titre-bold">Licence RBQ</h3>
        </div>
        <div class="card-body border-bleuFonce py-1">
            <div class="col-xl-3 col-lg-3 col-6 col-sm-6 py-2">
                <label class="bleuFonce texte-bold" for="noLicenceRBQ">Numéro<i class="bi bi-braces-asterisk text-danger ms-1"></i></label>
                <input type="text" id="noLicenceRBQ" class="@validityCSS input-bleu texte-light" @bind="LicenceRBQFormModel.NumeroLicence" />
                @if (numErrorBool) {
                    <span class="input-group-text text-danger">
                        <i class="bi bi-x-circle me-2"></i>
                        <div class="validation-message texte-medium">@numErrorMessage</div>
                    </span>
                }
                @if (numGoodBool) {
                    <span class="input-group-text text-success">
                        <i class="bi bi-check-circle me-2"></i>
                        <span class="texte-medium">Valide</span>
                    </span>
                }
            </div>
            <div class="row">
                <div class="col-xl-6 col-lg-6 py-2">
                    <label class="bleuFonce texte-bold" for="statut">Statut<i class="bi bi-braces text-success"></i></label>
                    <select class="form-select input-bleu texte-light" id="statut" @bind="LicenceRBQFormModel.StatutLicence">
                        <option value="1">Valide</option>
                        <option value="2">Valide avec restriction</option>
                        <option value="3">Non valide</option>
                    </select>                                        
                </div>
                <div class="col-xl-6 col-lg-6 py-2">
                    <label class="bleuFonce texte-bold" for="licenceType"><i class="bi bi-braces text-success me-1"></i> Type de licence</label>
                    <select class="form-select input-bleu texte-light" id="licenceType" @bind="LicenceRBQFormModel.TypeLicence">
                        <option value="1">Entrepreneur</option>
                        <option value="2">Constructeur-Propriétaire</option>
                    </select>
                </div>                    
            </div>
            <div class="col-xl-12 col-lg-12 py-2">
                <label class="texte-bold"><i class="bi bi-braces-asterisk text-danger me-1"></i> Entrepeneur général</label>               
                <div class="overflow-auto box-bleu card @validityCategoSelect">
                @{
                    int i = 0;
                    foreach (var categorie in categorieGeneral)
                    {
                        <div class="row m-0">
                            <div class="col-auto p-0">
                                <label for="categorie@(i)">
                                    <input type="checkbox" id="categorie@(i)"
                                        checked="@LicenceRBQFormModel.SousCategoSelected[categorie.CodeSousCategorie]"
                                        @onchange="(e) => OnCheckboxChange(categorie.CodeSousCategorie, e)" />
                                    <span class="check-blanc"></span>
                                    <span class="texte-14bold">@categorie.CodeSousCategorie - @categorie.Nom</span>
                                </label>
                            </div>
                        </div>
                        i++;
                    }
                }
                </div>
            </div>    
            <div class="col-xl-12 col-lg-12 py-2">
                <label class="texte-bold"><i class="bi bi-braces-asterisk text-danger me-1"></i> Entrepeneur spécialisé</label>
                <div class="overflow-auto box-bleu card @validityCategoSelect">
                @foreach (var categorie in categorieSpecialise)
                {
                    <div class="row m-0">
                        <div class="col-auto p-0">
                            <label>
                                <input type="checkbox" id="categorie@(i)"
                                    checked="@LicenceRBQFormModel.SousCategoSelected[categorie.CodeSousCategorie]"
                                    @onchange="(e) => OnCheckboxChange(categorie.CodeSousCategorie, e)" />
                                <span class="check-blanc"></span>
                                <span class="texte-14bold">@categorie.CodeSousCategorie - @categorie.Nom</span>
                            </label>
                        </div>
                        
                    </div>
                    i++;
                }
                </div>
                @if (sousCategoError)
                {
                    <span class="input-group-text text-danger">
                        <i class="bi bi-x-circle me-2"></i>
                        <div class="validation-message texte-medium">Sélectionnez au moins une catégorie</div>
                    </span>
                }
            </div>
        </div>
        <div class="card-footer bg-bleuFonce">
            <!-- JE SUIS EN TRAIN DE METTRE EN PLACE LA STRUCTURE DES FORMULAIRES ET LA LOGIQUE, NE PAS TOUCHEZ S'IL VOUS PLAÎT
            <div class="d-flex justify-content-center">
                <button type="submit" class="btn bg-bleu text-white texte-bold" style="width: 200px;">Suivant 
                    <i class="bi bi-arrow-right-circle"></i>
                </button>
            </div>
            -->
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public LicenceRBQFormModel LicenceRBQFormModel { get; set; }
    [Parameter]
    public List<Categorierbq> AllCategories { get; set; }
    private List<Categorierbq> categorieGeneral = new List<Categorierbq>();
    private List<Categorierbq> categorieSpecialise = new List<Categorierbq>();
    private Dictionary<string, bool> sousCategoSelected = new Dictionary<string, bool>();
    public string? noLicenceRBQ { get; set; }
    private int statutLicence = 1;
    private string validityCSS = "form-control";
    private string validityCategoSelect = "";
    private int typeLicence = 1;
    private string? tempoNoLicence;
    private bool numErrorBool = false;
    private bool numGoodBool = false;
    private string? numErrorMessage;
    private bool sousCategoError = false;
    private bool sousCategoGood = false;
    private bool isSubmitted = false;

    private Dictionary<int, string> statutLicenceText = new Dictionary<int, string>
    {
        { 1, "Valide" },
        { 2, "Valide avec restriction" },
        { 3, "Non valide" }
    };

    private Dictionary<int, string> typeLicenceText = new Dictionary<int, string>
    {
        { 1, "Entrepreneur" },
        { 2, "Constructeur-Propriétaire" }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categorieGeneral = AllCategories
            .Where(c => c.NomCategorie == "Général")
            .ToList();

            categorieSpecialise = AllCategories
            .Where(c => c.NomCategorie == "Spécialisé")
            .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la récupération des personnes: {ex.Message}");
        }
    }

    private void OnCheckboxChange(string codeSousCategorie, ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            LicenceRBQFormModel.SousCategoSelected[codeSousCategorie] = (bool)e.Value;
        }
    }

    private bool ValidateSelection()
    {
        return LicenceRBQFormModel.SousCategoSelected.Values.Any(isSelected => isSelected);
    }

    static string InsertHyphens(string input)
    {
        if (input.Length == 10)
        {
            return input.Substring(0, 4) + "-" + input.Substring(4, 4) + "-" + input.Substring(8, 2);
        }
        return input;
    }

    public class ApiResponse
    {
        public Result? Result { get; set; }
    }

    public class Result
    {
        public List<RBQRecord>? Records { get; set; }
    }

    public class RBQRecord
    {
        [JsonPropertyName("Numero de licence")]
        public string? NumeroDeLicence { get; set; }
    }
    protected async Task<string?> GetNumeroDeLicenceAsync()
    {
        try
        {
            var response = await Http.GetAsync($"https://www.donneesquebec.ca/recherche/api/3/action/datastore_search_sql?sql=SELECT%20*%20FROM%20%2232f6ec46-85fd-45e9-945b-965d9235840a%22%20WHERE%20%22Numero%20de%20licence%22%20=%20%27{noLicenceRBQ}%27LIMIT%201"); // Replace `url` with your API endpoint
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var apiResponse = JsonSerializer.Deserialize<ApiResponse>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                var responseNoLicence = apiResponse?.Result?.Records?.FirstOrDefault()?.NumeroDeLicence;
                Console.WriteLine("API: "+ responseNoLicence);
                return responseNoLicence;
            }
            return "0000-0000-00";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            return null;
        }
    }
    public async Task HandleValidSubmit()
    {
        if (!ValidateSelection())
        {
            validityCategoSelect = "invalid";
            sousCategoError = true;
            sousCategoGood = false;
        }
        else
        {
            validityCategoSelect = "valid";
            sousCategoError = false;
            sousCategoGood = true;
        }

        if (!string.IsNullOrEmpty(noLicenceRBQ))
        {
            if (noLicenceRBQ.Length == 10 || noLicenceRBQ.Length == 12) {
                noLicenceRBQ = InsertHyphens(noLicenceRBQ);
                tempoNoLicence = await GetNumeroDeLicenceAsync(); 
            }
            else {
                numErrorBool = true;
                numErrorMessage = "Aucune correspondance";
                validityCSS = "form-control invalid";
                numGoodBool = false;
            }
            if (tempoNoLicence != null) {
                if (tempoNoLicence.Equals(noLicenceRBQ))
                {
                    numErrorBool = false;
                   validityCSS = "form-control valid";
                    numGoodBool = true;
                }
                else
                {
                    numErrorMessage = "Numéro de licence invalide";
                    numErrorBool = true;
                    validityCSS = "form-control invalid";
                    numGoodBool = false;
                }
            }
            else {
                numErrorBool = true;
                numErrorMessage = "Numéro de licence invalide";
                validityCSS = "form-control invalid";
                numGoodBool = false;
            }
        }
        else
        {
            numErrorBool = true;
            validityCSS = "form-control invalid";
            numGoodBool = false;
            numErrorMessage = "Numéro de licence requis";
        }

        if (!numErrorBool && !sousCategoError)
        {
            Console.WriteLine("Formulaire LicenceRBQ valide");
        }
    }
}