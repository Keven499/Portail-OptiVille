@page "/rbq"
@using Microsoft.EntityFrameworkCore
@using Portail_OptiVille.Data.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@inject A2024420517riGr1Eq6Context _context
@inject IJSRuntime JS
@inject HttpClient Http
<PageTitle>LicenceRBQComponent</PageTitle>

<style>
    ::-webkit-scrollbar {
        width: 6px;
    }
    ::-webkit-scrollbar-track {
        background: #f1f1f1;
    }
    ::-webkit-scrollbar-thumb {
        background: rgb(120, 198, 224);
    }
    ::-webkit-scrollbar-thumb:hover {
        background: rgb(11, 35, 65);
    }
    .overflow-auto {
        height: 192px;
        padding: 4px;
        width: 100%;
    }
    .litteStrong {
        margin-right: 4px;
        font-size: 14px;
    }
    .form-control {
        background-color: rgb(120, 198, 224);
        border-bottom: solid rgb(11, 35, 65) 3px;
    }
    .form-select {
        background-color: rgb(120, 198, 224);
        border-bottom: solid rgb(11, 35, 65) 3px;
    }
    .valid.modified:not([type=checkbox]) {
        outline: none;
    }
    .btn {
        color: white;
        background-color: rgb(120, 198, 224);
        border-bottom: solid rgb(11, 35, 65) 3px;
    }
    .btn:hover {
        background-color: rgb(11, 35, 65);
        color: white;
    }
    .error {
        color: red;
    }
    .dark-background {
        background-color: rgb(11, 35, 65);
    }
    h1 {
        color: white;
        padding: 15px;
    }
    input[type="checkbox"] {
        opacity: 0;
        position: absolute;
        width: 0;
        height: 0;
    }
    input[type="checkbox"] {
        opacity: 0;
        position: absolute;
        width: 0;
        height: 0;
    }
    .custom-checkbox {
        display: block;
        width: 20px;
        flex-shrink: 0;
        margin-right: 3px;
        height: 20px;
        background-color: rgb(120, 198, 224);
        border: 1px solid rgb(11, 35, 65);
        border-radius: 3px;
        position: relative;
        cursor: pointer;
        vertical-align: middle;
    }
    label {
        display: flex;
        margin-bottom: 2px;
    }
    input[type="checkbox"]:checked+.custom-checkbox {
        background-color: rgb(11, 35, 65);
    }

    .custom-checkbox:before {
        content: '';
        position: absolute;
        left: 6px;
        top: 2px;
        width: 6px;
        height: 12px;
        border: solid white;
        border-width: 0 2px 2px 0;
        transform: rotate(45deg);
        opacity: 0;
    }
    input[type="checkbox"]:checked+.custom-checkbox:before {
        opacity: 1;
    }
    .invalid {
        outline: 1px solid red;
    }
    .valid {
        outline: 1px solid #26b050;
    }
    .validIcon {
        color: #26b050;
    }
</style>

<div class="container-fluid card justify-content-center p-0 m-0">
    <div class="col-xl-12 col-12 bg-white">
        <div class="card-header py-2 bg-bleuFonce"><h3 class="py-2 p-0 my-0  text-white">Licence RBQ</h3></div>
        <EditForm Model="@this" OnValidSubmit="HandleValidSubmit" class="card-body py-1">
            <div class="row mb-2">
                <div class="col">
                    <label class="form-label mb-1 bleuFonce fw-bold" for="noLicenceRBQ">Numéro</label>
                    <input type="text" id="noLicenceRBQ" class="@validityCSS" @bind="noLicenceRBQ" />
                    @if (numErrorBool) {
                        <span class="input-group-text text-danger">
                            <i class="bi bi-x-circle me-2"></i>
                            <div class="validation-message">@numErrorMessage</div>
                        </span>
                    }
                    @if (numGoodBool) {
                         <span class="input-group-text text-success">
                                <i class="bi bi-check-circle me-2"></i>
                        </span>
                    }
                </div>
            </div>
            <div class="row mb-2">
                <div class="col">
                    <label class="form-label mb-1 bleuFonce fw-bold" for="statut">Statut</label>
                    <select class="form-select" id="statut" @bind="statutLicence">
                        <option value="1">Valide</option>
                        <option value="2">Valide avec restriction</option>
                        <option value="3">Non valide</option>
                    </select>
                </div>
                <div class="col">
                    <label class="form-label mb-1 bleuFonce fw-bold" for="licenceType">Type de licence</label>
                    <select class="form-select" id="licenceType" @bind="typeLicence">
                        <option value="1">Entrepreneur</option>
                        <option value="2">Constructeur-Propriétaire</option>
                    </select>
                </div>
            </div>
            <div class="row align-items-center">
                <div class="col">
                    <label class="form-label m-0 bleuFonce fw-bold">Entrepeneur général</label>
                </div>
            </div>
            <div class="overflow-auto mb-2 card @validityCategoSelect">
                @{
                    int i = 0;
                    foreach (var categorie in categorieGeneral)
                    {
                        <div class="row m-0">
                            <div class="col-auto p-0">
                                <label for="categorie@(i)">
                                    <input type="checkbox" id="categorie@(i)"
                                        checked="@sousCategoSelected[categorie.CodeSousCategorie]"
                                        @onchange="(e) => OnCheckboxChange(categorie.CodeSousCategorie, e)" />
                                    <span class="custom-checkbox"></span>
                                    <strong class="litteStrong">@categorie.CodeSousCategorie</strong>
                                    <strong class="litteStrong">@categorie.Nom</strong>
                                </label>
                            </div>
                        </div>
                        i++;
                    }
                }
            </div>
            <div class="row mb-2">
                <div class="col">
                    <label class="form-label m-0 bleuFonce fw-bold">Entrepeneur spécialisé</label>
                    <div class="overflow-auto card @validityCategoSelect">
                        @foreach (var categorie in categorieSpecialise)
                        {
                            <div class="row m-0">
                                <div class="col-auto p-0">
                                    <label>
                                        <input type="checkbox" id="categorie@(i)"
                                            checked="@sousCategoSelected[categorie.CodeSousCategorie]"
                                            @onchange="(e) => OnCheckboxChange(categorie.CodeSousCategorie, e)" />
                                        <span class="custom-checkbox"></span>
                                        <strong class="litteStrong">@categorie.CodeSousCategorie</strong>
                                        <strong class="litteStrong">@categorie.Nom</strong>
                                    </label>
                                </div>
                                
                            </div>
                            i++;
                        }
                    </div>
                    @{
                        if (sousCategoError)
                        {
                            <span class="input-group-text text-danger">
                                <i class="bi bi-x-circle me-2"></i>
                                <div class="validation-message">Au moins une catégorie doit être sélectionné</div>
                            </span>
                        }
                    }
                </div>
            </div>
            <div class="d-grid gap-2">
                <button class="btn" type="submit">Soumettre</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private List<Categorie> categorieGeneral = new List<Categorie>();
    private List<Categorie> categorieSpecialise = new List<Categorie>();
    private List<Categorie> allCategories = new List<Categorie>();
    private Dictionary<string, bool> sousCategoSelected = new Dictionary<string, bool>();
    public string? noLicenceRBQ { get; set; }
    private int statutLicence = 1;
    private string validityCSS = "form-control";
    private string validityCategoSelect = "";
    private int typeLicence = 1;
    private string? tempoNoLicence;
    private bool numErrorBool = false;
    private bool numGoodBool = false;
    private string? numErrorMessage;
    private bool sousCategoError = false;
    private bool sousCategoGood = false;

    private Dictionary<int, string> statutLicenceText = new Dictionary<int, string>
    {
        { 1, "Valide" },
        { 2, "Valide avec restriction" },
        { 3, "Non valide" }
    };

    private Dictionary<int, string> typeLicenceText = new Dictionary<int, string>
    {
        { 1, "Entrepreneur" },
        { 2, "Constructeur-Propriétaire" }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            allCategories = await _context.Categories.ToListAsync();

            sousCategoSelected = allCategories.ToDictionary(
            c => c.CodeSousCategorie,
            c => false
            );

            categorieGeneral = allCategories
            .Where(c => c.NomCategorie == "Général")
            .ToList();

            categorieSpecialise = allCategories
            .Where(c => c.NomCategorie == "Spécialisé")
            .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la récupération des personnes: {ex.Message}");
        }
    }

    private List<Categorie> GetSelectedCategories()
    {
        return allCategories
        .Where(c => sousCategoSelected[c.CodeSousCategorie])
        .ToList();
    }

    private void OnCheckboxChange(string codeSousCategorie, ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            sousCategoSelected[codeSousCategorie] = isChecked;
        }
    }

    private bool ValidateSelection()
    {
        return sousCategoSelected.Values.Any(isSelected => isSelected);
    }

    static string InsertHyphens(string input)
    {
        if (input.Length == 10)
        {
            return input.Substring(0, 4) + "-" + input.Substring(4, 4) + "-" + input.Substring(8, 2);
        }
        return input;
    }

    public class ApiResponse
    {
        public Result? Result { get; set; }
    }

    public class Result
    {
        public List<RBQRecord>? Records { get; set; }
    }

    public class RBQRecord
    {
        [JsonPropertyName("Numero de licence")]
        public string? NumeroDeLicence { get; set; }
    }
    protected async Task<string?> GetNumeroDeLicenceAsync()
    {
        try
        {
            var response = await Http.GetAsync($"https://www.donneesquebec.ca/recherche/api/3/action/datastore_search_sql?sql=SELECT%20*%20FROM%20%2232f6ec46-85fd-45e9-945b-965d9235840a%22%20WHERE%20%22Numero%20de%20licence%22%20=%20%27{noLicenceRBQ}%27LIMIT%201"); // Replace `url` with your API endpoint
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var apiResponse = JsonSerializer.Deserialize<ApiResponse>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                var responseNoLicence = apiResponse?.Result?.Records?.FirstOrDefault()?.NumeroDeLicence;
                Console.WriteLine("API: "+ responseNoLicence);
                return responseNoLicence;
            }
            return "0000-0000-00";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            return null;
        }
    }

    public async Task HandleValidSubmit()
    {
        if (!ValidateSelection())
        {
            validityCategoSelect = "invalid";
            sousCategoError = true;
            sousCategoGood = false;
        }
        else
        {
             validityCategoSelect = "valid";
            sousCategoError = false;
            sousCategoGood = true;
        }

        if (!string.IsNullOrEmpty(noLicenceRBQ))
        {
            if (noLicenceRBQ.Length == 10 || noLicenceRBQ.Length == 12) {
                noLicenceRBQ = InsertHyphens(noLicenceRBQ);
                tempoNoLicence = await GetNumeroDeLicenceAsync(); 
            }
            else {
                numErrorBool = true;
                numErrorMessage = "Numéro de licence invalide";
                validityCSS = "form-control invalid";
                numGoodBool = false;
            }
            if (tempoNoLicence != null) {
                if (tempoNoLicence.Equals(noLicenceRBQ))
                {
                    numErrorBool = false;
                   validityCSS = "form-control valid";
                    numGoodBool = true;
                }
                else
                {
                    numErrorMessage = "Numéro de licence invalide";
                    numErrorBool = true;
                    validityCSS = "form-control invalid";
                    numGoodBool = false;
                }
            }
            else {
                numErrorBool = true;
                numErrorMessage = "Numéro de licence invalide";
                validityCSS = "form-control invalid";
                numGoodBool = false;
            }
        }
        else
        {
            numErrorBool = true;
            validityCSS = "form-control invalid";
            numGoodBool = false;
            numErrorMessage = "Numéro de licence requis";
        }

        if (!numErrorBool && !sousCategoError)
        {
            Console.WriteLine(noLicenceRBQ);
            Console.WriteLine(statutLicenceText[statutLicence]);
            Console.WriteLine(typeLicenceText[typeLicence]);
            var selectedSousCatego = GetSelectedCategories();
            foreach (var category in selectedSousCatego)
            {
                Console.WriteLine($"Selected: {category.CodeSousCategorie} - {category.Nom}");
            }
            // IL FAUT MAINTENANT FAIRE LES REQUÊTES POUR INSÉRER TOUTES LES LICENCES DE FAÇONS APPROPRIÉES
            // CELA INCLUS ÉNORMÉMENT DE CHOSES
            // NOUS ALLONS DEVOIR TOUCHER AUX TABLES SUIVANTES (DANS L'ORDRE D'INSERTION): CATEGORIE, LICENCERBQ,
            // LICENCERBQCATEGORIE, FOURNISSEURLICENCERBQ ??
            // À CE POINT DANS LA DEMANDE, L'ID DU FOURNISSEUR N'EXISTE TECHNIQUEMENT PAS ENCORE, L'INSERTION DANS LA TABLE
            //FOURNISSEURLICENCERBQ DEVRA DONC SE FAIRE FORCÉMENT À LA FIN
            // LÀ OÙ NOUS EN SOMMES, NOUS NE POUVONS QUE INSÉRER DANS LES TABLES: CATEGORIE, LICENCERBQ, LICENCERBQCATEGORIE.
            // RESTE À DÉTERMINER SI UNE LICENCE AVEC LE STATUT NON VALIDE DOIT ÊTRE VÉRIFIÉ PAR L'API ET QU'EST-CE QUE LES TRAVAUX PERMIS
        }
    }
}