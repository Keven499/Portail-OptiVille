@page "/config"
@using System.Text.Json
@inject Portail_OptiVille.Data.Utilities.Config config
@inject IHostEnvironment hostEnvironment // Inject IHostEnvironment to access the web root path
<div class="card">
    <div class="card-header">
        <h3>Configuration Settings</h3>
    </div>
    <div class="card-body">
        <p><strong>Courriel de l'Appro.</strong></p>
        <InputText @bind-Value="config.CourrielAppro" type="email" class="form-control" 
                   readonly="@(!isEditing)" />

        <p><strong>Délai avant la révision (mois)</strong></p>
        <InputNumber @bind-Value="config.DelaiRevision" TValue="int" class="form-control" 
                     readonly="@(!isEditing)" />

        <p><strong>Taille maximale des fichiers joints (Mo)</strong></p>
        <InputNumber @bind-Value="config.TailleMaxFichiers" TValue="int" class="form-control" 
                     readonly="@(!isEditing)" />

        <p><strong>Courriel des finances</strong></p>
        <InputText @bind-Value="config.CourrielFinance" type="email" class="form-control" 
                   readonly="@(!isEditing)" />

        <div class="mt-3">
            @if (!isEditing)
            {
                <button class="btn btn-primary" @onclick="EditConfig">Modifier</button>
            }
            else
            {
                <button class="btn btn-success" @onclick="SaveConfig">Sauvegarder</button>
            }
        </div>

        @if (saveSuccess)
        {
            <div class="alert alert-success mt-3">Configuration saved successfully!</div>
        }
    </div>
</div>
@code {
    private bool isEditing = false;
    private bool saveSuccess = false;

    private void EditConfig()
    {
        isEditing = true;
        saveSuccess = false; 
    }

    private async Task SaveConfig()
    {
        var filePath = Path.Combine(hostEnvironment.ContentRootPath, "wwwroot", "Setting.json");
        var json = JsonSerializer.Serialize(config, new JsonSerializerOptions { WriteIndented = true });

        await File.WriteAllTextAsync(filePath, json);

        saveSuccess = true; 
        isEditing = false; 
        await Task.Delay(4000); 
        saveSuccess = false; 
    }
}
