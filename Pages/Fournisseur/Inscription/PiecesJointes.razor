@page "/files"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@inject IJSRuntime _jsRuntime
<style>
    ul 
    {
        list-style-type: none;
    }
    li 
    {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    input[type="file"]::file-selector-button 
    {
        background-color: rgb(11, 35, 65);
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
    .drag-drop-area 
    {
        border: 2px dashed rgb(11, 35, 65);
        background-color: #f9f9f9;
        border-radius: 10px;
        padding: 50px;
        text-align: center;
        cursor: pointer;
        transition: background-color 0.3s ease;
        width: 100%;
        max-width: 500px; 
    }
    .drag-drop-area:hover 
    {
        background-color: rgba(11, 35, 65, 0.132);
    }
    .drag-drop-area h4 
    {
        color: rgb(11, 35, 65);
        font-weight: bold;
    }
    .dragging {
        background-color: #e9f5e9;
        border-color: #4CAF50;
    }

</style>
<div class="container-fluid card justify-content-center p-0 m-0">
    <div class="col-12">
        <div class="card-header py-2 bg-bleuFonce">
            <h3 class="py-2 p-0 my-0 text-white">Carte d'affaires et brochures</h3>
        </div>
        <EditForm Model="fileModel" OnValidSubmit="HandleValidSubmit">
            <div class="card-body py-1 d-flex justify-content-center">
                <div id="dropArea" class="drag-drop-area">
                    <label for="fileInput">
                    <h4>Drag and Drop Files Here</h4>
                    <p>or click to select files</p>
                    </label>
                </div>
                <InputFile id="fileInput" OnChange="HandleFileChange" multiple 
                           accept=".doc,.docx,.pdf,.xls,.xlsx,.jpg,.jpeg,.png" 
                           style="display: none;" />
            </div>
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger m-0 mb-1">@errorMessage</div>
                        }
            <div class="card-header py-2 bg-bleuFonce">
                <h3 class="py-2 p-0 my-0 text-white">Fichiers téléversés (Total: @GetFormatSize())</h3>
            </div>
            <div class="card-body">
                <ul>
                    @foreach (var file in listFichiers)
                    {
                        <div class="row m-0 align-items-center mt-3">
                            <div class="col-xl p-0">
                                <li>
                                    <h5>@file.Name</h5>
                                    @GetFormatSizeFile(file.Size)
                                </li>
                            </div>
                            <div class="col-auto">
                                <button class="btn btn-danger" type="button" @onclick="() => RemoveFile(file)">Remove</button>
                            </div>
                        </div>
                    }
                </ul>
            </div>
            <div class="d-flex justify-content-center">
                <button class="btn btn-primary btn-lg w-50" type="submit">Save</button>
            </div>
        </EditForm>
    </div>
</div>

<script src="js/dragdrop.js"></script>
@code{

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync("dragAndDrop.initialize", "dropArea", "fileInput");
        }
    }

    private List<IBrowserFile> listFichiers = new List<IBrowserFile>();
    private FichierModel fileModel = new FichierModel();
    public long sizeTotal { get; set; } = 0;
    public long MaxSize = 75;
    public string errorMessage = "";
    
    private class FichierModel 
    {  
        [FileExtensionsAttribute(Extensions = "doc,docx,pdf,xls,xlsx,jpg,jpeg,png", ErrorMessage = "Format de fichier non valide.")]
        public IBrowserFile fichier { get; set; }
        public string NoLicenceNEQ { get; set; }
    }
    private string GetFormatSizeFile(long size)
    {
        if (size >= 1048576)
        {
            return $"{(size / 1048576.0):F2} MB";
        }
        else
        {
            return $"{(size / 1024.0):F2} KB";
        }
    }
 
    private string GetFormatSize()
    {
        if (sizeTotal >= 1048576) // 1 MB = 1048576 bytes (1 * 1024 * 1024)
        {
            return $"{(sizeTotal / 1048576.0):F2} MB / {MaxSize}MB";
        }
        else
        {
            return $"{(sizeTotal / 1024.0):F2} KB / {MaxSize}MB";
        }
    }
    private void CalculTotalSize()
    {
        sizeTotal = listFichiers.Sum(file => file.Size);
    }
    private void HandleFileChange(InputFileChangeEventArgs e)
    {
        var allowedExtensions = new[] { ".doc", ".docx", ".pdf", ".xls", ".xlsx", ".jpg", ".jpeg", ".png" };
        errorMessage = "";

        foreach (var file in e.GetMultipleFiles())
        {
            var fileExtension = Path.GetExtension(file.Name).ToLower();
            if (!allowedExtensions.Contains(fileExtension))
            {
                errorMessage = $"Le fichier {file.Name} a un format non valide.";
                Console.WriteLine(errorMessage);
                continue;
            }
            if (sizeTotal + file.Size <= MaxSize * 1024 * 1024)
            {
                if (!listFichiers.Any(f => f.Name == file.Name && f.Size == file.Size))
                {
                    listFichiers.Add(file);
                }
            }
            else
            {
                // Mettre le message d'erreur sur le forms
                errorMessage = $"Le fichier {file.Name} dépasse la taille maximale autorisée.";
                Console.WriteLine(errorMessage);
            }
        }
        CalculTotalSize();
    }
    private void RemoveFile(IBrowserFile file)
    {
        listFichiers.Remove(file);
        CalculTotalSize();
    }

    private async Task HandleValidSubmit()
    {
        foreach(var file in listFichiers)
        {
            var fileName = Path.GetFileName(file.Name);
            var fileSize = file.Size;
            var fileExtension = Path.GetExtension(fileName);
            Console.WriteLine($"Le fichier {fileName} a été upload. (Taille:{fileSize})");
        }
        /*
        // Ensure the folder exists
        var folderPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "{(idPERUser)}");
        Directory.CreateDirectory(folderPath);

        // Combine the folder path and the file name
        var filePath = Path.Combine(folderPath, uploadedFileName);

        // Open a stream for the uploaded file
        using (var fileStream = new FileStream(filePath, FileMode.Create))
        {
            // Save the file to a folder on the server
            await fichier.OpenReadStream(maxAllowedSize: 4096000).CopyToAsync(fileStream);

            // Reset the position of the stream to the beginning
            Stream StreamFile = fichier.OpenReadStream(maxAllowedSize: 4096000);

            // Instantiate ProfilePictureService with the folder path
            var profilePictureService = new ProfilePictureService(folderPath);

            // Pass the file stream to the UploadAndRenameProfilePicture method
            var profilePicturePath = await profilePictureService.UploadAndRenameProfilePicture(username, uploadedFileName, StreamFile);
            //[ERREUR]
            userData.ImagePath = profilePicturePath;

            // Instantiate UserService
            var userService = new UserService(userData);

            // Now you can update the user's profile in the database with the new profile picture path
            await userService.UpdateUserProfilePicture(username, profilePicturePath);
*/
        }
    
/*
    public class ProfilePictureService
    {
        private readonly string _profilePicturesFolderPath;

        public ProfilePictureService(string profilePicturesFolderPath)
        {
            _profilePicturesFolderPath = profilePicturesFolderPath;
        }

        public async Task<string> UploadAndRenameProfilePicture(string username, string fileName, Stream fileStream)
        {
            // Ensure the folder exists
            Directory.CreateDirectory(_profilePicturesFolderPath);

            // Generate a unique file name based on the user's matricule
            string uniqueFileName = $"{username}_profile{Path.GetExtension(fileName)}";

            // Combine the folder path and the unique file name
            string filePath = Path.Combine(_profilePicturesFolderPath, uniqueFileName);

            string relativeFilePath = Path.Combine("profilepictures", uniqueFileName);
            return relativeFilePath; // Return the path where the file is saved
        }
    }
*/

    // path = wwwroot\profilepictures\ (nompicture)
}