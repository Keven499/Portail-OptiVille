@page "/InfoGenerale"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient Http
<PageTitle>Informations générales</PageTitle>

<EditForm Model="@identificationModel" OnValidSubmit="HandleValidSubmit">
<!-- OnValidSubmit="HandleValidSubmit" -->
<div class="form-group container-fluid h-100 w-100 d-flex align-items-center justify-content-center">
    <div class="row h-100 w-100 d-flex align-items-center justify-content-center">
        <div class="card w-75 h-75 d-flex justify-content-center p-0 m-0">

@* Identification *@
            <div class="card-header py-2 bg-bleuFonce">
                <h3 class="py-2 p-0 my-0 text-white titre-bold">Identification</h3>
            </div>

            <div class="card-body border-bleuFonce py-1" >
                <div class="col-xl-12 col-lg-12 py-2">
                    <label class="bleuFonce texte-bold" for="NEQ">NEQ</label>
                    <InputNumber TValue="long?" @bind-Value="identificationModel.NEQ" @oninput="ValidateInputs" class="form-control input-bleu texte-light" id="NEQ" />

                    @if (isSubmitted && identificationModel.NEQ.HasValue && !isNEQValid)
                    {
                        <span class="input-group-text text-danger">
                            <i class="bi bi-x-circle me-2"></i>
                            <span class="texte-medium">Le NEQ doit contenir exactement 10 chiffres</span>
                        </span>
                    }
                    else if (isSubmitted && isNEQValid && identificationModel.NEQ.HasValue)
                    {
                        <span class="input-group-text text-success">
                            <i class="bi bi-check-circle me-2"></i>
                            <span class="texte-medium">Valide</span>
                        </span>
                    }
                </div>


                <div class="col-xl-12 col-lg-12 py-2">
                    <label class="bleuFonce texte-bold" for="nomEntreprise">Nom de l'entreprise</label>
                    <InputText id="nomEntreprise" class="form-control input-bleu texte-light" @oninput="ValidateInputs" @bind-Value="identificationModel.nomEntreprise"/>
           
                        @if (isSubmitted && !isNomEntrValid)
                        {
                            <span class="input-group-text text-danger">
                                <i class="bi bi-x-circle me-2"></i>
                                @if (string.IsNullOrEmpty(identificationModel.nomEntreprise))
                                {
                                    <span class="texte-medium">Nom requis</span>
                                }
                                else if (identificationModel.nomEntreprise.Length >= 64)
                                {
                                    <span class="texte-medium">Maximum 64 caractères.</span>
                                }
                            </span>
                        }
                        else if (isSubmitted && isNomEntrValid)
                        {
                            <span class="input-group-text text-success">
                                <i class="bi bi-check-circle me-2"></i>
                                <span class="texte-medium">Valide</span>
                            </span>
                        }    
                </div>

                <div class="col-xl-12 col-lg-12 py-2">
                    <label class="bleuFonce texte-bold" for="courrielEntreprise">Courriel de l'entreprise</label>
                    <InputText type="email" id="courrielEntreprise" @oninput="ValidateInputs" @bind-Value="identificationModel.courrielEntreprise" class="form-control input-bleu texte-light" />
                           
                        @if (isSubmitted && !isEmailEntrValid)
                        {
                           <span class="input-group-text text-danger">
                                <i class="bi bi-x-circle me-2"></i>
                                @if (string.IsNullOrEmpty(identificationModel.courrielEntreprise))
                                {
                                    <span class="texte-medium">Courriel requis</span>
                                }
                                else if (identificationModel.courrielEntreprise.Length > 64)
                                {
                                    <span class="texte-medium">Maximum 64 caractères.</span>
                                }
                            </span>
                        }
                        else if (isSubmitted && isEmailEntrValid)
                        {
                            <span class="input-group-text text-success">
                                <i class="bi bi-check-circle me-2"></i>
                                <span class="texte-medium">Valide</span>
                            </span>
                        }   
                </div>

                <div class="col-xl-12 col-lg-12 py-2">
                    <label class="bleuFonce texte-bold" for="MotDePasse">Mot de passe</label>
                    <InputText type="password" id="MotDePasse" @oninput="ValidateInputs" @bind-Value="identificationModel.MotDePasse" class="form-control input-bleu texte-light" />
                                           
                        @if (isSubmitted && !isMdpValid)
                        {
                            <span class="input-group-text text-danger">
                                <i class="bi bi-x-circle me-2"></i>
                                @if (string.IsNullOrEmpty(identificationModel.MotDePasse))
                                    {
                                        <span class="texte-medium">Mot de passe requis</span>
                                    }
                                    else if (identificationModel.MotDePasse.Length < 7 || identificationModel.MotDePasse.Length > 12)
                                    {
                                        <span class="texte-medium">Doit contenir entre 7 et 12 caractères</span>
                                    }
                                    else
                                    {
                                        <span class="texte-medium">Doit contenir une majuscule, une minuscule, un chiffre et un caractère spécial (&commat;$!%*?&)</span>
                                    }
                            </span>
                        }
                        else if (isSubmitted && isMdpValid)
                        {
                            <span class="input-group-text text-success">
                                <i class="bi bi-check-circle me-2"></i>
                                <span class="texte-medium">Valide</span>
                            </span>
                        }  
                </div>

                <div class="col-xl-12 col-lg-12 py-2">
                    <label class="bleuFonce texte-bold" for="ConfirmationMotDePasse">Confirmation du mot de passe</label>
                    <InputText type="password" id="ConfirmationMotDePasse" @oninput="ValidateInputs" @bind-Value="identificationModel.ConfirmationMotDePasse" class="form-control input-bleu texte-light" />
                                                                        
                        @if (isSubmitted && !isConfMdpValid)
                        {
                            <span class="input-group-text text-danger">
                                <i class="bi bi-x-circle me-2"></i>
                                @if (string.IsNullOrEmpty(identificationModel.ConfirmationMotDePasse))
                                {
                                    <span class="texte-medium">Confirmation requise</span>
                                }
                                else if(identificationModel.MotDePasse != identificationModel.ConfirmationMotDePasse)
                                {
                                    <span class="texte-medium">Les mots de passe ne correspondent pas</span>
                                }
                            </span>
                        }
                        else if (isSubmitted && isConfMdpValid)
                        {
                            <span class="input-group-text text-success">
                                <i class="bi bi-check-circle me-2"></i>
                                <span class="texte-medium">Valide</span>
                            </span>
                        } 
                </div>
            </div>

@* Coordonnées *@
            <div class="card-header py-2 bg-bleuFonce">
                <h3 class="py-2 p-0 my-0 text-white titre-bold">Coordonnées de l'entreprise</h3>
            </div>

            <div class="card-body border-bleuFonce bg-blanc py-1">

                <div class="py-2 d-flex justify-content-between">     
                    <div class="col-xl-3 col-lg-3">
                        <label class="bleuFonce texte-bold" for="No">No</label>
                        <InputText @oninput="ValidateInputs" @bind-Value="identificationModel.noEntreprise" class="form-control input-bleu texte-light" id="No" />
                                                                                            
                            @if (isSubmitted && !isNoEntrValid)
                            {
                                <span class="input-group-text text-danger">
                                    <i class="bi bi-x-circle me-2"></i>
                                    <span class="texte-medium">Numéro requis</span>
                                </span>
                            }
                            else if (isSubmitted && isNoEntrValid)
                            {
                                <span class="input-group-text text-success">
                                    <i class="bi bi-check-circle me-2"></i>
                                    <span class="texte-medium">Valide</span>
                                </span>
                            }               
                    </div> 

                    <div class="col-xl-6 col-lg-6 ms-1 me-1">
                        <label class="bleuFonce texte-bold" for="Rue">Rue</label>
                        <InputText @oninput="ValidateInputs" @bind-Value="identificationModel.rueEntreprise" class="form-control input-bleu texte-light" id="Rue"/>
                                                                                                                    
                            @if (isSubmitted && !isRueEntrValid)
                            {
                                <span class="input-group-text text-danger">
                                    <i class="bi bi-x-circle me-2"></i>
                                    <span class="texte-medium">Rue requise</span>
                                </span>
                            }
                            else if (isSubmitted && isRueEntrValid)
                            {
                                <span class="input-group-text text-success">
                                    <i class="bi bi-check-circle me-2"></i>
                                    <span class="texte-medium">Valide</span>
                                </span>
                            }                         
                    </div>                  

                    <div class="col-xl-3 col-lg-3">
                        <label class="bleuFonce texte-bold" for="Bureau">Bureau</label>
                        <InputText @oninput="ValidateInputs" @bind-Value="identificationModel.bureauEntreprise" class="form-control input-bleu texte-light" id="Bureau" />
                                                                                                                                
                            @if (isSubmitted && !isBureauEntrValid && identificationModel.bureauEntreprise != null)
                            {
                                <span class="input-group-text text-danger">
                                    <i class="bi bi-x-circle me-2"></i>
                                    <span class="texte-medium">Maximum 8 caractères</span>
                                </span>
                            }
                            else if (isSubmitted && isBureauEntrValid && identificationModel.bureauEntreprise != null)
                            {
                                <span class="input-group-text text-success">
                                    <i class="bi bi-check-circle me-2"></i>
                                    <span class="texte-medium">Valide</span>
                                </span>
                            }
                    </div>
                </div>

                <div class="col-xl-12 col-lg-12 py-2">
                    <label class="bleuFonce texte-bold" for="Ville">Ville</label>
                    <InputText @oninput="ValidateInputs" @bind-Value="identificationModel.villeEntreprise" class="form-control input-bleu texte-light" id="Ville" />
                                                                                                                        
                        @if (isSubmitted && !isVilleEntrValid)
                        {
                            <span class="input-group-text text-danger">
                            <i class="bi bi-x-circle me-2"></i>
                                @if (string.IsNullOrEmpty(identificationModel.villeEntreprise))
                                {
                                    <span class="texte-medium">Ville requise</span>
                                }
                                else if (identificationModel.villeEntreprise.Length > 64)
                                {
                                    <span class="texte-medium">Maximum 64 caractères</span>
                                }
                            </span>
                        }
                        else if (isSubmitted && isVilleEntrValid)
                        {
                            <span class="input-group-text text-success">
                                <i class="bi bi-check-circle me-2"></i>
                                <span class="texte-medium">Valide</span>
                            </span>
                        } 
                </div>

                <div class="py-2 d-flex justify-content-between">
                    <div class="col-xl-6 col-lg-6">
                        <label class="bleuFonce texte-bold" for="Province">Province</label>
                        <InputSelect class="form-control input-bleu texte-light" id="Province" @oninput="ValidateInputs" @bind-Value="identificationModel.provinceEntreprise">
                            <option value="" disabled selected>Veuillez choisir une province</option>
                            @foreach(string province in listeProvinces)
                            {
                                <option value="@province">@province</option>
                            }
                        </InputSelect>
                                                                                                                                                
                            @if (isSubmitted && !isProvinceEntrValid)
                            {
                                <span class="input-group-text text-danger">
                                    <i class="bi bi-x-circle me-2"></i>
                                    <span class="texte-medium">Province requise</span>
                                </span>
                            }
                            else if (isSubmitted && isProvinceEntrValid)
                            {
                                <span class="input-group-text text-success">
                                    <i class="bi bi-check-circle me-2"></i>
                                    <span class="texte-medium">Valide</span>
                                </span>
                            } 
                    </div>

                    <div class="col-xl-6 col-lg-6 ms-1">
                        <label class="bleuFonce texte-bold" for="CodePostal">Code Postal</label>
                        <InputText @oninput="ValidateInputs" @bind-Value="identificationModel.codePostalEntreprise" class="form-control input-bleu texte-light" id="CodePostal" />
                                                                                                                                            
                            @if (isSubmitted && !isCPEntrValid)
                            {
                                <span class="input-group-text text-danger">
                                    <i class="bi bi-x-circle me-2"></i>
                                    @if (string.IsNullOrEmpty(identificationModel.codePostalEntreprise))
                                    {
                                        <span class="texte-medium">Code postal requis</span>
                                    }
                                    else if (identificationModel.codePostalEntreprise.Length != 6)
                                    {
                                        <span class="texte-medium">Doit contenir 6 caractères</span>
                                    }
                                    else
                                    {
                                        <span class="texte-medium">Code postal invalide</span>
                                    }
                                </span>
                            }
                            else if (isSubmitted && isCPEntrValid)
                            {
                                <span class="input-group-text text-success">
                                    <i class="bi bi-check-circle me-2"></i>
                                    <span class="texte-medium">Valide</span>
                                </span>
                            }
                    </div>
                </div>

                <div class="col-lg-12 col-xl-12 py-2">
                    <label class="bleuFonce texte-bold" for="RegionAdm">Région Admnistrative</label>
                    <InputSelect id="RegionAdm" @oninput="ValidateInputs" @bind-Value="identificationModel.regionAdmEntreprise" class="form-control input-bleu texte-light">
                        <!--Il faut créer un option qui n'a aucune valeur en selected et en disabled pour éviter que lorsqu'on soumet que la valeur soit nulle-->
                        <option value="" disabled selected>Veuillez choisir une région administrative</option>
                        @foreach(string region in listeRegionADM)
                        {
                            <option value="@region">@region</option>
                        }
                    </InputSelect>
                                                                                                                                                        
                        @if (isSubmitted && !isRegionEntrValid)
                        {
                            <span class="input-group-text text-danger">
                                <i class="bi bi-x-circle me-2"></i>
                                <span class="texte-medium">Région requise</span>
                            </span>
                        }
                        else if (isSubmitted && isRegionEntrValid)
                        {
                            <span class="input-group-text text-success">
                                <i class="bi bi-check-circle me-2"></i>
                                <span class="texte-medium">Valide</span>
                            </span>
                        }
                </div>

                <div class="col-lg-12 col-xl-12 py-2">
                    <label class="bleuFonce texte-bold" for="SiteWeb">Site Internet</label>
                    <InputText @oninput="ValidateInputs" @bind-Value="identificationModel.siteWebEntreprise" class="form-control input-bleu texte-light" id="SiteWeb" />
                        @if (isSubmitted && !isSiteEntrValid && !string.IsNullOrEmpty(identificationModel.siteWebEntreprise))
                        {
                            <span class="input-group-text text-danger">
                                <i class="bi bi-x-circle me-2"></i>
                                <span class="texte-medium">Maximum 64 caractères</span>
                            </span>
                        }
                        else if (isSubmitted && isSiteEntrValid && !string.IsNullOrEmpty(identificationModel.siteWebEntreprise))
                        {
                            <span class="input-group-text text-success">
                                <i class="bi bi-check-circle me-2"></i>
                                <span class="texte-medium">Valide</span>
                            </span>
                        }
                </div>

                <div class="py-2 d-flex justify-content-between">
                    <div class="col-lg-3 col-xl-3">
                        <label class="bleuFonce texte-bold" for="typeTel">Type de téléphone</label>
                        <InputSelect class="form-control input-bleu texte-light" id="typeTel" @oninput="ValidateInputs" @bind-Value="identificationModel.typeTelEntreprise">
                            <option value="" disabled selected>Veuillez choisir un type</option>
                                @foreach(string type in listeTypeContact)
                                {
                                    <option value="@type">@type</option>
                                }
                        </InputSelect>
                                                                                                                                                                                                                                                        
                            @if (isSubmitted && !isTypeTelEntrValid)
                            {
                                <span class="input-group-text text-danger">
                                    <i class="bi bi-x-circle me-2"></i>
                                    <span class="texte-medium">Type requis</span>
                                </span>
                            }
                            else if (isSubmitted && isTypeTelEntrValid)
                            {
                                <span class="input-group-text text-success">
                                    <i class="bi bi-check-circle me-2"></i>
                                    <span class="texte-medium">Valide</span>
                                </span>
                            }
                    </div>

                    <div class="col-lg-6 col-xl-6 ms-1 me-1">
                        <label class="bleuFonce texte-bold" for="NoTel">Numéro de téléphone</label>
                        <InputNumber TValue="long?" @oninput="ValidateInputs" @bind-Value="identificationModel.noTelEntreprise" class="form-control input-bleu texte-light" id="NoTel" />
                                                                                                                                                                        
                            @if (isSubmitted && !isNoTelEntrValid)
                            {
                                <span class="input-group-text text-danger">
                                    <i class="bi bi-x-circle me-2"></i>
                                    @if (!(identificationModel.noTelEntreprise.HasValue))
                                    {
                                        <span class="texte-medium">Téléphone requis</span>
                                    }
                                    else if (identificationModel.noTelEntreprise != 9)
                                    {
                                        <span class="texte-medium">Doit contenir 9 numéros</span>
                                    }
                                </span>
                            }
                            else if (isSubmitted && isNoTelEntrValid)
                            {
                                <span class="input-group-text text-success">
                                    <i class="bi bi-check-circle me-2"></i>
                                    <span class="texte-medium">Valide</span>
                                </span>
                            }
                    </div>

                    <div class="col-lg-3 col-xl-3">
                        <label class="bleuFonce texte-bold" for="PosteCoordo">Poste</label>
                        <InputNumber TValue="long?" @oninput="ValidateInputs" @bind-Value="identificationModel.posteTelEntreprise" class="form-control input-bleu texte-light" id="PosteCoordo" />
                                                                                                                                                                                                
                            @if (isSubmitted && !isPosteTelEntrValid && identificationModel.posteTelEntreprise.HasValue)
                            {
                                <span class="input-group-text text-danger">
                                    <i class="bi bi-x-circle me-2"></i>
                                    <span class="texte-medium">Doit contenir 6 numéros</span>                                    
                                </span>
                            }
                            else if (isSubmitted && isPosteTelEntrValid && identificationModel.posteTelEntreprise.HasValue)
                            {
                                <span class="input-group-text text-success">
                                    <i class="bi bi-check-circle me-2"></i>
                                    <span class="texte-medium">Valide</span>
                                </span>
                            }
                    </div>
                </div>
            </div>

@* Contacts *@
            <div class="card-header py-2 bg-bleuFonce">
                <h3 class="py-2 p-0 my-0 text-white titre-bold">Contacts</h3>
            </div>

            <div class="card-body border-bleuFonce bg-blanc py-1">

                <div class="py-2 d-flex justify-content-between">
                    <div class="col-lg-4 col-xl-4">
                        <label class="bleuFonce texte-bold" for="Prenom">Prénom</label>
                        <InputText @oninput="ValidateInputs" @bind-Value="identificationModel.prenomContact" class="form-control input-bleu texte-light" id="Prenom" />
                                                                                                                                                                                        
                            @if (isSubmitted && !isPrenomContactValid)
                            {
                                <span class="input-group-text text-danger">
                                    <i class="bi bi-x-circle me-2"></i>
                                    @if (string.IsNullOrEmpty(identificationModel.prenomContact))
                                    {
                                        <span class="texte-medium">Prénom requis</span>
                                    }
                                    else if (identificationModel.prenomContact.Length > 32)
                                    {
                                        <span class="texte-medium">Maximum 32 caractères</span>
                                    }
                                    else 
                                    {
                                        <span class="texte-medium">Prénom invalide</span>                                        
                                    }
                                </span>
                            }
                            else if (isSubmitted && isPrenomContactValid)
                            {
                                <span class="input-group-text text-success">
                                    <i class="bi bi-check-circle me-2"></i>
                                    <span class="texte-medium">Valide</span>
                                </span>
                            }
                    </div>

                    <div class="col-lg-4 col-xl-4 me-1 ms-1">
                        <label class="bleuFonce texte-bold" for="Nom">Nom</label>
                        <InputText @oninput="ValidateInputs" @bind-Value="identificationModel.nomContact" class="form-control input-bleu texte-light" id="Nom" />
                                                                                                                                                                                        
                            @if (isSubmitted && !isNomContactValid)
                            {
                                <span class="input-group-text text-danger">
                                    <i class="bi bi-x-circle me-2"></i>
                                    @if (string.IsNullOrEmpty(identificationModel.nomContact))
                                    {
                                        <span class="texte-medium">Nom requis</span>
                                    }
                                    else if (identificationModel.nomContact.Length > 32)
                                    {
                                        <span class="texte-medium">Maximum 32 caractères</span>
                                    }
                                    else 
                                    {
                                        <span class="texte-medium">Nom invalide</span>                                        
                                    }
                                </span>
                            }
                            else if (isSubmitted && isNomContactValid)
                            {
                                <span class="input-group-text text-success">
                                    <i class="bi bi-check-circle me-2"></i>
                                    <span class="texte-medium">Valide</span>
                                </span>
                            }
                    </div>

                    <div class="col-lg-4 col-xl-4">
                        <label class="bleuFonce texte-bold" for="Fonction">Fonction</label>
                        <InputText @oninput="ValidateInputs" @bind-Value="identificationModel.fonctionContact" class="form-control input-bleu texte-light" id="Fonction" />                                                                                                                                                                                                                        
                                                                                                                                                                                        
                            @if (isSubmitted && !isFonctionContactValid)
                            {
                                <span class="input-group-text text-danger">
                                    <i class="bi bi-x-circle me-2"></i>
                                    @if (string.IsNullOrEmpty(identificationModel.fonctionContact))
                                    {
                                        <span class="texte-medium">Fonction requise</span>
                                    }
                                    else if (identificationModel.fonctionContact.Length > 32)
                                    {
                                        <span class="texte-medium">Maximum 32 caractères</span>
                                    }
                                </span>
                            }
                            else if (isSubmitted && isFonctionContactValid)
                            {
                                <span class="input-group-text text-success">
                                    <i class="bi bi-check-circle me-2"></i>
                                    <span class="texte-medium">Valide</span>
                                </span>
                            }
                    </div>
                </div>

                <div class="col-lg-12 col-xl-12 py-2">
                    <label class="bleuFonce texte-bold" for="Courriel">Courriel du contact</label>
                    <InputText @oninput="ValidateInputs" @bind-Value="identificationModel.courrielContact" class="form-control input-bleu texte-light" id="Courriel" />                                                                                                                                                                                                                                      
                           
                        @if (isSubmitted && !isEmailContactValid)
                        {
                           <span class="input-group-text text-danger">
                                <i class="bi bi-x-circle me-2"></i>
                                @if (string.IsNullOrEmpty(identificationModel.courrielContact))
                                {
                                    <span class="texte-medium">Courriel requis</span>
                                }
                                else if (identificationModel.courrielContact.Length > 64)
                                {
                                    <span class="texte-medium">Maximum 64 caractères.</span>
                                }
                            </span>
                        }
                        else if (isSubmitted && isEmailContactValid)
                        {
                            <span class="input-group-text text-success">
                                <i class="bi bi-check-circle me-2"></i>
                                <span class="texte-medium">Valide</span>
                            </span>
                        } 
                </div>
                <div class="py-2 d-flex justify-content-between">
                    <div class="col-lg-3 col-xl-3">
                        <label class="bleuFonce texte-bold" for="typeTel">Type de téléphone</label>
                        <InputSelect class="form-control input-bleu texte-light" id="typeTel" @oninput="ValidateInputs" @bind-Value="identificationModel.typeTelContact">
                            <option value="" disabled selected>Veuillez choisir un type</option>
                                @foreach(string type in listeTypeContact)
                                {
                                    <option value="@type">@type</option>
                                }
                        </InputSelect>
                                                                                                                                                                                                                                                        
                            @if (isSubmitted && !isTypeTelContactValid)
                            {
                                <span class="input-group-text text-danger">
                                    <i class="bi bi-x-circle me-2"></i>
                                    <span class="texte-medium">Type requis</span>
                                </span>
                            }
                            else if (isSubmitted && isTypeTelContactValid)
                            {
                                <span class="input-group-text text-success">
                                    <i class="bi bi-check-circle me-2"></i>
                                    <span class="texte-medium">Valide</span>
                                </span>
                            }
                    </div>

                    <div class="col-lg-6 col-xl-6 ms-1 me-1">
                        <label class="bleuFonce texte-bold" for="NoTel">Numéro de téléphone</label>
                        <InputNumber TValue="long?" @oninput="ValidateInputs" @bind-Value="identificationModel.noTelContact" class="form-control input-bleu texte-light" id="NoTel" />
                                                                                                                                                                        
                            @if (isSubmitted && !isNoTelContactValid)
                            {
                                <span class="input-group-text text-danger">
                                    <i class="bi bi-x-circle me-2"></i>
                                    @if (!(identificationModel.noTelContact.HasValue))
                                    {
                                        <span class="texte-medium">Téléphone requis</span>
                                    }
                                    else if (identificationModel.noTelContact != 9)
                                    {
                                        <span class="texte-medium">Doit contenir 9 numéros</span>
                                    }
                                </span>
                            }
                            else if (isSubmitted && isNoTelContactValid)
                            {
                                <span class="input-group-text text-success">
                                    <i class="bi bi-check-circle me-2"></i>
                                    <span class="texte-medium">Valide</span>
                                </span>
                            }
                    </div>

                    <div class="col-lg-3 col-xl-3">
                        <label class="bleuFonce texte-bold" for="PosteContact">Poste</label>
                        <InputNumber TValue="long?" @oninput="ValidateInputs" @bind-Value="identificationModel.posteTelContact" class="form-control input-bleu texte-light" id="PosteContact" />
                            
                            @if (isSubmitted && !isPosteTelContactValid && identificationModel.posteTelContact.HasValue)
                            {
                                <span class="input-group-text text-danger">
                                    <i class="bi bi-x-circle me-2"></i>
                                    <span class="texte-medium">Doit contenir 6 numéros</span>                                    
                                </span>
                            }
                            else if (isSubmitted && isPosteTelContactValid && identificationModel.posteTelContact.HasValue)
                            {
                                <span class="input-group-text text-success">
                                    <i class="bi bi-check-circle me-2"></i>
                                    <span class="texte-medium">Valide</span>
                                </span>
                            }
                    </div>
                </div>
            </div>

            <div class="card-footer bg-bleuFonce">
                <div class="d-flex justify-content-center">
                    <button type="submit" class="btn bg-bleu text-white texte-bold" @onclick="SubmitForm" style="width: 200px;">Suivant <i class="bi bi-arrow-right-circle"></i></button>
                </div>
            </div>

        </div>
    </div>
</div>

    <DataAnnotationsValidator />
</EditForm>

@code {
    // Modèle pour les informations générales
    private IdentificationModel identificationModel = new IdentificationModel();

#region Listes
    private List<string> listeProvinces = new List<string>{"Québec", "Ontario", "Manitoba", "Saskatchewan", "Alberta", "Colombie-Britanique",
        "Île-du-Prince-Édouard", "Nouveau-Brunswick", "Nouvelle-Écosse", "Terre-Neuve-et-Labrador", "Nunavut", "Territoires du Nord-Ouest", 
        "Yukon"};
    private List<string> listeRegionADM = new List<string>{"(01) Bas-Saint-Laurent", "(02) Saguenay-Lac-Saint-Jean", "(03) Capitale-Nationale", 
        "(04) Mauricie", "(05) Estrie", "(06) Montréal", "(07) Outaouais", "(08) Abitibi-Témiscamingue", "(09) Côte-Nord", "(10) Nord-du-Québec", 
        "(11) Gaspésie-Îles-de-la-Madeleine", "(12) Chaudière-Appalaches", "(13) Laval", "(14) Lanaudière", "(15) Laurentides", "(16) Montérégie", 
        "(17) Centre-du-Québec"};
    private List<string> listeTypeContact = new List<string>{"Bureau", "Télécopieur", "Cellulaire"};
#endregion

#region Validations
    private bool isSubmitted = false;
    private bool isValid = true;
    private bool isNEQValid = true;
    private bool isNomEntrValid = true;
    private bool isEmailEntrValid = true;
    private bool isMdpValid = true;
    private bool isConfMdpValid = true;
    private bool isNoEntrValid = true;
    private bool isRueEntrValid = true;
    private bool isBureauEntrValid = true;
    private bool isVilleEntrValid = true;
    private bool isProvinceEntrValid = true;
    private bool isCPEntrValid = true;
    private bool isRegionEntrValid = true;
    private bool isSiteEntrValid = true;
    private bool isTypeTelEntrValid = true;
    private bool isNoTelEntrValid = true;
    private bool isPosteTelEntrValid = true;
    private bool isPrenomContactValid = true;
    private bool isNomContactValid = true;
    private bool isFonctionContactValid = true;
    private bool isEmailContactValid = true;
    private bool isTypeTelContactValid = true;
    private bool isNoTelContactValid = true;
    private bool isPosteTelContactValid = true;
#endregion
    
#region Validation des champs    
    // Validation de chaque champ
    private void ValidateInputs()
    {        
        // NEQ: Validation si une valeur a été saisie
        if (identificationModel.NEQ.HasValue)
        {
            // Valide si la valeur est entre 1100000000 et 8899999999
            if (identificationModel.NEQ >= 1100000000 && identificationModel.NEQ <= 8899999999)
            {
                isNEQValid = true;
            }
            else
            {
                isNEQValid = false;  // Invalide si hors plage
            }
        }
        else
        {
            // Si le champ est vide, il est facultatif donc valide
            isNEQValid = true;
        }

        // Nom entreprise
        if (!string.IsNullOrEmpty(identificationModel.nomEntreprise) && identificationModel.nomEntreprise.Length <= 64)
        {
            isNomEntrValid = true;
        }
        else
        {
            isNomEntrValid = false;
        }

        // Courriel Entreprise
        if (!string.IsNullOrEmpty(identificationModel.courrielEntreprise) && identificationModel.courrielEntreprise.Length <= 64)
        {
            isEmailEntrValid = true;
        }
        else
        {
            isEmailEntrValid = false;
        }

        // Mot de passe
        // Mot de passe vide
        if (string.IsNullOrEmpty(identificationModel.MotDePasse))
        {
            isMdpValid = false;  
        }
        // Longueur invalide
        else if (identificationModel.MotDePasse.Length < 7 || identificationModel.MotDePasse.Length > 12)
        {
            isMdpValid = false;  
        }
        // Mot de passe ne respecte pas les exigences
        else if (!System.Text.RegularExpressions.Regex.IsMatch(identificationModel.MotDePasse, "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&]).+$"))
        {
            isMdpValid = false;  
        }
        else
        {
            isMdpValid = true;
        }

        // Confirmation du mot de passe
        if (string.IsNullOrEmpty(identificationModel.ConfirmationMotDePasse))
        {
            isConfMdpValid = false;
        }
        else if (isMdpValid && identificationModel.MotDePasse != identificationModel.ConfirmationMotDePasse)
        {
            isConfMdpValid = false;
        }
        else if (isMdpValid && identificationModel.MotDePasse == identificationModel.ConfirmationMotDePasse)
        {
            isConfMdpValid = true;
        }
        else
        {
            isConfMdpValid = true;
        }

        // Numéro adresse
        if (!string.IsNullOrEmpty(identificationModel.noEntreprise) && identificationModel.noEntreprise.Length <= 8)
        {
            isNoEntrValid = true;
        }
        else
        {
            isNoEntrValid = false;
        }

        // Rue adresse
        if (!string.IsNullOrEmpty(identificationModel.rueEntreprise) && identificationModel.rueEntreprise.Length <= 64)
        {
            isRueEntrValid = true;
        }
        else
        {
            isRueEntrValid = false;
        }

        // Bureau adresse
        if (!string.IsNullOrEmpty(identificationModel.bureauEntreprise) && identificationModel.bureauEntreprise.Length <= 8)
        {
            isBureauEntrValid = true;
        }
        else
        {
            isBureauEntrValid = false;
        }

        // Ville adresse
        if (!string.IsNullOrEmpty(identificationModel.villeEntreprise) && identificationModel.villeEntreprise.Length <= 64)
        {
            isVilleEntrValid = true;
        }
        else
        {
            isVilleEntrValid = false;
        }

        // Province adresse
        if (!string.IsNullOrEmpty(identificationModel.provinceEntreprise))
        {
            isProvinceEntrValid = true;
        }
        else
        {
            isProvinceEntrValid = false;
        }

        // Code postal adresse
        // Code postal vide
        if (string.IsNullOrEmpty(identificationModel.codePostalEntreprise))
        {
            isCPEntrValid = false;  
        }
        // Longueur invalide
        else if (identificationModel.codePostalEntreprise.Length != 6)
        {
            isCPEntrValid = false;  
        }
        // Code postal ne respecte pas les exigences
        else if (!System.Text.RegularExpressions.Regex.IsMatch(identificationModel.codePostalEntreprise, "^(?!.*[DFIOQU])[A-VXY][0-9][A-Z] ?[0-9][A-Z][0-9]$"))
        {
            isCPEntrValid = true;  
        }
        else
        {
            isCPEntrValid = true;
        }
        
        // Région adresse
        if (!string.IsNullOrEmpty(identificationModel.regionAdmEntreprise))
        {
            isRegionEntrValid = true;
        }
        else
        {
            isRegionEntrValid = false;
        }

        // Site internet 
        // Si une valeur a été saisie
        if (!string.IsNullOrEmpty(identificationModel.siteWebEntreprise))  
        {
            // longueur 
            if (identificationModel.siteWebEntreprise.Length > 64)
            {
                isSiteEntrValid = false;  
            }
            else
            {
                isSiteEntrValid = true;
            }
        }
        // Si pas de valeur saisie, considérée comme valide
        else
        {
            isSiteEntrValid = true;  
        }
                
        // Type tel adresse
        if (!string.IsNullOrEmpty(identificationModel.typeTelEntreprise))
        {
            isTypeTelEntrValid = true;
        }
        else
        {
            isTypeTelEntrValid = false;
        }

        // Numéro tel
        // Vide
        if (!identificationModel.noTelEntreprise.HasValue)        
        {
            isNoTelEntrValid = false;  
        }
        // Invalide si hors plage
        else if (!(identificationModel.noTelEntreprise >= 1100000000 && identificationModel.noTelEntreprise <= 8899999999))
        {
            isNoTelEntrValid = false;  
        }
        else
        {
            isNoTelEntrValid = true;  
        }

        // Poste tel
        // Vide
        if (!identificationModel.posteTelEntreprise.HasValue)        
        {
            isPosteTelEntrValid = false;  
        }
        // Invalide si hors plage
        else if (!(identificationModel.posteTelEntreprise >= 000000 && identificationModel.posteTelEntreprise <= 999999))
        {
            isPosteTelEntrValid = false;  
        }
        else
        {
            isPosteTelEntrValid = true;  
        }

        // Prénom Contact
        // Vide
        if (string.IsNullOrEmpty(identificationModel.prenomContact))
        {
            isPrenomContactValid = false;
        }
        else if (!string.IsNullOrEmpty(identificationModel.prenomContact))
        {
        // Longueur
            if(identificationModel.prenomContact.Length > 32)
            {
                isPrenomContactValid = false;  
            }
        // Exigences
            else if (!System.Text.RegularExpressions.Regex.IsMatch(identificationModel.prenomContact, "^[a-zA-Z'-]+$"))
            {
                isPrenomContactValid = false;
            }
            else 
            {
                isPrenomContactValid = true;
            }
        }    
        else
        {
            isPrenomContactValid = true;
        }

        // Nom Contact
        // Vide
        if (string.IsNullOrEmpty(identificationModel.nomContact))
        {
            isNomContactValid = false;
        }
        else if (!string.IsNullOrEmpty(identificationModel.nomContact))
        {
        // Longueur
            if(identificationModel.nomContact.Length > 32)
            {
                isNomContactValid = false;  
            }
        // Exigences
            else if (!System.Text.RegularExpressions.Regex.IsMatch(identificationModel.nomContact, "^[a-zA-Z'-]+$"))
            {
                isNomContactValid = false;
            }
            else 
            {
                isNomContactValid = true;
            }
        }    
        else
        {
            isNomContactValid = true;
        }

        // Fonction Contact
        // Vide
        if (string.IsNullOrEmpty(identificationModel.fonctionContact))
        {
            isFonctionContactValid = false;
        }
        else if (!string.IsNullOrEmpty(identificationModel.fonctionContact))
        {
        // Longueur
            if(identificationModel.fonctionContact.Length > 32)
            {
                isFonctionContactValid = false;  
            }
            else 
            {
                isFonctionContactValid = true;
            }
        }    
        else
        {
            isFonctionContactValid = true;
        }

        // Courriel Contact
        if (!string.IsNullOrEmpty(identificationModel.courrielContact) && identificationModel.courrielContact.Length <= 64)
        {
            isEmailContactValid = true;
        }
        else
        {
            isEmailContactValid = false;
        }

        // Type tel contact
        if (!string.IsNullOrEmpty(identificationModel.typeTelContact))
        {
            isTypeTelContactValid = true;
        }
        else
        {
            isTypeTelContactValid = false;
        }

        // Numéro tel Contact
        // Vide
        if (!identificationModel.noTelContact.HasValue)        
        {
            isNoTelContactValid = false;  
        }
        // Invalide si hors plage
        else if (!(identificationModel.noTelContact >= 1100000000 && identificationModel.noTelContact <= 8899999999))
        {
            isNoTelContactValid = false;  
        }
        else
        {
            isNoTelContactValid = true;  
        }

        // Poste tel Contact
        // Vide
        if (!identificationModel.posteTelContact.HasValue)        
        {
            isPosteTelContactValid = false;  
        }
        // Invalide si hors plage
        else if (!(identificationModel.posteTelContact >= 000000 && identificationModel.posteTelContact <= 999999))
        {
            isPosteTelContactValid = false;  
        }
        else
        {
            isPosteTelContactValid = true;  
        }

        // Forcer la mise à jour de l'interface utilisateur
        StateHasChanged();         
    }
#endregion

    // Sert à gérer le scénario où le formulaire est valide.
    public async void HandleValidSubmit()
    {
        await getAddressWithNEQ();
        Console.WriteLine("OnValidSubmit");
    }

    //Appel de l'API des municipalites
    private async Task getAddressWithNEQ()
    {
        var response = await Http.GetAsync($"https://www.donneesquebec.ca/recherche/api/3/action/datastore_search_sql?sql=SELECT%20DISTINCT%20*%20FROM%20%2232f6ec46-85fd-45e9-945b-965d9235840a%22%20WHERE%20%22NEQ%22%20=%20%27{identificationModel.NEQ}%27%20LIMIT%201");
    
        if (response.IsSuccessStatusCode){
            // Récupération des données
            var data = await response.Content.ReadAsStringAsync();
            Console.WriteLine(data);
        }
        else{
            Console.WriteLine("Erreur lors de l'appel de l'API");
        }
    }

    private void SubmitForm()
    {
        isSubmitted = true;      
        ValidateInputs();
    }

    public class IdentificationModel
    {
    #region identification

             public long? NEQ { get; set; }
            
            [Required]
            public string? nomEntreprise { get; set; }

            [Required]
            public string? courrielEntreprise { get; set; }

            [Required]
            public string? MotDePasse { get; set; }

            [Required]
            [Compare(nameof(MotDePasse), ErrorMessage = "Les mots de passe ne correspondent pas")]
            public string? ConfirmationMotDePasse { get; set; }
    #endregion
    #region coordonnees
            [Required]
            public string? noEntreprise { get; set; }

            [Required]
            public string? rueEntreprise { get; set; }

            public string? bureauEntreprise { get; set; }

            [Required]
            public string? villeEntreprise { get; set; }

            [Required]
            public string? provinceEntreprise { get; set; }

            [Required]
            public string? codePostalEntreprise { get; set; }

            [Required]
            public int? codeAdmEntreprise { get; set; }

            [Required]
            public string? regionAdmEntreprise { get; set; }

            public string? siteWebEntreprise { get; set; }

            [Required]
            public string? typeTelEntreprise { get; set; }

            [Required]
            public long? noTelEntreprise { get; set; }

            public long? posteTelEntreprise { get; set; }
    #endregion
    #region contact
        [Required]
        public string? prenomContact { get; set; }

        [Required]
        public string? nomContact { get; set; }

        [Required]
        public string? fonctionContact { get; set; }

        [Required]
        public string? courrielContact { get; set; }

        [Required]
        public string? typeTelContact { get; set; }

        [Required]
        public long? noTelContact { get; set; }

        public long? posteTelContact { get; set; }
    #endregion

    }

public class ApiResponse
{
    public Result? Result { get; set; }
}

public class Result
{
    public List<NEQRecord>? Records { get; set; }
}

public class NEQRecord
{
    [JsonPropertyName("NEQ")]
    public string? NEQ { get; set; }
    [JsonPropertyName("Adresse")]
    public string? Adresse { get; set; }
}
}