@page "/InfoGenerale"
@using System.ComponentModel.DataAnnotations

<EditForm Model="@identificationModel" OnValidSubmit="HandleValidSubmit">
    <h3>Identification</h3>

    <div class="form-group">
        <label for="NEQ">NEQ</label>
        <InputNumber TValue="long?" @bind-Value="identificationModel.NEQ" class="form-control" id="NEQ" aria-placeholder="NEQ Requis"/>
    </div>

    <div class="form-group">
        <label for="nomEntreprise">Nom de l'entreprise</label>
        <InputText id="nomEntreprise" @bind-Value="identificationModel.nomEntreprise" class="form-control" />
    </div>

    <div class="form-group">
        <label for="courrielEntreprise">Courriel de l'entreprise</label>
        <InputText type="email" id="courrielEntreprise" @bind-Value="identificationModel.courrielEntreprise" class="form-control" />
    </div>

    <div class="form-group">
        <label for="MotDePasse">Mot de passe</label>
        <InputText type="password" id="MotDePasse" @bind-Value="identificationModel.MotDePasse" class="form-control" />
    </div>

    <div class="form-group">
        <label for="ConfirmationMotDePasse">Confirmation du mot de passe</label>
        <InputText type="password" id="ConfirmationMotDePasse" @bind-Value="identificationModel.ConfirmationMotDePasse" class="form-control" />
    </div>

    <DataAnnotationsValidator />
    <ValidationSummary />

    <button type="submit">Enregistrer</button>
</EditForm>

    @* <EditForm Model="Model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <button type="submit">Submit</button>
    </EditForm>

    <EditForm Model="Model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <button type="submit">Submit</button>
    </EditForm> *@

@code {
    private IdentificationModel identificationModel = new IdentificationModel();

    public void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }

    public class IdentificationModel
    {
        [Range(1100000000, 8899999999, ErrorMessage = "Le NEQ doit contenir 10 caractères.")]
        public long? NEQ { get; set; }
        
        [Required(ErrorMessage = "Le nom de l'entreprise est requis")]
        [MaxLength(64, ErrorMessage = "Le nom de l'entreprise ne doit pas dépasser 64 caractères.")]
        public string? nomEntreprise { get; set; }

        [Required(ErrorMessage = "Le courriel est requis")]
        [MaxLength(64, ErrorMessage = "Le courriel ne doit pas dépasser 64 caractères.")]
        public string? courrielEntreprise { get; set; }

        [Required(ErrorMessage = "Le mot de passe est requis")]
        [Length(7,12, ErrorMessage = "Le mot de passe doit contenir entre 7 et 12 caractères.")]
        [RegularExpression("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&]).+$", ErrorMessage = "Le mot de passe doit contenir au moins une majuscule, une minuscule, un chiffre, et un caractère spécial (@$!%*?&).")]
        public string? MotDePasse { get; set; }

        [Required(ErrorMessage = "La confirmation du mot de passe est requise.")]
        [Length(7,12, ErrorMessage = "Le mot de passe doit contenir entre 7 et 12 caractères.")]
        [RegularExpression("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&]).+$", ErrorMessage = "Le mot de passe doit contenir au moins une majuscule, une minuscule, un chiffre, et un caractère spécial (@$!%*?&).")]
        [Compare(nameof(MotDePasse), ErrorMessage = "Les mots de passe ne correspondent pas.")]
        public string? ConfirmationMotDePasse { get; set; }
    }
}