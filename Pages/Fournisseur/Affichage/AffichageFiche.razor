@page "/affichage"
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Portail_OptiVille.Data.Models
@using System.Text.RegularExpressions;
@inject A2024420517riGr1Eq6Context _context
<div class="container-fluid card p-0 m-0">
    <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
        <h3 class="py-2 p-0 my-0 text-white">Demande</h3>
        <button type="button" class="btn btn-danger" data-bs-target="#ModalConfirmationDeleteFiche" data-bs-toggle="modal">Supprimer la fiche</button>
        <div class="modal fade" id="ModalConfirmationDeleteFiche" tabindex="-1" aria-labelledby="ModalConfirmationDeleteFiche" aria-hidden="true" data-bs-backdrop="static">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header border-0 text-center w-100">
                                <h1 class="modal-title fs-5 mx-auto" id="ModalConfirmationDeleteFiche">Êtes-vous sûre de vouloir effacer la fiche</h1>
                            </div>
                            <div class="modal-footer border-0 d-flex justify-content-center">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="DeleteFiche">Confirmer</button>
                            </div>
                        </div>
                    </div>
                    </div>
    </div>

    <div class="card-body">
        <ul>
            <li>Demande @(closestHistorique != null ? closestHistorique.EtatDemande : "N/A")</li>
            <li>État @(closestHistorique != null && closestHistorique.DateEtatChanged.HasValue ? closestHistorique.DateEtatChanged.Value.ToString("yyyy-MM-dd") : "N/A")</li>
            <li>Création @(selectedFournisseur.DateCreation.HasValue ? selectedFournisseur.DateCreation.Value.ToString("yyyy-MM-dd") : "N/A")</li>
            <li>Modification @(selectedFournisseur.DateLastChanged.HasValue ? selectedFournisseur.DateLastChanged.Value.ToString("yyyy-MM-dd") : "N/A")</li>
        </ul>
    </div>
    <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
        <h3 class="py-2 p-0 my-0 text-white">Informations générales</h3>
        <button type="button" class="btn btn-warning">Modifier</button>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">NEQ</label>
                <input type="text" class="form-control" id="inputEmail4" value="@selectedFournisseur.Neq">
            </div>
            <div class="col-xl-6 p-1">
                <label for="inputPassword4">Adresse</label>
                <input type="text" class="form-control" id="inputPassword4" value="@selectedFournisseur.NoCivique, @selectedFournisseur.Rue, @selectedFournisseur.Bureau">
            </div>
        </div>
        <div class="row">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">Nom de l'entreprise</label>
                <input type="text" class="form-control" id="inputEmail4" value="@selectedFournisseur.NomEntreprise">
            </div>
            <div class="col-xl-6 p-1">
                <label for="inputPassword4"></label>
                <input type="text" class="form-control" id="inputPassword4" value="@selectedFournisseur.Ville, @selectedFournisseur.Province, @selectedFournisseur.CodePostal">
            </div>
        </div>
        <div class="row">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">Adresse courriel</label>
                <input type="text" class="form-control" id="inputEmail4" value="@selectedFournisseur.AdresseCourriel">
            </div>
            <div class="col-xl-6 p-1">
                <label for="inputPassword4">Site Web</label>
                <input type="text" class="form-control" id="inputPassword4" value="@selectedFournisseur.SiteInternet">
            </div>
        </div>
        <div class="row">
            @foreach(var telephone in selectedTelephones)
            {
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">Numéro de téléphone (@telephone.Type)</label>
                <input type="text" class="form-control" id="inputEmail4" value="@($"{telephone.NumTelephone.Insert(3, "-").Insert(7, "-")} #{telephone.Poste}")">
            </div>

            }
        </div>
    </div>
    <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
        <h3 class="py-2 p-0 my-0 text-white">Contacts</h3>
        <button type="button" class="btn btn-warning">Modifier</button>
    </div>
    <div class="card-body">
        @foreach(var contact in selectedContacts)
        {
        <div class="row">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">Nom, Prénom</label>
                <input type="text" class="form-control" id="inputEmail4" value="@contact.Nom, @contact.Prenom">
            </div>
            <div class="col-xl-6 p-1">
                <label for="inputPassword4">Fonction</label>
                <input type="text" class="form-control" id="inputPassword4" value="@contact.Fonction">
            </div>
        </div>
        <div class="row">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">Adresse courriel</label>
                <input type="text" class="form-control" id="inputEmail4" value="@contact.AdresseCourriel">
            </div>
            <div class="col-xl-6 p-1">
                <label for="inputPassword4">Numéro de téléphone (@contact.TypeTelephone)</label>
                <input type="text" class="form-control" id="inputPassword4" value="@contact.Telephone.Insert(3, "-").Insert(7, "-") #@contact.Poste">
            </div>
        </div>
        }
    </div>
    <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
        <h3 class="py-2 p-0 my-0 text-white">Produits et services</h3>
        <button type="button" class="btn btn-warning">Modifier</button>
    </div>
    <div class="card-body">
        <div class="row h-100">
            <div class="col-xl-6">
                @if (groupedServices != null && groupedServices.Count > 0)
                {
                    string currentCategory = null;
                    string currentNature = null;

                    foreach (var group in groupedServices)
                    {
                        if (currentCategory != group.Key.CodeCategorie || currentNature != group.Key.Nature)
                        {
                            // Ajoute une line si ce n'est pas le premier groupe
                            if (currentCategory != null)
                            {
                                <hr />
                            }
                            <div>
                                <strong>@group.Key.CodeCategorie - @group.Key.Nature</strong>
                            </div>
                            currentCategory = group.Key.CodeCategorie;
                            currentNature = group.Key.Nature;
                        }
                        foreach (var produitservice in group)
                        {
                            <p>@produitservice.CodeUnspsc - @produitservice.Description</p>
                        }
                    }
                }


            </div>
            <div class="col-xl-6 d-flex flex-column">
                <label for="TextAreaProduitService" class="form-label">Détails et spécifications</label>
                <textarea class="form-control flex-grow-1" id="TextAreaProduitService" style="resize: none;">@selectedFournisseur.Details</textarea>
            </div>
        </div>
        
    </div>
    <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
        <h3 class="py-2 p-0 my-0 text-white">Licence RBQ</h3>
        <button type="button" class="btn btn-warning">Modifier</button>
    </div>
    <div class="card-body">
        
        @foreach(var Licencerbq in selectedLicencerbqs)
        {
        <div class="row d-flex align-items-center mb-3">
            <div class="col-xl-4">
                @Licencerbq.Statut 
            </div>
            
            <div class="col-xl-4 d-flex align-items-center">
                <label for="IdLicenceRbq" class="me-2">Numéro</label>
                <input type="text" class="form-control w-auto" id="IdLicenceRbq" value="@Licencerbq.IdLicenceRbq">
            </div>

            <div class="col-xl-4 d-flex align-items-center">
                <label for="TypeLicencerbq" class="me-2">Type de licence</label>
                <input type="text" class="form-control w-auto" id="TypeLicencerbq" value="@Licencerbq.Type">
            </div>
        </div>
        }

        @if (selectedLicencerbqs != null)
        {
            var groupedCategories = GroupCategoriesByType();
            
            <div class="row">
                <div class="col-xl-6 mb-3">
                    <h3>Type: Général</h3>
                    @if (groupedCategories.ContainsKey("Général") && groupedCategories["Général"].Count > 0)
                    {
                        <ul>
                            @foreach (var categorie in groupedCategories["Général"])
                            {
                                <li>Catégorie: @categorie.Nom</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <div class="d-flex justify-content-center align-items-center">
                            <p>Aucune Catégorie</p>
                        </div>
                    }
                </div>
                <div class="col-xl-6 mb-3">
                    <h3>Type: Spécialisé</h3>
                    @if (groupedCategories.ContainsKey("Spécialisé") && groupedCategories["Spécialisé"].Count > 0)
                    {
                        <ul>
                            @foreach (var categorie in groupedCategories["Spécialisé"])
                            {
                                <li>Catégorie: @categorie.Nom</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <div class="d-flex justify-content-center align-items-center">
                            <p>Aucune Catégorie</p>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <p>Chargement...</p>
        }

    </div>
    <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
        <h3 class="py-2 p-0 my-0 text-white">Brochures et cartes d'affaire (Total: @GetFormatSize())</h3>
        <button type="button" class="btn btn-warning">Modifier</button>
    </div>
    <div class="card-body">
        <div class="table-responsive">
        <table class="table border-bleuFonce table-bordered my-0">
            <thead>
                <tr>
                    <th scope="col" class="col-1 texte-bold">Fichier</th>
                    <th scope="col" class="texte-bold">Nom</th>
                    <th scope="col" class="col-1 texte-bold">Taille</th>
                    <th scope="col" class="col-2 texte-bold">Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var file in selectedFichiers)
                {
                    <tr>
                        <th scope="row" class="texte-bold">@(selectedFichiers.IndexOf(file)+1)</th>
                        <td class="texte-light">@file.Nom@file.Type</td>
                        <td class="texte-light">@GetFormatSizeFile(file.Taille)</td>
                        <td><button class="btn btn-danger texte-bold" type="button" data-bs-target="#ModalConfirmation" data-bs-toggle="modal" @onclick="() => OpenConfirmationModal(file)"><i class="bi bi-trash"></i> Effacer</button></td>
                    </tr>
                }
            </tbody>
                    <div class="modal fade" id="ModalConfirmation" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                        <div class="modal-header border-0 text-center w-100">
                            <h1 class="modal-title fs-5 mx-auto" id="exampleModalLabel">Êtes-vous sûre de vouloir effacer ce fichier </h1>
                        </div>
                        <div class="modal-footer border-0 d-flex justify-content-center">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                            <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="()=>OnDeleteFile(selectedFile)">Confirmer</button>
                        </div>
                        </div>
                    </div>
                    </div>
        </table>
</div>
    </div>

    <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
        <h3 class="py-2 p-0 my-0 text-white">Finances</h3>
        <button type="button" class="btn btn-warning">Modifier</button>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">TPS</label>
                <input type="text" class="form-control" id="inputEmail4" value="@selectedFournisseur.NumeroTps">
            </div>
            <div class="col-xl-6 p-1">
                <label for="inputPassword4">TVQ</label>
                <input type="text" class="form-control" id="inputPassword4" value="@selectedFournisseur.NumeroTvq">
            </div>
        </div>
        <div class="row">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">Conditions de paiement</label>
                <input type="text" class="form-control" id="inputEmail4" value="@selectedFournisseur.ConditionPaiement">
            </div>
            <div class="col-xl-6 p-1">
                <label for="inputPassword4">Devise</label>
                <input type="text" class="form-control" id="inputPassword4" value="@selectedFournisseur.Devise">
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">Mode de communication</label>
                <input type="text" class="form-control" id="inputEmail4" value="@selectedFournisseur.ModeCommunication">
            </div>
            
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
@code{
    public int sizeTotal { get; set; } = 0;
    public int MaxSize = 75;
    private Fichier? selectedFile;
    List<Portail_OptiVille.Data.Models.Contact> selectedContacts = new List<Portail_OptiVille.Data.Models.Contact>();
    List<Fichier> selectedFichiers = new List<Fichier>();
    List<Fournisseur> selectedFournisseurs = new List<Fournisseur>();
    List<Historique> selectedHistoriques = new List<Historique>();
    private Historique? closestHistorique;
    List<Licencerbq> selectedLicencerbqs = new List<Licencerbq>();
    List<Produitservice> selectedProduitservices = new List<Produitservice>();
    List<Telephone> selectedTelephones = new List<Telephone>();
    Fournisseur selectedFournisseur = new Fournisseur();
    List<IGrouping<GroupKey, Produitservice>>? groupedServices;

    public class GroupKey
    {
        public string? CodeCategorie { get; set; }
        public string? Nature { get; set; }

        public override bool Equals(object? obj)
        {
            if (obj is GroupKey other)
            {
                return CodeCategorie == other.CodeCategorie && Nature == other.Nature;
            }
            return false;
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(CodeCategorie, Nature);
        }
    }

    private Dictionary<string, List<Categorierbq>> GroupCategoriesByType()
    {
        var groupedCategories = new Dictionary<string, List<Categorierbq>>();

        foreach (var licence in selectedLicencerbqs)
        {
            foreach (var categorie in licence.CodeSousCategories)
            {
                if (!groupedCategories.ContainsKey(categorie.NomCategorie))
                {
                    groupedCategories[categorie.NomCategorie] = new List<Categorierbq>();
                }
                groupedCategories[categorie.NomCategorie].Add(categorie);
            }
        }
        return groupedCategories;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            selectedFournisseurs = await _context.Fournisseurs.Where(c => c.IdFournisseur == 1).ToListAsync();
            selectedContacts = await _context.Contacts.Where(c => c.IdFournisseur == 1).ToListAsync();
            selectedHistoriques = await _context.Historiques.Where(c => c.IdFournisseur == 1).ToListAsync();
            selectedFichiers = await _context.Fichiers.Where(c => c.IdFournisseur == 1).ToListAsync();
            selectedProduitservices = await _context.Produitservices.Where(p => p.IdFournisseurs.Any(f => f.IdFournisseur == 1)).ToListAsync();
            selectedFournisseur = selectedFournisseurs[0];
            selectedTelephones = await _context.Telephones.Where(c => c.IdFournisseur == 1).ToListAsync();
            selectedLicencerbqs = await _context.Licencerbqs.Include(l => l.CodeSousCategories).Where(c => c.IdFournisseur == 1).ToListAsync();
            closestHistorique = selectedHistoriques.Where(h => h.DateEtatChanged.HasValue).OrderBy(h => Math.Abs((h.DateEtatChanged.Value - DateTime.Now).TotalDays)).FirstOrDefault();
            groupedServices = selectedProduitservices.GroupBy(p => new GroupKey 
            { 
                CodeCategorie = p.CodeCategorie, 
                Nature = p.Nature 
            }).ToList(); 
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la récupération des informations: {ex.Message}");
        }
    }

    private string GetFormatSizeFile(int? size)
    {
        if (size >= 1048576)
        {
            return $"{(size / 1048576.0):F2} MB";
        }
        else
        {
            return $"{(size / 1024.0):F2} KB";
        }
    }
 
    private string GetFormatSize()
    {
        sizeTotal = selectedFichiers.Sum(file => (int)(file.Taille.GetValueOrDefault(0)));
        if (sizeTotal >= 1048576) // 1 MB = 1048576 bytes (1 * 1024 * 1024)
        {
            return $"{(sizeTotal / 1048576.0):F2} MB / {MaxSize}MB";
        }
        else
        {
            return $"{(sizeTotal / 1024.0):F2} KB / {MaxSize}MB";
        }
    }

    private void DeleteFiche()
    {
        selectedFichiers.Clear();
        closestHistorique.EtatDemande = "Refusé";
        Console.WriteLine("La fiche a été supprimé");
    }
    private void OpenConfirmationModal(Fichier file)
    {
        selectedFile = file;
    }
    private void OnDeleteFile(Fichier file)
    {
        selectedFichiers.Remove(file);
        GetFormatSize();
    }
}