@page "/affichage"
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Portail_OptiVille.Data.Models
@using System.Text.RegularExpressions;
@inject A2024420517riGr1Eq6Context _context
@using Portail_OptiVille.Data.FormModels
@using Portail_OptiVille.Data.Exceptions
@using Portail_OptiVille.Data.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager navigationManager
@inject FichierService fichierService
@inject HistoriqueService historiqueService
@inject CoordonneeService coordonneeService
@inject IdentificationService identificationService
@inject FinanceService financeService
@inject ProduitServiceService produitServiceService
@inject LicenceRBQService licenceRBQService
@inject ContactsService contactsService
@using Portail_OptiVille.Pages.Fournisseur.Inscription
@inject IJSRuntime JSRuntime
<PageTitle>Fiche Fournisseur</PageTitle>
<div class="container-fluid card p-0 m-0">
    <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
        <h3 class="py-2 p-0 my-0 text-white">Demande</h3>
        <button type="button" class="btn btn-danger" data-bs-target="#ModalConfirmationDeleteFiche" data-bs-toggle="modal">Supprimer la fiche</button>
        <div class="modal fade" id="ModalConfirmationDeleteFiche" tabindex="-1" aria-labelledby="ModalConfirmationDeleteFiche" aria-hidden="true" data-bs-backdrop="static">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header border-0 text-center w-100">
                        <h1 class="modal-title fs-5 mx-auto" id="ModalConfirmationDeleteFiche">Êtes-vous sûre de vouloir effacer la fiche</h1>
                    </div>
                    <div class="modal-footer border-0 d-flex justify-content-center">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="DeleteFiche">Confirmer</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card-body">
        <ul>
            <li>Demande @(closestHistorique != null ? closestHistorique.EtatDemande : "N/A")</li>
            <li>État @(closestHistorique != null && closestHistorique.DateEtatChanged.HasValue ? closestHistorique.DateEtatChanged.Value.ToString("yyyy-MM-dd") : "N/A")</li>
            <li>Création @(selectedFournisseur.DateCreation.HasValue ? selectedFournisseur.DateCreation.Value.ToString("yyyy-MM-dd") : "N/A")</li>
            <li>Modification @(selectedFournisseur.DateLastChanged.HasValue ? selectedFournisseur.DateLastChanged.Value.ToString("yyyy-MM-dd") : "N/A")</li>
        </ul>
        @if(FinanceInfoNull){
        <div class="alert alert-warning alert-dismissible fade show text-center d-flex justify-content-center align-items-center" role="alert">
            <strong>Veuillez entrer vos informations financières! <a href="/affichage#FinanceDest">(Cliquez ici)</a></strong>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        }

    </div>
    <EditForm Model="combinedFormModel" OnValidSubmit="SaveModifcationInfo">
        <DataAnnotationsValidator />
        <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
            <h3 class="py-2 p-0 my-0 text-white">Informations générales</h3>
            @if(modificationInfo)
            {
                <button type="button" class="btn btn-warning" @onclick="ModifcationInfo">Modifier</button>
            }
            else
            {
            <button type="submit" class="btn btn-success">Sauvegarder</button> 
            }
        </div>
        <div class="card-body">
                <div class="row">
                    <div class="col-xl-6 p-1">
                        <label for="inputEmail4">NEQ</label>
                        <input type="text" class="form-control" id="inputEmail4" @bind="@combinedFormModel.IdentificationFormModel.NEQ" readonly="@modificationInfo">
                    </div>
                    <div class="col-xl-6 p-1">
                        <label for="inputEmail4">Nom de l'entreprise</label>
                        <input type="text" class="form-control" id="inputEmail4" @bind="@combinedFormModel.IdentificationFormModel.NomEntreprise" readonly="@modificationInfo">
                    </div>
                </div>
                <div class="row">
                    <div class="col-xl-6 p-1">
                        <label for="inputPassword4">No Civique</label>
                        <input type="text" class="form-control" id="inputPassword4" @bind="@combinedFormModel.CoordonneeFormModel.NoEntreprise" readonly="@modificationInfo">
                    </div>
                    <div class="col-xl-6 p-1">
                        <label for="inputPassword4">Rue</label>
                        <input type="text" class="form-control" id="inputPassword4" @bind="@combinedFormModel.CoordonneeFormModel.RueEntreprise" readonly="@modificationInfo">
                    </div>
                </div>
                <div class="row">
                    <div class="col-xl-6 p-1">
                        <label for="inputPassword4">Bureau</label>
                        <input type="text" class="form-control" id="inputPassword4" @bind="@combinedFormModel.CoordonneeFormModel.BureauEntreprise" readonly="@modificationInfo">
                    </div>
                    <div class="col-xl-6 p-1">
                        <label for="inputPassword4">Code Postal</label>
                        <input type="text" class="form-control" id="inputPassword4" @bind="@combinedFormModel.CoordonneeFormModel.CodePostalEntreprise" readonly="@modificationInfo">
                    </div>
                </div>
                <div class="row">
                    <div class="col-xl-6 p-1">
                        <label for="inputPassword4">Ville</label>
                        <input type="text" class="form-control" id="inputPassword4" @bind="@combinedFormModel.CoordonneeFormModel.VilleEntreprise" readonly="@modificationInfo">
                    </div>
                    <div class="col-xl-6 p-1">
                        <label for="inputPassword4">Province</label>
                        <input type="text" class="form-control" id="inputPassword4" @bind="@combinedFormModel.CoordonneeFormModel.ProvinceEntreprise" readonly="@modificationInfo">
                    </div>
                </div>
                <div class="row">
                    <div class="col-xl-6 p-1">
                        <label for="inputEmail4">Adresse courriel</label>
                        <input type="text" class="form-control" id="inputEmail4" @bind="@combinedFormModel.IdentificationFormModel.CourrielEntreprise" readonly="@modificationInfo">
                    </div>
                    <div class="col-xl-6 p-1">
                        <label for="inputPassword4">Site Web</label>
                        <input type="text" class="form-control" id="inputPassword4" @bind="@combinedFormModel.CoordonneeFormModel.SiteWebEntreprise" readonly="@modificationInfo">
                    </div>
                </div>
            <div class="row">
                
                @foreach(var telephone in combinedFormModel.CoordonneeFormModel.PhoneList!)
                {
                    
                <div class="col-xl-6 p-1">
                        <div class="d-flex align-items-center">
                            <label for="inputPassword4" class="me-2">
                                Numéro de téléphone 
                            </label>
                            <select class="form-select w-auto" id="telephoneType" @bind="@telephone.TypeTelEntreprise" style="@(modificationInfo ? "pointer-events: none; background-color: #ffffff;" : null)">
                                <option value="Bureau">Bureau</option>
                                <option value="Télécopieur">Télécopieur</option>
                                <option value="Cellulaire">Cellulaire</option>
                            </select>
                        </div>
                    <input type="text" class="form-control" id="inputEmail4" @bind="telephone.NoTelEntreprise">
                </div>
                <div class="col-xl-6 p-1">
                        <label for="inputPassword4">Poste</label>
                        <input type="text" class="form-control" id="inputEmail4" @bind="telephone.PosteTelEntreprise">
                    </div>
                }
            </div>
        </div>
    </EditForm>
<EditForm Model="contactHosterFormModel" OnValidSubmit="SaveContact">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
        <h3 class="py-2 p-0 my-0 text-white">Contacts</h3>
        @if (modificationContact)
        {
            <button type="button" class="btn btn-warning" @onclick="ModificationContact">Modifier</button>
        }
        else
        {
            <button type="submit" class="btn btn-success">Sauvegarder</button> 
        }
    </div>

    <div class="card-body">
        @for (int i = 0; i < contactHosterFormModel.ContactList!.Count; i++)
        {
            var contact = contactHosterFormModel.ContactList[i]; // Access each contact

            <div class="row">
                <div class="col-xl-6 p-1">
                    <label for="prenomInput">Prénom</label>
                    <InputText id="prenomInput" class="form-control" @bind-Value="contact.Prenom" />
                    <ValidationMessage For="@(() => contact.Prenom)" />
                </div>
                <div class="col-xl-6 p-1">
                    <label for="nomInput">Nom</label>
                    <InputText id="nomInput" class="form-control" @bind-Value="contact.Nom" />
                    <ValidationMessage For="@(() => contact.Nom)" />
                </div>
            </div>
            <div class="row">
                <div class="col-xl-6 p-1">
                    <label for="fonctionInput">Fonction</label>
                    <InputText id="fonctionInput" class="form-control" @bind-Value="contact.Fonction" />
                    <ValidationMessage For="@(() => contact.Fonction)" />
                </div>
                <div class="col-xl-6 p-1">
                    <label for="courrielInput">Adresse courriel</label>
                    <InputText id="courrielInput" class="form-control" @bind-Value="contact.AdresseCourriel" />
                    <ValidationMessage For="@(() => contact.AdresseCourriel)" />
                </div>
            </div>
            <div class="row">
                <div class="col-xl-6 p-1">
                    <div class="d-flex align-items-center">
                        <label for="telephoneType" class="me-2">Numéro de téléphone</label>
                        <InputSelect id="telephoneType" class="form-select w-auto" @bind-Value="contact.TypeTelephone" style="@(modificationContact ? "pointer-events: none; background-color: #ffffff;" : null)">
                            <option value="Bureau">Bureau</option>
                            <option value="Télécopieur">Télécopieur</option>
                            <option value="Cellulaire">Cellulaire</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => contact.TypeTelephone)" />
                    </div>
                    <InputText id="telephoneInput" class="form-control" @bind-Value="contact.Telephone" />
                    <ValidationMessage For="@(() => contact.Telephone)" />
                </div>
                <div class="col-xl-6 p-1">
                    <label for="posteInput">Poste</label>
                    <InputText id="posteInput" class="form-control" @bind-Value="contact.Poste" />
                    <ValidationMessage For="@(() => contact.Poste)" />
                </div>
            </div>

            @if (i < contactHosterFormModel.ContactList.Count - 1)
            {
                <hr />
            }
        }
    </div>
</EditForm>


    <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
        <h3 class="py-2 p-0 my-0 text-white">Produits et services</h3>
        <button type="button" class="btn btn-warning" onclick="showModal('exampleModal')">Modifier</button>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="modal fade" tabindex="-1" role="dialog" id="exampleModal" data-bs-backdrop="static">
                <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-xl">
                    <div class="modal-content">
                        <div class="modal-body">
                                <ProduitsServices AssignReference="AssignReferenceProduitsServices" AllProduitServices="allProduitService" ProduitServiceFormModel="produitServiceFormModel" CategorieUNSPSC="categorieUNSPSC"></ProduitsServices>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary" @onclick="SaveModifcationProduitServices">Sauvegarder</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="row h-100">
            <div class="col-xl-6">
                @if (groupedServices != null && groupedServices.Count > 0)
                {
                    string currentCategory = null;
                    string currentNature = null;

                    foreach (var group in groupedServices)
                    {
                        if (currentCategory != group.Key.CodeCategorie || currentNature != group.Key.Nature)
                        {
                            // Ajoute une line si ce n'est pas le premier groupe
                            if (currentCategory != null)
                            {
                                <hr />
                            }
                            <div>
                                <strong>@group.Key.CodeCategorie - @group.Key.Nature</strong>
                            </div>
                            currentCategory = group.Key.CodeCategorie;
                            currentNature = group.Key.Nature;
                        }
                        foreach (var produitservice in group)
                        {
                            <p>@produitservice.CodeUnspsc - @produitservice.Description</p>
                        }
                    }
                }


            </div>
            <div class="col-xl-6 d-flex flex-column">
                <label for="TextAreaProduitService" class="form-label">Détails et spécifications</label>
                <textarea class="form-control flex-grow-1" id="TextAreaProduitService" style="resize: none;">@selectedFournisseur.DetailSpecification</textarea>
            </div>
        </div>
        
    </div>
    <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
        <h3 class="py-2 p-0 my-0 text-white">Licence RBQ</h3>
        <button type="button" class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#ModifierModalLicence">Modifier</button>
        @*LicenceRBQInfoNull*@
    </div>
    <div class="card-body">
        <div class="row">
            <div class="modal fade" id="ModifierModalLicence" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-xl">
                    <div class="modal-content">
                        <div class="modal-body">
                                <LicenceRBQ AssignReference="AssignReferenceLicenceRBQ" LicenceRBQFormModel="licenceRBQFormModel" AllCategories="allCategories"></LicenceRBQ>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary" @onclick="SaveModifcationLicenceRBQ">Sauvegarder</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="card-body">
        

        <div class="row d-flex align-items-center mb-3">
            <div class="col-xl-4">
                @licencerbqs.Statut 
            </div>
            
            <div class="col-xl-4 d-flex align-items-center">
                <label for="IdLicenceRbq" class="me-2">Numéro</label>
                <input type="text" class="form-control w-auto" id="IdLicenceRbq" value="@licencerbqs.IdLicenceRbq">
            </div>

            <div class="col-xl-4 d-flex align-items-center">
                <label for="TypeLicencerbq" class="me-2">Type de licence</label>
                <input type="text" class="form-control w-auto" id="TypeLicencerbq" value="@licencerbqs.Type">
            </div>
        </div>
        

        @if (selectedCategorieRBQ != null)
        {
            var groupedCategories = GroupCategoriesByType();
                
            <div class="row">
                <div class="col-xl-6 mb-3">
                    <h3>Type: Général</h3>
                    @if (groupedCategories.ContainsKey("Général") && groupedCategories["Général"].Count > 0)
                    {
                        <ul>
                            @foreach (var categorie in groupedCategories["Général"])
                            {
                                <li>@categorie.CodeSousCategorie - @categorie.TravauxPermis</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <div class="d-flex justify-content-center align-items-center">
                            <p>Aucune Catégorie</p>
                        </div>
                    }
                </div>
                <div class="col-xl-6 mb-3">
                    <h3>Type: Spécialisé</h3>
                    @if (groupedCategories.ContainsKey("Spécialisé") && groupedCategories["Spécialisé"].Count > 0)
                    {
                        <ul>
                            @foreach (var categorie in groupedCategories["Spécialisé"])
                            {
                                <li>@categorie.CodeSousCategorie - @categorie.TravauxPermis</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <div class="d-flex justify-content-center align-items-center">
                            <p>Aucune Catégorie</p>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <p>Chargement...</p>
        }

    </div>
    <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
        <h3 class="py-2 p-0 my-0 text-white">Brochures et cartes d'affaire (Total: @GetFormatSize())</h3>
        <button type="button" class="btn btn-warning">Modifier</button>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table border-bleuFonce table-bordered my-0">
                <thead>
                    <tr>
                        <th scope="col" class="col-1 texte-bold">Fichier</th>
                        <th scope="col" class="texte-bold">Nom</th>
                        <th scope="col" class="col-1 texte-bold">Taille</th>
                        <th scope="col" class="col-2 texte-bold">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var file in selectedFichiers)
                    {
                        <tr>
                            <th scope="row" class="texte-bold">@(selectedFichiers.IndexOf(file)+1)</th>
                            <td class="texte-light">@file.Nom</td>
                            <td class="texte-light">@GetFormatSizeFile(file.Taille)</td>
                            <td><button class="btn btn-danger texte-bold" type="button" data-bs-target="#ModalConfirmation" data-bs-toggle="modal" @onclick="() => OpenConfirmationModal(file)"><i class="bi bi-trash"></i> Effacer</button></td>
                        </tr>
                    }
                </tbody>
                    <div class="modal fade" id="ModalConfirmation" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content">
                                <div class="modal-header border-0 text-center w-100">
                                    <h1 class="modal-title fs-5 mx-auto" id="exampleModalLabel">Êtes-vous sûre de vouloir effacer ce fichier </h1>
                                </div>
                                <div class="modal-footer border-0 d-flex justify-content-center">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="()=>OnDeleteFile(selectedFile)">Confirmer</button>
                                </div>
                            </div>
                        </div>
                    </div>
            </table>
        </div>
    </div>
    @if(financeFormModel != null){
        // Mettre que si on doit ajouter nos finances show alert a la place et voir si sa crash pas 
    <EditForm Model="financeFormModel" OnValidSubmit="SaveModifcationInfo">
        <DataAnnotationsValidator />
        <div class="card" id="FinanceDest">
            <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
                <h3 class="py-2 p-0 my-0 text-white">Finances</h3>
                @if(modificationFinances)
                {
                    <button type="button" class="btn btn-warning" @onclick="ModifcationFinances">Modifier</button>
                }
                else
                {
                <button type="submit" class="btn btn-success">Sauvegarder</button> 
                }
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-xl-6 p-1">
                        <label for="inputTPS">TPS</label>
                        <input type="text" class="form-control" id="inputTPS" @bind="@financeFormModel.NumeroTps" readonly="@modificationFinances">
                    </div>
                    <div class="col-xl-6 p-1">
                        <label for="inputTVQ">TVQ</label>
                        <input type="text" class="form-control" id="inputTVQ" @bind="@financeFormModel.NumeroTvq" readonly="@modificationFinances">
                    </div>
                </div>
                <div class="row">
                    <div class="col-xl-6 p-1">
                        <label for="inputCondPaiement">Conditions de paiement</label>
                        <input type="text" class="form-control" id="inputCondPaiement" @bind="@financeFormModel.ConditionPaiement" readonly="@modificationFinances">
                    </div>
                    <div class="col-xl-6 p-1">
                        <label for="inputDevise">Devise</label>
                        <select class="form-select" id="inputDevise" @bind="@financeFormModel.Devise" 
                                style="@(modificationFinances ? "pointer-events: none; background-color: #ffffff;" : null)">
                            <option value="CAD">CAD</option>
                            <option value="USD">USD</option>
                        </select>
                    </div>
                </div>
                <div class="row justify-content-center">
                    <div class="col-xl-6 p-1">
                        <label for="inputModeComm">Mode de communication</label>
                        <select class="form-select" id="inputModeComm" @bind="@financeFormModel.ModeCommunication" 
                                style="@(modificationFinances ? "pointer-events: none; background-color: #ffffff;" : null)">
                            <option value="Courriel">Courriel</option>
                            <option value="Courrier régulier">Courrier régulier</option>
                        </select>
                    </div>
                    
                </div>
            </div>
        </div>
    </EditForm>
    }
    
</div>

<script src="@popperScript"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>
<script>
    function hideModal(modalId) {
        var modalElement = document.getElementById(modalId);
        if (modalElement) {
            var modal = bootstrap.Modal.getInstance(modalElement); // Get instance
            if (modal) {
                modal.hide(); // Hide the modal
            }
        }
    }
    function showModal(modalId) {
        var modalElement = document.getElementById(modalId);
        if (modalElement) {
            // Set up the modal hidden event listener
            modalElement.addEventListener('hidden.bs.modal', function () {
                var backdropElement = document.querySelector('.modal-backdrop');
                if (backdropElement) {
                    backdropElement.remove(); // Remove the backdrop
                }
            });
            // Now show the modal
            var modal = new bootstrap.Modal(modalElement);
            modal.show();
        }
    }
</script>
@code{
    private static int FournisseurID = 63;
    private bool modificationFinances = true;
    private string popperScript = "https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js";
    private bool modificationInfo = true;
    private bool FinanceInfoNull = false;
    private bool LicenceRBQInfoNull = false;
    private bool modificationContact = true;
    public int sizeTotal { get; set; } = 0;
    private CombinedFormModel combinedFormModel = new CombinedFormModel();
    private FinanceFormModel financeFormModel = new FinanceFormModel();
    private ContactHosterFormModel contactHosterFormModel = new ContactHosterFormModel();
    Produitservice produitService = new Produitservice();
    public int MaxSize = 75;
    private Fichier? selectedFile;
    List<Portail_OptiVille.Data.Models.Contact> selectedContacts = new List<Portail_OptiVille.Data.Models.Contact>();
    List<Fichier> selectedFichiers = new List<Fichier>();
    List<Historique> selectedHistoriques = new List<Historique>();
    private Historique? closestHistorique;
    List<Licencerbq> selectedLicencerbqs = new List<Licencerbq>();
    List<Coordonnee> selectedCoordonnes = new List<Coordonnee>();
    List<Telephone> selectedTelephones = new List<Telephone>();
    List<Telephone> selectedTelephonesContacts = new List<Telephone>();
    Fournisseur selectedFournisseur = new Fournisseur();
    Identification identification = new Identification();
    List<Categorierbq> selectedCategorieRBQ = new List<Categorierbq>();
    Finance finance = new Finance();
    Coordonnee coordonnee = new Coordonnee();
    Licencerbq licencerbqs = new Licencerbq();
    List<ContactPhoneInfo> contactPhoneInfo = new List<ContactPhoneInfo>();

    private List<Categorierbq> allCategories = new List<Categorierbq>();
    private List<Categorierbq> allCategoriesForm = new List<Categorierbq>();
    private LicenceRBQFormModel licenceRBQFormModel = new LicenceRBQFormModel();
    private LicenceRBQ LicenceRBQRef;   
    private Action<LicenceRBQ> AssignReferenceLicenceRBQ => (licenceRBQ) => LicenceRBQRef = licenceRBQ;
    List<IGrouping<GroupKey, Produitservice>>? groupedServices;
    private Dictionary<string, bool> selectedCurrentCategorieRBQ = new Dictionary<string, bool>();
    public class CombinedFormModel
    {
        public CoordonneeFormModel CoordonneeFormModel { get; set; }
        public IdenticationFormModel IdentificationFormModel { get; set; }

        public void FillData(Coordonnee coordonnee, Identification identification, List<Telephone> telephones)
        {
            CoordonneeFormModel.IdCoordonnee = coordonnee.IdCoordonnee;
            CoordonneeFormModel.NoEntreprise = coordonnee.NoCivique;
            CoordonneeFormModel.RueEntreprise = coordonnee.Rue;
            CoordonneeFormModel.BureauEntreprise = coordonnee.Bureau;
            CoordonneeFormModel.VilleEntreprise = coordonnee.Ville;
            CoordonneeFormModel.ProvinceEntreprise = coordonnee.Province;
            CoordonneeFormModel.CodePostalEntreprise = coordonnee.CodePostal;
            CoordonneeFormModel.RegionAdmEntreprise = coordonnee.RegionAdministrative;
            CoordonneeFormModel.SiteWebEntreprise = coordonnee.SiteInternet;
            CoordonneeFormModel.PhoneList = telephones.Select(t => new TelephoneFormModel
            {
                IdTelephone = t.IdTelephone,
                NoTelEntreprise = t.NumTelephone,
                TypeTelEntreprise = t.Type,
                PosteTelEntreprise = t.Poste
            }).ToList();
            IdentificationFormModel.IdIdentification = identification.IdIdentification;
            IdentificationFormModel.NEQ = identification.Neq;
            IdentificationFormModel.NomEntreprise = identification.NomEntreprise;
            IdentificationFormModel.CourrielEntreprise = identification.AdresseCourriel;
            IdentificationFormModel.MotDePasse = identification.MotDePasse;
        }
        public CombinedFormModel()
        {
            CoordonneeFormModel = new CoordonneeFormModel();
            IdentificationFormModel = new IdenticationFormModel();
        }
    }

    private void ModifcationFinances()
    {
        modificationFinances = false;
    }
    private void ModificationContact()
    {
        modificationContact = false;
    }

    private void ModifcationInfo()
    {
        modificationInfo = false;
    }

    private async Task SaveModifcationLicenceRBQ()
    {
        // A Ajouter
        await licenceRBQService.SaveLicenceRBQData(licenceRBQFormModel);
        // Y'a un monde ou sa marche du premier coup pcq moi = genie 
    }
    private async Task SaveModifcationProduitServices()
    {
        await produitServiceService.UpdateProduitServiceData(produitServiceFormModel, selectedFournisseur.IdFournisseur);

        selectedProduitservices = allProduitService
        .Where(p => produitServiceFormModel.SousProduitSelected.ContainsKey(p.CodeUnspsc) &&
                    produitServiceFormModel.SousProduitSelected[p.CodeUnspsc])
        .ToList();
        GetGroupProduitService();
        await JSRuntime.InvokeVoidAsync("hideModal", "exampleModal");
    }

    private async Task SaveModifcationFinances()
    {
        await financeService.UpdateFinanceData(financeFormModel, selectedFournisseur.IdFournisseur);

        modificationFinances = true;
    }
    private async Task SaveContact()
    {
        await contactsService.UpdateContactsData(contactHosterFormModel);

        modificationContact = true;
    }
    private async Task SaveModifcationInfo()
    {
        await identificationService.UpdateIdentificationData(combinedFormModel.IdentificationFormModel);
        await coordonneeService.UpdateCoordonneeData(combinedFormModel.CoordonneeFormModel);

        modificationInfo = true;
    }
    public class GroupKey
    {
        public string? CodeCategorie { get; set; }
        public string? Nature { get; set; }

        public override bool Equals(object? obj)
        {
            if (obj is GroupKey other)
            {
                return CodeCategorie == other.CodeCategorie && Nature == other.Nature;
            }
            return false;
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(CodeCategorie, Nature);
        }
    }

    private Dictionary<string, List<Categorierbq>> GroupCategoriesByType()
    {
        var groupedCategories = new Dictionary<string, List<Categorierbq>>();

        foreach (var categorie in selectedCategorieRBQ)
        {
            if (!groupedCategories.ContainsKey(categorie.NomCategorie!))
            {
                groupedCategories[categorie.NomCategorie!] = new List<Categorierbq>();
            }
            groupedCategories[categorie.NomCategorie!].Add(categorie);
        }

        return groupedCategories;
    }


    @* protected override async Task OnAfterRenderAsync(bool firstRender){
        try{
            var result = await ProtectedSessionStore.GetAsync<string>("Email");
            if (!result.Success || string.IsNullOrEmpty(result.Value))
            {
                throw new UserNotAuthenticatedException("Employé non connecté ou session expirée.");
            }
        }catch(UserNotAuthenticatedException ex)
        {
            Console.WriteLine($"Erreur lors de la récupération de l'adresse courriel: {ex.Message}");
            //navigationManager.NavigateTo("/Connexion",true);
        }

    } *@
    public class ContactPhoneInfo
    {
        public Contact Contact { get; set; }
        public List<Telephone> PhoneNumbers { get; set; }
    }
    private ProduitServiceFormModel produitServiceFormModel = new ProduitServiceFormModel();
    private List<Produitservice> allProduitService = new List<Produitservice>();
    private List<Produitservice>? selectedProduitservices = new List<Produitservice>();
    private List<Categorieunspsc> categorieUNSPSC = new List<Categorieunspsc>();
    private List<string> AllCodeSousCategorie = new List<string>();
    private ProduitsServices produitServiceRef;    
    List<string>? fournisseurProduitIds = new List<string>();
    private Action<ProduitsServices> AssignReferenceProduitsServices => (produitsServices) => produitServiceRef = produitsServices;

    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            selectedFournisseur = await _context.Fournisseurs.FindAsync(FournisseurID);
            selectedContacts = await _context.Contacts.Where(c => c.Fournisseur == selectedFournisseur.IdFournisseur).ToListAsync();

            foreach (var contact in selectedContacts)
            {
                var phoneNumber = await _context.Telephones.Where(t => t.Contact == contact.IdContact).FirstAsync();

                var contactFormModel = new ContactFormModel
                {
                    IdContact = contact.IdContact,
                    Prenom = contact.Prenom,
                    Nom = contact.Nom,
                    Fonction = contact.Fonction,
                    AdresseCourriel = contact.AdresseCourriel,
                    TypeTelephone = phoneNumber.Type, 
                    Telephone = phoneNumber.NumTelephone,
                    Poste = phoneNumber.Poste
                };
                contactHosterFormModel.ContactList.Add(contactFormModel);
            }

            coordonnee = await _context.Coordonnees.SingleAsync(c => c.Fournisseur == selectedFournisseur.IdFournisseur);
            selectedTelephones = await _context.Telephones.Where(t => t.Coordonnee == coordonnee.IdCoordonnee).ToListAsync();
            try
            {
                finance = await _context.Finances.SingleAsync(c => c.Fournisseur == selectedFournisseur.IdFournisseur);
                financeFormModel.FillData(finance);
                if(finance == null)
                {
                    FinanceInfoNull = true;
                }
            }
            catch(Exception ex)
            {
                Console.WriteLine($"Erreur lors de la récupération des informations: {ex.Message}"); 
            }
            identification = await _context.Identifications.SingleAsync(c => c.Fournisseur == selectedFournisseur.IdFournisseur);
            selectedFichiers = await _context.Fichiers.Where(c => c.Fournisseur == selectedFournisseur.IdFournisseur).ToListAsync();
            selectedHistoriques = await _context.Historiques.Where(c => c.Fournisseur == FournisseurID).ToListAsync();
            closestHistorique = selectedHistoriques.Where(h => h.DateEtatChanged.HasValue).OrderBy(h => Math.Abs((h.DateEtatChanged.Value - DateTime.UtcNow).TotalDays)).FirstOrDefault();
            //closestHistorique = await _context.Historiques.Where(h => h.Fournisseur == selectedFournisseur.IdFournisseur && h.DateEtatChanged.HasValue).OrderBy(h => Math.Abs((h.DateEtatChanged.Value - DateTime.UtcNow).TotalDays)).FirstOrDefaultAsync();
            if(identification.Neq != null)
            {
                licencerbqs = await _context.Licencerbqs.SingleAsync(c => c.Fournisseur == selectedFournisseur.IdFournisseur);
                selectedCategorieRBQ = await _context.Categorierbqs.Where(c => c.IdLicenceRbqs.Any(l => l.IdLicenceRbq == licencerbqs.IdLicenceRbq)).ToListAsync();
                foreach(var item in selectedCategorieRBQ)
                {
                    selectedCurrentCategorieRBQ.Add(item.CodeSousCategorie,true);

                }
                selectedLicencerbqs = await _context.Licencerbqs.Where(l => l.Fournisseur == selectedFournisseur.IdFournisseur).Include(l => l.IdCategorieRbqs).ToListAsync();
                allCategoriesForm = await _context.Categorierbqs.ToListAsync();
                selectedCurrentCategorieRBQ = allCategoriesForm.ToDictionary(c => c.CodeSousCategorie, c => false);
            
                allCategories = await _context.Categorierbqs.ToListAsync(); 
                foreach(var categorie in allCategoriesForm)
                {
                    AllCodeSousCategorie.Add(categorie.CodeSousCategorie);
                }
                licenceRBQFormModel = new LicenceRBQFormModel
                {
                    NumeroLicence = licencerbqs.IdLicenceRbq,
                    StatutLicence = licencerbqs.Statut,
                    TypeLicence = licencerbqs.Type,
                    CodeSousCategorie = AllCodeSousCategorie,
                    SousCategoSelected = allCategories.ToDictionary(c => c.CodeSousCategorie, c => false)
                };
                foreach(var item in selectedCurrentCategorieRBQ)
                {
                    foreach(var cate in selectedCategorieRBQ)
                    {
                        if (cate.CodeSousCategorie == item.Key)
                        {
                            licenceRBQFormModel.SousCategoSelected[item.Key] = true;
                        }
                    }
                }

                if(licencerbqs == null && selectedCategorieRBQ == null)
                {
                    LicenceRBQInfoNull = true;
                }
            }
                //allCategories = await _context.Categorierbqs.ToListAsync();
            Console.WriteLine("allCategoriesRBQ.count:" + allCategories.Count);
            fournisseurProduitIds = await _context.Database
            .SqlQueryRaw<string>(@"
                SELECT idProduitService 
                FROM FournisseurProduitService 
                WHERE idFournisseur = {0}", selectedFournisseur.IdFournisseur)
            .ToListAsync();
            produitServiceFormModel = new ProduitServiceFormModel
            {
                Message = selectedFournisseur.DetailSpecification
            };
            allProduitService = await _context.Produitservices.ToListAsync();
            Console.WriteLine($"allProduitService count in parent: {allProduitService.Count}");
            if (allProduitService != null && allProduitService.Any())
            {
                produitServiceFormModel.SousProduitSelected = allProduitService.ToDictionary(c => c.CodeUnspsc, c => false);
            }
            categorieUNSPSC = await _context.Categorieunspscs.ToListAsync();

            selectedProduitservices = await _context.Produitservices
                .Where(p => fournisseurProduitIds.Contains(p.CodeUnspsc))
                .ToListAsync();
            foreach(var item in selectedProduitservices)
            {
                if (produitServiceFormModel.SousProduitSelected.ContainsKey(item.CodeUnspsc))
                {
                    produitServiceFormModel.SousProduitSelected[item.CodeUnspsc] = true;
                }
            }
            GetGroupProduitService();

            combinedFormModel.FillData(coordonnee, identification, selectedTelephones);
            Console.WriteLine("Fin Fetch Data");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la récupération des informations(Fetch Crash): {ex.Message}");
        }
    }

    private void GetGroupProduitService()
    {
        groupedServices = selectedProduitservices.GroupBy(p => new GroupKey 
            { 
                CodeCategorie = p.CategorieUnspsc, 
                Nature = p.Nature 
            }).ToList(); 
    }
    private string GetFormatSizeFile(int? size)
    {
        if (size >= 1048576)
        {
            return $"{(size / 1048576.0):F2} MB";
        }
        else
        {
            return $"{(size / 1024.0):F2} KB";
        }
    }
 
    private string GetFormatSize()
    {
        sizeTotal = selectedFichiers.Sum(file => (int)(file.Taille.GetValueOrDefault(0)));
        if (sizeTotal >= 1048576) // 1 MB = 1048576 bytes (1 * 1024 * 1024)
        {
            return $"{(sizeTotal / 1048576.0):F2} MB / {MaxSize}MB";
        }
        else
        {
            return $"{(sizeTotal / 1024.0):F2} KB / {MaxSize}MB";
        }
    }

    private async Task ChangementDemande()
    {
        if(closestHistorique.EtatDemande == "Refusé")
        {
            var newHistorique = new Historique
            {
                EtatDemande = "En attente",
                DateEtatChanged = DateTime.UtcNow,
                Fournisseur = closestHistorique.Fournisseur
            };
            _context.Historiques.Add(newHistorique);
            closestHistorique.EtatDemande = "En attente";
            closestHistorique.DateEtatChanged = DateTime.UtcNow;
            await _context.SaveChangesAsync();
        }
    }
    private async Task DeleteFiche()
    {
        await historiqueService.AddHistoriqueRefuser(selectedFournisseur.IdFournisseur, "Vous avez supprimé votre fiche");//A mettre un message que l'admin peut changer
        await fichierService.DeleteAllFichiersData(selectedFichiers);
        //closestHistorique.EtatDemande = "Refusé";
        //closestHistorique.DateEtatChanged = DateTime.UtcNow;
        selectedFichiers.Clear();// A enlever si on peut changer les donnnes sans refresh la page
    }
    private void OpenConfirmationModal(Fichier file)
    {
        selectedFile = file;
    }
    private async Task OnDeleteFile(Fichier file)
    {
        await fichierService.DeleteOneFichierData(file);
        selectedFichiers.Remove(file);// A enlever si on peut changer les donnnes sans refresh la page
        GetFormatSize();
    }
}