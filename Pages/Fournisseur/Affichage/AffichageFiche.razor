@page "/affichage"
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Portail_OptiVille.Data.Models
@using System.Text.RegularExpressions;
@inject A2024420517riGr1Eq6Context _context
@using Portail_OptiVille.Data.FormModels
@using Portail_OptiVille.Data.Exceptions
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager navigationManager

<div class="container-fluid card p-0 m-0">
    <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
        <h3 class="py-2 p-0 my-0 text-white">Demande</h3>
        <button type="button" class="btn btn-danger" data-bs-target="#ModalConfirmationDeleteFiche" data-bs-toggle="modal">Supprimer la fiche</button>
        <div class="modal fade" id="ModalConfirmationDeleteFiche" tabindex="-1" aria-labelledby="ModalConfirmationDeleteFiche" aria-hidden="true" data-bs-backdrop="static">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header border-0 text-center w-100">
                        <h1 class="modal-title fs-5 mx-auto" id="ModalConfirmationDeleteFiche">Êtes-vous sûre de vouloir effacer la fiche</h1>
                    </div>
                    <div class="modal-footer border-0 d-flex justify-content-center">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="DeleteFiche">Confirmer</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card-body">
        <ul>
            <li>Demande @(closestHistorique != null ? closestHistorique.EtatDemande : "N/A")</li>
            <li>État @(closestHistorique != null && closestHistorique.DateEtatChanged.HasValue ? closestHistorique.DateEtatChanged.Value.ToString("yyyy-MM-dd") : "N/A")</li>
            <li>Création @(selectedFournisseur.DateCreation.HasValue ? selectedFournisseur.DateCreation.Value.ToString("yyyy-MM-dd") : "N/A")</li>
            <li>Modification @(selectedFournisseur.DateLastChanged.HasValue ? selectedFournisseur.DateLastChanged.Value.ToString("yyyy-MM-dd") : "N/A")</li>
        </ul>
    </div>
    <EditForm Model="combinedFormModel" OnValidSubmit="SaveModifcationInfo">
        <DataAnnotationsValidator />
        <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
            <h3 class="py-2 p-0 my-0 text-white">Informations générales</h3>
            @if(modificationInfo)
            {
                <button type="button" class="btn btn-warning" @onclick="ModifcationInfo">Modifier</button>
            }
            else
            {
            <button type="button" class="btn btn-success" @onclick="SaveModifcationInfo">Sauvegarder</button> 
            }
        </div>
        <div class="card-body">
                <div class="row">

                    <div class="col-xl-6 p-1">
                        <label for="inputEmail4">NEQ</label>
                        <input type="text" class="form-control" id="inputEmail4" @bind="@combinedFormModel.IdentificationFormModel.NEQ" readonly="@modificationInfo">
                    </div>
                    <div class="col-xl-6 p-1">
                        <label for="inputPassword4">Adresse</label>
                        <input type="text" class="form-control" id="inputPassword4" @bind="@combinedFormModel.FournisseurFormModel.FullAddressPart1" readonly="@modificationInfo">
                    </div>
                </div>
                <div class="row">
                    <div class="col-xl-6 p-1">
                        <label for="inputEmail4">Nom de l'entreprise</label>
                        <input type="text" class="form-control" id="inputEmail4" @bind="@combinedFormModel.IdentificationFormModel.NomEntreprise" readonly="@modificationInfo">
                    </div>
                    <div class="col-xl-6 p-1">
                        <label for="inputPassword4"></label>
                        <input type="text" class="form-control" id="inputPassword4" @bind="@combinedFormModel.FournisseurFormModel.FullAddressPart2" readonly="@modificationInfo">
                    </div>
                </div>
                <div class="row">
                    <div class="col-xl-6 p-1">
                        <label for="inputEmail4">Adresse courriel</label>
                        <input type="text" class="form-control" id="inputEmail4" @bind="@combinedFormModel.IdentificationFormModel.CourrielEntreprise" readonly="@modificationInfo">
                    </div>
                    <div class="col-xl-6 p-1">
                        <label for="inputPassword4">Site Web</label>
                        <input type="text" class="form-control" id="inputPassword4" @bind="@combinedFormModel.FournisseurFormModel.SiteWebEntreprise" readonly="@modificationInfo">
                    </div>
                </div>
            <div class="row">
                @foreach(var telephone in selectedTelephones)
                {
                <div class="col-xl-6 p-1">
                    <label for="inputEmail4">Numéro de téléphone (@telephone.Type)</label>
                    <input type="text" class="form-control" id="inputEmail4" value="@($"{telephone.NumTelephone.Insert(3, "-").Insert(7, "-")} #{telephone.Poste}")">
                </div>

                }
            </div>
        </div>
    </EditForm>
    <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
        <h3 class="py-2 p-0 my-0 text-white">Contacts</h3>
        <button type="button" class="btn btn-warning">Modifier</button>
    </div>
    <div class="card-body">
        @foreach(var contact in selectedContacts)
        {
            foreach(var telephone in selectedTelephonesContacts)
            {
                <div class="row">
                    <div class="col-xl-6 p-1">
                        <label for="inputEmail4">Nom, Prénom</label>
                        <input type="text" class="form-control" id="inputEmail4" value="@contact.Nom, @contact.Prenom">
                    </div>
                    <div class="col-xl-6 p-1">
                        <label for="inputPassword4">Fonction</label>
                        <input type="text" class="form-control" id="inputPassword4" value="@contact.Fonction">
                    </div>
                </div>
                <div class="row">
                    <div class="col-xl-6 p-1">
                        <label for="inputEmail4">Adresse courriel</label>
                        <input type="text" class="form-control" id="inputEmail4" value="@contact.AdresseCourriel">
                    </div>
                    <div class="col-xl-6 p-1">
                        <label for="inputPassword4">Numéro de téléphone (@telephone.Type)</label>
                        <input type="text" class="form-control" id="inputPassword4" value="@telephone.NumTelephone.Insert(3, "-").Insert(7, "-") #@telephone.Poste">
                    </div>
                </div>
            }
        }
    </div>
    <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
        <h3 class="py-2 p-0 my-0 text-white">Produits et services</h3>
        <button type="button" class="btn btn-warning">Modifier</button>
    </div>
    <div class="card-body">
        <div class="row h-100">
            <div class="col-xl-6">
                @if (groupedServices != null && groupedServices.Count > 0)
                {
                    string currentCategory = null;
                    string currentNature = null;

                    foreach (var group in groupedServices)
                    {
                        if (currentCategory != group.Key.CodeCategorie || currentNature != group.Key.Nature)
                        {
                            // Ajoute une line si ce n'est pas le premier groupe
                            if (currentCategory != null)
                            {
                                <hr />
                            }
                            <div>
                                <strong>@group.Key.CodeCategorie - @group.Key.Nature</strong>
                            </div>
                            currentCategory = group.Key.CodeCategorie;
                            currentNature = group.Key.Nature;
                        }
                        foreach (var produitservice in group)
                        {
                            <p>@produitservice.CodeUnspsc - @produitservice.Description</p>
                        }
                    }
                }


            </div>
            <div class="col-xl-6 d-flex flex-column">
                <label for="TextAreaProduitService" class="form-label">Détails et spécifications</label>
                <textarea class="form-control flex-grow-1" id="TextAreaProduitService" style="resize: none;">@selectedFournisseur.DetailSpecification</textarea>
            </div>
        </div>
        
    </div>
    <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
        <h3 class="py-2 p-0 my-0 text-white">Licence RBQ</h3>
        <button type="button" class="btn btn-warning">Modifier</button>
    </div>
    <div class="card-body">
        

        <div class="row d-flex align-items-center mb-3">
            <div class="col-xl-4">
                @licencerbqs.Statut 
            </div>
            
            <div class="col-xl-4 d-flex align-items-center">
                <label for="IdLicenceRbq" class="me-2">Numéro</label>
                <input type="text" class="form-control w-auto" id="IdLicenceRbq" value="@licencerbqs.IdLicenceRbq">
            </div>

            <div class="col-xl-4 d-flex align-items-center">
                <label for="TypeLicencerbq" class="me-2">Type de licence</label>
                <input type="text" class="form-control w-auto" id="TypeLicencerbq" value="@licencerbqs.Type">
            </div>
        </div>
        

        @if (selectedCategorieRBQ != null)
        {
            var groupedCategories = GroupCategoriesByType();
                
            <div class="row">
                <div class="col-xl-6 mb-3">
                    <h3>Type: Général</h3>
                    @if (groupedCategories.ContainsKey("Général") && groupedCategories["Général"].Count > 0)
                    {
                        <ul>
                            @foreach (var categorie in groupedCategories["Général"])
                            {
                                <li>@categorie.CodeSousCategorie - @categorie.TravauxPermis</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <div class="d-flex justify-content-center align-items-center">
                            <p>Aucune Catégorie</p>
                        </div>
                    }
                </div>
                <div class="col-xl-6 mb-3">
                    <h3>Type: Spécialisé</h3>
                    @if (groupedCategories.ContainsKey("Spécialisé") && groupedCategories["Spécialisé"].Count > 0)
                    {
                        <ul>
                            @foreach (var categorie in groupedCategories["Spécialisé"])
                            {
                                <li>@categorie.CodeSousCategorie - @categorie.TravauxPermis</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <div class="d-flex justify-content-center align-items-center">
                            <p>Aucune Catégorie</p>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <p>Chargement...</p>
        }

    </div>
    <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
        <h3 class="py-2 p-0 my-0 text-white">Brochures et cartes d'affaire (Total: @GetFormatSize())</h3>
        <button type="button" class="btn btn-warning">Modifier</button>
    </div>
    <div class="card-body">
        <div class="table-responsive">
        <table class="table border-bleuFonce table-bordered my-0">
            <thead>
                <tr>
                    <th scope="col" class="col-1 texte-bold">Fichier</th>
                    <th scope="col" class="texte-bold">Nom</th>
                    <th scope="col" class="col-1 texte-bold">Taille</th>
                    <th scope="col" class="col-2 texte-bold">Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var file in selectedFichiers)
                {
                    <tr>
                        <th scope="row" class="texte-bold">@(selectedFichiers.IndexOf(file)+1)</th>
                        <td class="texte-light">@file.Nom@file.Type</td>
                        <td class="texte-light">@GetFormatSizeFile(file.Taille)</td>
                        <td><button class="btn btn-danger texte-bold" type="button" data-bs-target="#ModalConfirmation" data-bs-toggle="modal" @onclick="() => OpenConfirmationModal(file)"><i class="bi bi-trash"></i> Effacer</button></td>
                    </tr>
                }
            </tbody>
                    <div class="modal fade" id="ModalConfirmation" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" data-bs-backdrop="static">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                        <div class="modal-header border-0 text-center w-100">
                            <h1 class="modal-title fs-5 mx-auto" id="exampleModalLabel">Êtes-vous sûre de vouloir effacer ce fichier </h1>
                        </div>
                        <div class="modal-footer border-0 d-flex justify-content-center">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                            <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="()=>OnDeleteFile(selectedFile)">Confirmer</button>
                        </div>
                        </div>
                    </div>
                    </div>
        </table>
</div>
    </div>

    <div class="card-header py-2 bg-bleuFonce d-flex justify-content-between align-items-center">
        <h3 class="py-2 p-0 my-0 text-white">Finances</h3>
        <button type="button" class="btn btn-warning" @onclick="ModifcationFinances">Modifier</button>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">TPS</label>
                <input type="text" class="form-control" id="inputEmail4" value="@finance.NumeroTps" readonly="@modificationFinances">
            </div>
            <div class="col-xl-6 p-1">
                <label for="inputPassword4">TVQ</label>
                <input type="text" class="form-control" id="inputPassword4" value="@finance.NumeroTvq" readonly="@modificationFinances">
            </div>
        </div>
        <div class="row">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">Conditions de paiement</label>
                <input type="text" class="form-control" id="inputEmail4" value="@finance.ConditionPaiement" readonly="@modificationFinances">
            </div>
            <div class="col-xl-6 p-1">
                <label for="inputPassword4">Devise</label>
                <input type="text" class="form-control" id="inputPassword4" value="@finance.Devise" readonly="@modificationFinances">
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-xl-6 p-1">
                <label for="inputEmail4">Mode de communication</label>
                <input type="text" class="form-control" id="inputEmail4" value="@finance.ModeCommunication" readonly="@modificationFinances">
            </div>
            
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
@code{
    private bool modificationFinances = true;
    private bool modificationInfo = true;
    public int sizeTotal { get; set; } = 0;
    private CombinedFormModel combinedFormModel = new CombinedFormModel();
    public int MaxSize = 75;
    private Fichier? selectedFile;
    List<Portail_OptiVille.Data.Models.Contact> selectedContacts = new List<Portail_OptiVille.Data.Models.Contact>();
    List<Fichier> selectedFichiers = new List<Fichier>();
    //List<Fournisseur> selectedFournisseurs = new List<Fournisseur>();
    List<Historique> selectedHistoriques = new List<Historique>();
    private Historique? closestHistorique;
    List<Licencerbq> selectedLicencerbqs = new List<Licencerbq>();
    List<Coordonnee> selectedCoordonnes = new List<Coordonnee>();
    List<Produitservice> selectedProduitservices = new List<Produitservice>();
    List<Finance> selectedFinances = new List<Finance>();
    List<Telephone> selectedTelephones = new List<Telephone>();
    List<Telephone> selectedTelephonesContacts = new List<Telephone>();
    List<Identification> selectedIdentifications = new List<Identification>();
    Fournisseur selectedFournisseur = new Fournisseur();
    Identification identification = new Identification();
    List<Categorierbq> selectedCategorieRBQ = new List<Categorierbq>();
    Finance finance = new Finance();
    Coordonnee coordonnee = new Coordonnee();
    Licencerbq licencerbqs = new Licencerbq();

    List<IGrouping<GroupKey, Produitservice>>? groupedServices;

    public class CombinedFormModel
    {
        public FournisseurFormModel FournisseurFormModel { get; set; }
        public IdenticationFormModel IdentificationFormModel { get; set; }

        public CombinedFormModel()
        {
            FournisseurFormModel = new FournisseurFormModel();
            IdentificationFormModel = new IdenticationFormModel();
        }
    }

    private void ModifcationFinances()
    {
        modificationFinances = false;
    }

    private void ModifcationInfo()
    {
        modificationInfo = false;
    }

    private async Task SaveModifcationInfo()
    {
        // Validate the form data
            // Replace selectedFournisseur data with contactFormModel data
            identification.Neq = combinedFormModel.IdentificationFormModel.NEQ;
            coordonnee.NoCivique = combinedFormModel.FournisseurFormModel.NoEntreprise; // Ensure this property is available
            coordonnee.Rue = combinedFormModel.FournisseurFormModel.RueEntreprise; // Ensure this property is available
            coordonnee.Bureau = combinedFormModel.FournisseurFormModel.BureauEntreprise; // Ensure this property is available
            identification.NomEntreprise = combinedFormModel.IdentificationFormModel.NomEntreprise;
            coordonnee.Ville = combinedFormModel.FournisseurFormModel.VilleEntreprise; // Ensure this property is available
            coordonnee.Province = combinedFormModel.FournisseurFormModel.ProvinceEntreprise; // Ensure this property is available
            coordonnee.CodePostal = combinedFormModel.FournisseurFormModel.CodePostalEntreprise; // Ensure this property is available
            identification.AdresseCourriel = combinedFormModel.IdentificationFormModel.CourrielEntreprise;
            coordonnee.SiteInternet = combinedFormModel.FournisseurFormModel.SiteWebEntreprise;
            

            Console.WriteLine(identification.Neq);
            Console.WriteLine(coordonnee.NoCivique);
            Console.WriteLine(coordonnee.Rue);
            Console.WriteLine(coordonnee.Bureau);
            Console.WriteLine(identification.NomEntreprise);
            Console.WriteLine(coordonnee.Ville);
            Console.WriteLine(coordonnee.Province);
            Console.WriteLine(coordonnee.CodePostal);
            Console.WriteLine(identification.AdresseCourriel);
            Console.WriteLine(coordonnee.SiteInternet);


            // Save changes to the database
            _context.Update(selectedFournisseur);
            //await _context.SaveChangesAsync();

        // Reset modificationInfo after saving
        modificationInfo = true;
    }
    public class GroupKey
    {
        public string? CodeCategorie { get; set; }
        public string? Nature { get; set; }

        public override bool Equals(object? obj)
        {
            if (obj is GroupKey other)
            {
                return CodeCategorie == other.CodeCategorie && Nature == other.Nature;
            }
            return false;
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(CodeCategorie, Nature);
        }
    }

    private Dictionary<string, List<Categorierbq>> GroupCategoriesByType()
    {
        var groupedCategories = new Dictionary<string, List<Categorierbq>>();

        foreach (var categorie in selectedCategorieRBQ)
        {
            if (!groupedCategories.ContainsKey(categorie.NomCategorie))
            {
                groupedCategories[categorie.NomCategorie] = new List<Categorierbq>();
            }
            groupedCategories[categorie.NomCategorie].Add(categorie);
        }

        return groupedCategories;
    }


    @* protected override async Task OnAfterRenderAsync(bool firstRender){
        try{
            var result = await ProtectedSessionStore.GetAsync<string>("Email");
            if (!result.Success || string.IsNullOrEmpty(result.Value))
            {
                throw new UserNotAuthenticatedException("Employé non connecté ou session expirée.");
            }
        }catch(UserNotAuthenticatedException ex)
        {
            Console.WriteLine($"Erreur lors de la récupération de l'adresse courriel: {ex.Message}");
            //navigationManager.NavigateTo("/Connexion",true);
        }

    } *@

    protected override async Task OnInitializedAsync()
    {
        try
        {
            selectedFournisseur = await _context.Fournisseurs.FindAsync(1);
            selectedContacts = await _context.Contacts.Where(c => c.Fournisseur == 1).ToListAsync();

            foreach(var contactTelephone in selectedContacts)
            {
                selectedTelephonesContacts = await _context.Telephones.Where(c => c.Contact == contactTelephone.IdContact).ToListAsync();
                //selectedTelephones = await _context.Telephones.Where(c => c.Fournisseur == 1).ToListAsync();
            }
            coordonnee = await _context.Coordonnees.SingleAsync(c => c.Fournisseur == 1);

            foreach(var coordonneeTelephone in selectedCoordonnes)
            {
                selectedTelephones = await _context.Telephones.Where(c => c.Contact == coordonneeTelephone.IdCoordonnee).ToListAsync();

            }
            finance = await _context.Finances.SingleAsync(c => c.Fournisseur == 1);
            identification = await _context.Identifications.SingleAsync(c => c.Fournisseur == 1);
            selectedFichiers = await _context.Fichiers.Where(c => c.Fournisseur == 1).ToListAsync();
            selectedHistoriques = await _context.Historiques.Where(c => c.Fournisseur == 1).ToListAsync();
            //selectedFournisseurProduitservices = await _context.Fournisseurproduitservices.Where(p => p.IdFournisseur == 1).ToListAsync();
            //Get données dans produits services
            licencerbqs = await _context.Licencerbqs.SingleAsync(c => c.Fournisseur == 1);
            selectedCategorieRBQ = await _context.Categorierbqs.Where(c => c.IdLicenceRbqs.Any(l => l.IdLicenceRbq == licencerbqs.IdLicenceRbq)).ToListAsync();
            //selectedFournisseurProduitservices = await _context.Fournisseurproduitservices.Where(c => c.IdFournisseur.Any(l => l.IdFournisseur == selectedFournisseur.IdFournisseur)).ToListAsync();
            var fournisseurProduitIds = await _context.Database
    .SqlQueryRaw<string>(@"
        SELECT idProduitService 
        FROM FournisseurProduitService 
        WHERE idFournisseur = {0}", selectedFournisseur.IdFournisseur)
    .ToListAsync();

// Now, query the actual product services based on the codes fetched from the pivot table
var selectedFournisseurProduitservices = await _context.Produitservices
    .Where(p => fournisseurProduitIds.Contains(p.CodeUnspsc)) // Ensure CodeUnspsc is string here
    .ToListAsync();
    
            selectedLicencerbqs = await _context.Licencerbqs.Where(l => l.Fournisseur == 1).Include(l => l.IdCategorieRbqs).ToListAsync();
            
            //selectedCategorieRBQ = await _context.Licencerbqs.Where(l => c.)
            //selectedLicencerbqs = await _context.Licencerbqs.Where(l => l.Fournisseur == 1).Include(l => l.CodeSousCategorie).ToListAsync();
            //selectedLicencerbqs = await _context.Licencerbqs.Include(l => l.CodeSousCategories).Where(c => c.IdFournisseur == 1).ToListAsync();
            closestHistorique = selectedHistoriques.Where(h => h.DateEtatChanged.HasValue).OrderBy(h => Math.Abs((h.DateEtatChanged.Value - DateTime.UtcNow).TotalDays)).FirstOrDefault();
            groupedServices = selectedProduitservices.GroupBy(p => new GroupKey 
            { 
                CodeCategorie = p.CategorieUnspsc, 
                Nature = p.Nature 
            }).ToList(); 

                if (coordonnee != null && identification != null)
                {
                    
                    // Map the Fournisseur entity to FournisseurFormModel
                    combinedFormModel.FournisseurFormModel.NoEntreprise = coordonnee.NoCivique;
                    combinedFormModel.FournisseurFormModel.RueEntreprise = coordonnee.Rue;
                    combinedFormModel.FournisseurFormModel.BureauEntreprise = coordonnee.Bureau;
                    combinedFormModel.FournisseurFormModel.VilleEntreprise = coordonnee.Ville;
                    combinedFormModel.FournisseurFormModel.ProvinceEntreprise = coordonnee.Province;
                    combinedFormModel.FournisseurFormModel.CodePostalEntreprise = coordonnee.CodePostal;
                    combinedFormModel.FournisseurFormModel.RegionAdmEntreprise = coordonnee.RegionAdministrative;
                    combinedFormModel.FournisseurFormModel.SiteWebEntreprise = coordonnee.SiteInternet;
                    //combinedFormModel.FournisseurFormModel.PhoneList = selectedFournisseur.Telephones.Select(t => new TelephoneFormModel{// Populate the phone details here}).ToList();

                    // Map the Fournisseur entity to IdentificationFormModel
                    combinedFormModel.IdentificationFormModel.NEQ = identification.Neq;
                    combinedFormModel.IdentificationFormModel.NomEntreprise = identification.NomEntreprise;
                    combinedFormModel.IdentificationFormModel.CourrielEntreprise = identification.AdresseCourriel;
                    combinedFormModel.IdentificationFormModel.MotDePasse = identification.MotDePasse;
                    combinedFormModel.IdentificationFormModel.ConfirmationMotDePasse = identification.MotDePasse;
                }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la récupération des informations: {ex.Message}");
        }
    }

    private string GetFormatSizeFile(int? size)
    {
        if (size >= 1048576)
        {
            return $"{(size / 1048576.0):F2} MB";
        }
        else
        {
            return $"{(size / 1024.0):F2} KB";
        }
    }
 
    private string GetFormatSize()
    {
        sizeTotal = selectedFichiers.Sum(file => (int)(file.Taille.GetValueOrDefault(0)));
        if (sizeTotal >= 1048576) // 1 MB = 1048576 bytes (1 * 1024 * 1024)
        {
            return $"{(sizeTotal / 1048576.0):F2} MB / {MaxSize}MB";
        }
        else
        {
            return $"{(sizeTotal / 1024.0):F2} KB / {MaxSize}MB";
        }
    }

    private async Task ChangementDemande()
    {
        if(closestHistorique.EtatDemande == "Refusé")
        {
            var newHistorique = new Historique
            {
                EtatDemande = "En attente",
                DateEtatChanged = DateTime.UtcNow,
                Fournisseur = closestHistorique.Fournisseur
            };
            _context.Historiques.Add(newHistorique);
            closestHistorique.EtatDemande = "En attente";
            closestHistorique.DateEtatChanged = DateTime.UtcNow;
            await _context.SaveChangesAsync();
        }
    }
    private async Task DeleteFiche()
    {
        var newHistorique = new Historique
        {
            EtatDemande = "Refusé",
            DateEtatChanged = DateTime.UtcNow,
            Fournisseur = closestHistorique.Fournisseur
        };
        _context.Historiques.Add(newHistorique);
        closestHistorique.EtatDemande = "Refusé";
        closestHistorique.DateEtatChanged = DateTime.UtcNow;

        foreach (var fichier in selectedFichiers.ToList())
        {
            _context.Fichiers.Remove(fichier);
        }
        selectedFichiers.Clear();

        
        Console.WriteLine("La fiche a été supprimé");
        await _context.SaveChangesAsync();
    }
    private void OpenConfirmationModal(Fichier file)
    {
        selectedFile = file;
    }
    private void OnDeleteFile(Fichier file)
    {
        selectedFichiers.Remove(file);
        GetFormatSize();
    }
}