@page "/gestionUser"
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Portail_OptiVille.Data.Models
@using Portail_OptiVille.Data.Services
@inject A2024420517riGr1Eq6Context _context
@inject GestionUserService GestionUserService

<style>
    .custom-alert {
        position: relative; /* Ensures it behaves normally in document flow */
        display: flex; /* Allows flexbox alignment */
        justify-content: space-between; /* Positions the button at the end */
        align-items: center; /* Centers content vertically */
    }
</style>

<PageTitle>Gestion des rôles</PageTitle>
    <div class="row d-flex justify-content-center">
        <div class="col-xl-7 col-lg-6 col-sm-12 col-12 p-0">
            <div class="card">
                <div class="card-header py-2 bg-vertFonce">
                    <h3 class="py-2 my-0 text-white titre-bold">Gestion des utilisateurs</h3>
                </div>
            <div class="card-body border-vertFonce">
                <div class="row">
                    <div class="col-xl-4">
                        <div class="titre-medium fs-3">Utilisateur</div>
                    </div>
                    <div class="col-xl-4">
                        <div class="titre-medium fs-3">Rôle</div>
                    </div>
                </div>
                <div class="row d-flex justify-content-center">
                    @foreach (var employe in allEmployes)
                    {
                        <div class="row d-flex align-items-center pb-2">
                            <div class="col-xl-4 col-12">
                                <div class="texte-light fs-6 fw-bold">@employe.Courriel</div>
                            </div>
                            <div class="col-xl-6 col-6 py-1">
                                <select class="form-select" @onchange="(e) => OnRoleChange(employe, e.Value!.ToString()!)">
                                    @foreach (var value in Roles)
                                    {
                                        <option value="@value" class="texte-light fs-6 fw-bold" selected="@((employe.Role == value))">@value</option>
                                    }
                                </select>
                            </div>
                            <div class="col-xl-2 col-6">
                                <button type="button" class="btn btn-danger w-100" @onclick="() => OnDeleteUser(employe)"><i class="bi bi-trash"></i></button>
                            </div>
                        </div>
                    }
                </div>
                <div class="">
                @if (!formAjouter)
                {
                    <div class="row justify-content-center">
                        <div class="col-xl-6 text-center">
                            <button type="submit" class="btn btn-success" style="width: 200px;" @onclick="ShowForm"><i class="bi bi-plus-circle"></i> Ajouter</button>
                        </div>
                    </div>
                }
                else
                {
                    <EditForm Model="@userModel" OnValidSubmit="@AjoutUtilisateur">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row mb-3 justify-content-center">
                            <div class="col-xl-12">
                                <label for="emailNewUser">Email:</label>
                                <InputText class="form-control" id="emailNewUser" @bind-Value="userModel.email" />
                                <ValidationMessage For="@(() => userModel.email)" />
                            </div>
                        </div>

                        <div class="row mb-3 justify-content-center">
                            <div class="col-xl-12">
                                <label for="roleNewUser">Role:</label>
                                <select class="form-select" @bind="userModel.role" id="roleNewUser" selected="@((userModel.role == "Commis"))">
                                    @foreach (var value in Roles)
                                    {
                                        <option value="@value">@value</option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => userModel.role)" />
                            </div>
                        </div>

                        <div class="row justify-content-center">
                            <div class="col-xl-6 text-center">
                                <button type="submit" class="btn btn-primary">Ajouter un utilisateur</button>
                            </div>
                        </div>
                    </EditForm>
                }
                </div>
            </div>
            <div class="card-footer bg-vertFonce">
                @if (!string.IsNullOrEmpty(validationError))
                {
                <div class="d-flex justify-content-center align-items-center">
                    <div class="col-xl-6 alert alert-danger custom-alert fade show m-1" role="alert">
                        <span class="text-center flex-grow-1">
                            @((MarkupString)validationError)
                        </span>
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="ClearMessageError"></button>
                    </div>
                </div>
                }
                <button type="submit" class="btn btn-success w-100" @onclick="SubmitChanges">Sauvegarder</button>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
@code{
    private UserModele userModel = new UserModele() { role = "Commis" };
    private bool formAjouter = false;
    private string? validationError = null;
    List<string> Roles = new() { "Administrateur", "Responsable", "Commis" };
    private List<Employe> allEmployes = new List<Employe>();
    private List<Employe> allNonUsers = new List<Employe>();
    public class UserModele
    {
        [Required(ErrorMessage = "Veuillez mettre un courriel")]
        public string? email { get; set; }
        [Required(ErrorMessage = "Veuillez mettre un role")]
        public string? role { get; set; }
    }
    private void OnRoleChange(Employe employe, string selectedRole)
    {
        employe.Role = selectedRole;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            allEmployes = await _context.Employes.Where(e => Roles.Contains(e.Role)).ToListAsync();
            allNonUsers = await _context.Employes.Where(e => e.Role == "Aucun").ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la récupération des personnes: {ex.Message}");
        }
    }

    private List<string> validationErrors = new List<string>();

    private bool ValidateRoles()
    {
        validationError = string.Empty;

        int adminCount = allEmployes.Count(e => e.Role == "Administrateur");
        int responsableCount = allEmployes.Count(e => e.Role == "Responsable");

        if (adminCount != 2)
        {
            validationError += "Vous devez avoir 2 Administrateurs. <br>";
        }

        if (responsableCount < 1)
        {
            validationError += "Vous devez avoir au moins 1 Responsable.";
        }

        return string.IsNullOrEmpty(validationError);
    }

    private void ClearMessageError()
    {
        validationError = "";
    }

    private async Task OnDeleteUser(Employe employe)
    {
        Console.WriteLine($"User: {userModel.email} Role: {userModel.role} (retiré)");
        allEmployes.Remove(employe);
        await GestionUserService.DeleteUser(employe);
    }

    private void ShowForm()
    {
        formAjouter = !formAjouter;
    }

    private void AjoutUtilisateur()
    {
       var allNonUsersEmails = allNonUsers.Select(e => e.Courriel).ToList();
        if (allNonUsersEmails.Contains(userModel.email))
        {
        allEmployes.Add(new Employe { Courriel = userModel.email!, Role = userModel.role! });

        Console.WriteLine($"User: {userModel.email} Role: {userModel.role} (ajouté)");
        
        userModel = new UserModele() { role = "Commis" };;
        formAjouter = false;
        ClearMessageError();
        }
        else
        {
            validationError = "Cet utilisateur n'existe pas";
        }
    }

    private void SubmitChanges()
    {
        if(ValidateRoles())
        {
            foreach(var employe in allEmployes)
            {
                Console.WriteLine($"Employe: {employe.Courriel}, Role: {employe.Role}");
            }
            ClearMessageError();
        }
        else
        {
            Console.WriteLine("Error role validation");
        }
    }
}