@page "/config"
@using System.Text.Json
@inject Portail_OptiVille.Data.Utilities.Config config
@inject IHostEnvironment hostEnvironment // Inject IHostEnvironment to access the web root path
<div class="card">
    <div class="card-header py-2 bg-bleuFonce">
        <h3 class="py-2 p-0 my-0 text-white titre-bold">Carte d'affaires et brochures</h3>
    </div>
    <div class="card-body">
        <label for="CourrielAppro" class="texte-bold">Courriel de l'Appro.</label>
        <InputText @bind-Value="config.CourrielAppro" type="email" class="form-control" id="CourrielAppro"
                   readonly="@(!isEditing)" />

        <label for="DelaiRevision" class="texte-bold">Délai avant la révision (mois)</label>
        <InputNumber @bind-Value="config.DelaiRevision" TValue="int" class="form-control" id="DelaiRevision"
                     readonly="@(!isEditing)" />
    
        <label for="TailleMaxFichiers" class="texte-bold">Taille maximale des fichiers joints (Mo)</label>
        <InputNumber @bind-Value="config.TailleMaxFichiers" TValue="int" class="form-control" id="TailleMaxFichiers"
                     readonly="@(!isEditing)" />

        <label for="CourrielFinance" class="texte-bold">Courriel des finances</label>
        <InputText @bind-Value="config.CourrielFinance" type="email" class="form-control" id="CourrielFinance"
                   readonly="@(!isEditing)" />

        <div class="mt-3">
            @if (!isEditing)
            {
                <button class="btn btn-primary" @onclick="EditConfig">Modifier</button>
            }
            else
            {
                <button class="btn btn-success" @onclick="SaveConfig">Sauvegarder</button>
            }
        </div>

        @if (saveSuccess)
        {
            <div class="alert alert-success mt-3">Configuration saved successfully!</div>
        }
    </div>
</div>
@code {
    private bool isEditing = false;
    private bool saveSuccess = false;

    private void EditConfig()
    {
        isEditing = true;
        saveSuccess = false; 
    }

    private async Task SaveConfig()
    {
        var filePath = Path.Combine(hostEnvironment.ContentRootPath, "wwwroot", "Setting.json");
        var json = JsonSerializer.Serialize(config, new JsonSerializerOptions { WriteIndented = true });

        await File.WriteAllTextAsync(filePath, json);

        saveSuccess = true; 
        isEditing = false; 
        await Task.Delay(4000); 
        saveSuccess = false; 
    }
}
